{"version":3,"sources":["translations.tsx","utils.tsx","components/DateCalc/DateArray.tsx","APIs/apiURLS.tsx","components/DateCalc/index.tsx","components/Design/Design.jsx","components/Zdate/Zdate.form.tsx","components/Zdate/index.tsx","components/Footer/index.tsx","components/Header/index.tsx","components/ReleaseNotes/index.tsx","APIs/apiCall.tsx","components/utils.tsx","components/FinanceChargeCalc/FinanceChargeCalc.utils.tsx","components/FinanceChargeCalc/ControlButtons/index.tsx","components/FinanceChargeCalc/CPInputs/CPInputs.form.tsx","components/FinanceChargeCalc/CPInputs/index.tsx","assets/check-bold-green.svg","assets/close-thick-red.svg","components/FinanceChargeCalc/CreditProtectionTable/CreditProtectionTableRow/index.tsx","components/FinanceChargeCalc/CreditProtectionTable/index.tsx","components/FinanceChargeCalc/FCInputs/FCInputs.form.tsx","components/FinanceChargeCalc/FCInputs/index.tsx","components/FinanceChargeCalc/FinanceChargeTable/FinanceChargeTableRow/index.tsx","components/FinanceChargeCalc/FinanceChargeTable/index.tsx","components/FinanceChargeCalc/TotalChargeBack/index.tsx","components/FinanceChargeCalc/index.tsx","Routes.tsx","components/ReleaseNotes/NoteBook.jsx","components/Providers/ToastProvider/index.tsx","components/Providers/GlobalProviders/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["EN_US_TRANSLATIONS","INITIAL_TRANSLATIONS","getLanguageTranslations","language","a","newLang","TranslateService","getRankedLanguage","Promise","resolve","parseHistorySearch","search","searchObject","substr","length","split","forEach","e","exportCsv","data","docTitle","hidden","document","createElement","href","encodeURI","target","download","click","copyTable","navigator","clipboard","writeText","fixDateString","date","regex","replace","window","c1bAxios","HOLIDAYS","baseFinanceURL","financeChargeURL","actualFinanceChargeURL","creditProtectURL","fChargeOnCPFeesURL","baseDateURL","regZDateURL","fromCustomDateURL","getAPIURL","type","baseURL","location","hostname","DateCalc","history","useHistory","dateRef","useRef","useState","Date","toLocaleDateString","calculatedDate","setCalculatedDate","calculatedDateB","setCalculatedDateB","setDaysToAdd","exStartDate","setExStartDate","exDays","SetExDays","calculationInitialized","setCalculationInitialized","useForm","Form","Control","toISOString","validators","VALIDATIONS","required","form","calculate","onSubmit","controls","startDate","value","parseInt","days","postObj","numberOfDays","post","then","res","calcD","resultDate","businessDate","dateObj","getMonth","retDate","i","j","tempDate","setDate","getDate","getDay","includes","addDays","bDate","undefined","catch","error","alert","useEffect","historyObj","dateArr","newDate","dayString","day","isNaN","newDaysToAdd","node","current","className","variant","label","onClick","newStartDate","toString","startDateFixed","csvTitle","contentRow","handleExport","isDisabled","handleCopy","control","Design","props","align","code","minValue","maxValue","pattern","RegExp","errorMessages","wholenumber","ZdateForm","groups","Zdate","isQuerySet","setIsQuerySet","shouldSetValue","setShouldSetValue","cycleRef","corrRcvdDate","setCorrRcvdDate","cycleCode","setCycleCode","nextCycleDate","setNextCycleDate","regZDate","setRegZDate","setNumberOfDays","reminderDate","setReminderDate","exRcvd","setExRcvd","exCycleCode","setExCycleCode","addMessage","useContext","ToastContext","values","handleOnClick","useCallback","response","url","sticky","dateQuery","dateArray","year","pop","unshift","newDateString","join","setValue","cycleString","cyclecode","cycleNumber","nodeDate","nodeCycle","newRcvd","newRcvdFixed","newRcvdDate","numOfDays","realNumber","getColorClassName","Footer","setCurrRoute","currentVersion","setCurrentVersion","buildDate","setBuildDate","to","pathname","Header","currRoute","ReleaseNotes","release","children","map","category","style","marginTop","firstSplit","secondSplit","financeChargesOnCreditProtectionAPI","RoundToDisplay","num","Math","round","toFixed","monthDiffArr","d1","d2","y1","months","getUTCDate","month","realYear","realMonth","realDay","UTC","getAFinanceCharge","args","securityAdjustmentDate","transactionPostDate","daysBetween","getTime","result","financeCharge","getCurrentDateWithLATimezone","Intl","DateTimeFormat","timeZone","format","setHours","convertCurrentDateWithLATimezone","splitDate","getNumberOfStatements","charge","manualAdd","splitStatement","statementDate","splitFraudAdjustment","getACreditProtectionCharge","pushData","firstCallData","transactionAmount","numberOfStatements","finalCallData","transactionDetails","highestAPR","firstReturnData","finalReturnData","cpFee","creditProtectionFee","fcOcp","financeChargesOnCreditProtectionFees","totalAdjustmentCharge","simpleFCAdd","fcArray","chargeArgs","id","tmpFCArray","slice","createID","push","simpleFCEdit","currentState","chargeIndex","find","splice","simpleCPAdd","tmpCPArray","cpArray","realDate","multipleCPAdd","dates","simpleCPEdit","newCharge","index","updateCpCharges","fromToggle","newCPArray","cpPushArray","getNewCPDates","filter","cpCharge","concat","multipleCPEdit","newDates","cpChargesToEdit","postDateArray","postDate","fraudDateArray","fraudAdjustmenDate","cyclesBetween","firstStatement","firstStatementDate","setUTCMonth","getUTCMonth","lastStatement","lastStatementDate","pushArray","tempStatement","newStatement","getFullYear","ControlButtons","onClear","cpTotals","fcTotals","fCTotalTransactions","totalTransactions","fCTotalFee","totalFee","cPTotalFee","cPTotalInterest","totalInterest","cPTotalAdjustment","totalAdjustment","runPrimaryButton","isExported","dateString","spacer","startCopy","line","parseFloat","totalFCLine","cpCopyString","total","totalChargeBackArea","copyFinalTemp","pricingStrategy","percentage","fraudAdjustment","totalPurchase","currency","CPForm","CPInputs","handleCpAdd","clearClicked","reset","minDate","getValue","setIsDisabled","resetControl","handleAdd","CreditProtectionTableRow","onRemove","onEdit","editMode","setEditMode","setShowError","faDate","maxDate","editObj","completeEdit","src","checkMark","alt","redX","CreditProtectionTable","creditProtections","totals","setTotals","newTotals","reduce","acc","v","postDateOfTransaction","FCForm","FCInputs","handleFcAdd","showError","marginBottom","color","FinanceChargeTableRow","fraudAmount","FinanceChargeTable","financeCharges","TotalChargeBack","totalAmt","setTotalAmt","FinanceChargeCalc","initial","useReducer","updateState","chargesState","dispatch","setClearClicked","checkBoxRef","cycleCodeControl","iForm","runFCAdd","chargeToAdd","JSON","parse","stringify","checked","AddFcYesCp","AddFcNoCp","payload","runFCEdit","chargeToEdit","EditFcYesCp","EditFcNoCp","runCPAdd","AddCp","runCPEdit","EditCP","updateCycleCode","CycleCodeChanged","runCpToggled","newState","CpToggled","disabled","ref","cycleCodeInput","chargeToRemove","isChecked","RemoveFc","RemoveCpSingle","state","action","totalCPObject","totalFCObject","UpdateTotals","newArgs","cpChecked","RemoveCpMultiple","Routes","notes","title","exact","path","minHeight","ToastProvider","position","autoTimeout","toasty","useToast","Provider","GlobalProviders","App","isTranslationLoaded","setIsTranslationLoad","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","console","log"],"mappings":";sbAcMA,EAAkB,eAIjBC,KA0BMC,EAAuB,uCAAG,WAAOC,GAAP,eAAAC,EAAA,6DAC/BC,EAAUF,KAGVE,EAAUC,IAAiBC,qBAJI,SAOdD,IAAiBJ,wBAAwBF,EAAoBK,GAP/C,uCAS5BG,QAAQC,SAAQ,IATY,2CAAH,sD,eC/BvBC,EAAqB,SAACC,GAGjC,GAAKA,EAEE,CACL,IAAIC,EAAoB,GASxB,OARAD,EACGE,OAAO,EAAGF,EAAOG,OAAS,GAC1BC,MAAM,KACNC,SAAQ,SAAAC,GACP,IAAIF,EAAQE,EAAEF,MAAM,KACpBH,EAAaG,EAAM,IAAMA,EAAM,MAG5BH,EAXP,OAAO,MAoBEM,EAAY,SAACC,EAAcC,GACjCA,IACHA,EAAW,YAEb,IAAIC,EAASC,SAASC,cAAc,KACpCF,EAAOG,KAAO,+BAAiCC,UAAUN,GACzDE,EAAOK,OAAS,SAEhBL,EAAOM,SAAWP,EAAW,OAE7BC,EAAOO,SAMIC,EAAY,SAACV,GACxBW,UAAUC,UAAUC,UAAUb,IAOnBc,EAAgB,SAACC,GAC5B,IAAMC,EAAQ,KACd,OAAID,EACKA,EAAKE,QAAQD,EAAO,KAEpB,IAIHE,OACNC,SAAWA,ICvEN,IAAMC,EAAW,CACtB,WACA,YACA,WACA,WACA,aACA,aACA,aACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,aACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,aACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,aACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,aACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,aACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,aACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,aACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,aACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,aACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,aACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,aACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,WACA,YACA,WACA,WACA,aACA,aACA,YCrdIC,G,OAAc,UAJG,OAIH,YACdC,EAAgB,UAAMD,EAAN,+CAChBE,EAAsB,UAAMF,EAAN,gDACtBG,EAAgB,UAAMH,EAAN,gDAChBI,EAAkB,UAAMJ,EAAN,iEAGlBK,EAAW,UAVG,OAUH,WACXC,EAAW,UAAMD,EAAN,mCACXE,EAAiB,UAAMF,EAAN,kCAEVG,EAAY,SAACC,GACxB,IAAIC,EAEF,6DADAb,OAAOc,SAASC,SAlBJ,qBADA,uBAwBd,OAAQH,EAAKA,MACX,IAAK,gBACH,MAAM,GAAN,OAAUC,EAAV,YAAqBT,GACvB,IAAK,sBACH,MAAM,GAAN,OAAUS,EAAV,YAAqBR,GACvB,IAAK,mBACH,MAAM,GAAN,OAAUQ,EAAV,YAAqBP,GACvB,IAAK,kBACH,MAAM,GAAN,OAAUO,EAAV,YAAqBN,GACvB,IAAK,WACH,MAAM,GAAN,OAAUM,EAAV,YAAqBJ,GACvB,IAAK,iBACH,MAAM,GAAN,OAAUI,EAAV,YAAqBH,K,OCjBdM,EAAW,WAKtB,IAAMC,EAAUC,cAKVC,EAAUC,iBAAgC,MAKhD,EAA4CC,oBAC1C,IAAIC,MAAOC,sBADb,mBAAOC,EAAP,KAAuBC,EAAvB,KAOA,EAA8CJ,oBAC5C,IAAIC,MAAOC,sBADb,mBAAOG,EAAP,KAAwBC,EAAxB,KAOA,EAAkCN,mBAAS,GAA3C,mBAAkBO,GAAlB,WAEA,EAAsCP,oBACpC,IAAIC,MAAOC,sBADb,mBAAOM,EAAP,KAAoBC,EAApB,KAGA,EAA4BT,mBAAiB,GAA7C,mBAAOU,EAAP,KAAeC,EAAf,KACA,EACEX,oBAAkB,GADpB,mBAAOY,EAAP,KAA+BC,EAA/B,KAOA,EAAeC,YACb,IAAIC,IAAK,WAAY,CACnBC,YACE,aACA,IAAIf,MAAOgB,cAAc9D,OAAO,EAAG,IACnC,aACA,OACA,CACE+D,WAAY,CAACC,IAAYC,YAG7BJ,YAAQ,OAAQ,GAAI,aAAc,SAAU,CAC1CE,WAAY,CAACC,IAAYC,eAZxBC,EAAP,oBA6EMC,EAAY,WAChB,GAAID,EAAKE,YAC+B,OAAlCF,EAAKG,SAASC,UAAUC,MAAgB,CAC1Cb,GAA0B,GAC1BJ,EAAeY,EAAKG,SAASC,UAAUC,OACvCf,EAAUgB,SAASN,EAAKG,SAASI,KAAKF,QACtC,IAAID,EAAY,IAAIxB,KAAKoB,EAAKG,SAASC,UAAUC,OAC7CG,EAAU,CACZrD,KAAMiD,EACNK,aAAcH,SAASN,EAAKG,SAASI,KAAKF,QAE5C9C,IACGmD,KAAKzC,EAAU,CAAEC,KAAM,mBAAqBsC,GAC5CG,MAAK,SAACC,GACL,IAAIC,EAAQD,EAAIxE,KAAK0E,WACjBC,EArEE,SAACR,EAAcS,GAC7B,GAAgC,oBAArBA,EAAQC,SAAnB,CAGA,IAAIC,EAAU,IAAItC,KAAKoC,GAEnBG,EAAI,EACJC,EAAI,EAER,GAAIb,GAAQ,EACV,KAAOY,GAAKZ,GAAM,CAChB,IAAIc,EAAW,IAAIzC,KAAKsC,GAExBG,EAASC,QAAQD,EAASE,UAAYH,EAAI,GAElB,IAAtBC,EAASG,UACa,IAAtBH,EAASG,UACThE,EAASiE,SAASJ,EAASxC,sBAE3BuC,GAAK,GAELF,EAAQI,QAAQJ,EAAQK,UAAYH,EAAI,GACxCD,GAAK,EACLC,EAAI,GAKV,GAAIb,GAAQ,EACV,KAAOY,EAAIZ,EAAO,GAAG,CACnB,IAAIc,EAAW,IAAIzC,KAAKsC,GAExBG,EAASC,QAAQD,EAASE,UAAYH,EAAI,GAElB,IAAtBC,EAASG,UACa,IAAtBH,EAASG,UACThE,EAASiE,SAASJ,EAASxC,sBAE3BuC,KAEAF,EAAQI,QAAQJ,EAAQK,UAAYH,EAAI,GACxCD,IACAC,EAAI,GAKV,OAAOF,GAsBoBQ,CACjBpB,SAASN,EAAKG,SAASI,KAAKF,OAC5BD,GAEFrB,EAAkB8B,GAClB,IAAIc,EAAK,OAAGZ,QAAH,IAAGA,OAAH,EAAGA,EAAclC,0BACZ+C,IAAVD,GACF1C,EAAmB0C,MAGtBE,OAAM,SAACC,GAAD,OAAWC,MAAM,wBAsEhC,OAvBAC,qBAAU,WACR,IAAIC,EAAatG,EAAmB4C,EAAQH,SAASxC,QACrD,GAAIqG,EAAY,CACd,IACIC,EADaD,EAAW9E,KACHnB,MAAM,KAC3BmG,EAAU,IAAIvD,KAChB0B,SAAS4B,EAAQ,IACjB5B,SAAS4B,EAAQ,IAAM,EACvB5B,SAAS4B,EAAQ,KAEfE,EAAYH,EAAWI,IAC3B,IAAKC,MAAMhC,SAAS8B,IAAa,CAC/B,IAAIG,EAAejC,SAAS8B,GAC5BlD,EAAaqD,GAGf,IAAIC,EAAO/D,EAAQgE,QACfD,IACFA,EAAKnC,MAAQ8B,EAAQvC,cAAc9D,OAAO,EAAG,QAGhD,CAAC2C,EAASF,EAAQH,SAASxC,SAG5B,qBAAK8G,UAAU,mBAAf,SACE,qBAAKA,UAAU,gBAAf,SACE,cAAC,IAAD,CAAa1C,KAAMA,EAAnB,SACE,sBAAK0C,UAAU,YAAf,UACE,qBAAKA,UAAU,aAAf,SACE,sBAAKA,UAAU,gBAAf,UACE,cAAC,IAAD,CAAYC,QAAQ,KAApB,6BACA,sBAAKD,UAAU,qBAAf,UACE,cAAC,IAAD,CACEE,MAAO,SACPC,QAAS,kBA1EN,WACnB,IAAIC,EAAe3D,EAAY4D,WAAW1F,QAAQ,KAAM,KACpD2F,EAAiB,IAAIpE,KAAKkE,GAE1BG,EAAQ,0BAAqB,IAAIrE,MAAOC,mBAAmB,UAI3DqE,EAAa,GACjBA,GAAcF,EAAenE,qBAAuB,IACpDqE,GAAc7D,EAAS,IACvB6D,GAAcpE,EAAiB,IAI/B3C,EARE,0EAKF+G,GAAclE,GAGOiE,GA2DUE,IACfC,YAAa7D,IAEf,wCACA,cAAC,IAAD,CACEqD,MAAO,OACPC,QAAS,kBA5DR,WACjB,IAAIC,EAAe3D,EAAY4D,WAAW1F,QAAQ,KAAM,KAKpD6F,EAAa,GACjBA,GALqB,IAAItE,KAAKkE,GAKDjE,qBAAuB,KACpDqE,GAAc7D,EAAS,KACvB6D,GAAcpE,EAAiB,KAI/BhC,EARE,6EAKFoG,GAAclE,IAkDiBqE,IACfD,YAAa7D,YAKrB,sBAAKmD,UAAU,gBAAf,UAEE,cAAC,IAAD,CAASY,QAAStD,EAAKG,SAASC,YAIhC,cAAC,IAAD,CAASkD,QAAStD,EAAKG,SAASI,OAEhC,gCACE,uBACA,cAAC,IAAD,CACEqC,MAAM,YACNC,QAAS,WACP5C,OAGJ,0BAGF,gCACE,iDACA,uBACCnB,KAEH,gCACE,sEACA,uBACCE,kBClRJuE,G,OAAS,SAACC,GACrB,OACE,sBAAKd,UAAU,SAAf,UACE,sBAAKA,UAAU,OAAf,UACE,sBAAKA,UAAU,oBAAf,UACE,8BACE,kCACE,gDACA,uBAAOA,UAAU,QAAQxE,KAAK,cAGlC,8BACE,kCACE,0DACA,uBAAOwE,UAAU,QAAQxE,KAAK,cAGlC,8BACE,kCACE,gDACA,uBAAOwE,UAAU,QAAQxE,KAAK,gBAGlC,8BACE,kCACE,kDACA,uBAAOwE,UAAU,QAAQxE,KAAK,cAGlC,cAAC,IAAD,CAAiB0E,MAAM,MAAMC,QAAS,kBAGxC,qBAAKH,UAAU,kBAAf,SACE,eAAC,IAAD,CAAOA,UAAU,eAAjB,UACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,6BACA,cAAC,IAAD,uCACA,cAAC,IAAD,6BACA,cAAC,IAAD,+BACA,cAAC,IAAD,oBACA,cAAC,IAAD,mBACA,cAAC,IAAD,SAGJ,eAAC,IAAD,CAAWe,MAAM,SAAjB,UACE,eAAC,IAAD,WACE,cAAC,IAAD,uBACA,cAAC,IAAD,uBACA,cAAC,IAAD,mBACA,cAAC,IAAD,uBACA,cAAC,IAAD,sBACA,cAAC,IAAD,iBACA,cAAC,IAAD,UACE,cAAC,IAAD,CAAiBb,MAAM,gBAG3B,eAAC,IAAD,WACE,cAAC,IAAD,uBACA,cAAC,IAAD,uBACA,cAAC,IAAD,mBACA,cAAC,IAAD,uBACA,cAAC,IAAD,sBACA,cAAC,IAAD,iBACA,cAAC,IAAD,UACE,cAAC,IAAD,CAAiBA,MAAM,gBAG3B,eAAC,IAAD,WACE,cAAC,IAAD,uBACA,cAAC,IAAD,uBACA,cAAC,IAAD,mBACA,cAAC,IAAD,uBACA,cAAC,IAAD,sBACA,cAAC,IAAD,iBACA,cAAC,IAAD,UACE,cAAC,IAAD,CAAiBA,MAAM,gBAI3B,eAAC,IAAD,WACE,cAAC,IAAD,IACA,cAAC,IAAD,CAAWa,MAAM,QAAjB,SACE,8CAGF,cAAC,IAAD,UACE,2CAEF,cAAC,IAAD,IACA,cAAC,IAAD,UACE,8CAEF,cAAC,IAAD,IACA,cAAC,IAAD,kBAOV,4BC5GAtG,G,OAAOwC,YAAQ,OAAQ,GAAI,mBAAoB,OAAQ,CAC3DE,WAAY,CAACC,IAAYC,aAGrB2D,EAAO/D,YAAQ,OAAQ,GAAI,aAAc,SAAU,CACvDE,WAAY,CACVC,IAAYC,SACZD,IAAY6D,SAAS,GACrB7D,IAAY8D,SAAS,IACrB9D,IAAY+D,QAAQ,IAAIC,OAAO,cAAe,gBAEhDC,cAAe,CACbJ,SAAU,oCACVC,SAAU,wCACVI,YAAa,oCAYFC,EARG,IAAIvE,IAAK,YAAa,CAACvC,EAAMuG,GAAO,CACpDQ,OAAQ,CACN,CACE/D,SAAU,CAAC,OAAQ,YCIZgE,EAAQ,WAEnB,IAAM5F,EAAUC,cAChB,EAAoCG,oBAAkB,GAAtD,mBAAOyF,EAAP,KAAmBC,EAAnB,KACA,EAA4C1F,oBAAkB,GAA9D,mBAAO2F,EAAP,KAAuBC,EAAvB,KAEM9F,EAAUC,iBAAgC,MAC1C8F,EAAW9F,iBAAgC,MAGjD,EAAwCC,mBAAsB,MAA9D,mBAAO8F,EAAP,KAAqBC,EAArB,KAGA,EAAkC/F,mBAAiB,GAAnD,mBAAOgG,EAAP,KAAkBC,EAAlB,KAGA,EAA0CjG,mBAAiB,IAA3D,mBAAOkG,EAAP,KAAsBC,EAAtB,KAGA,EAAgCnG,mBAAiB,IAAjD,mBAAOoG,EAAP,KAAiBC,EAAjB,KAGA,EAAwCrG,mBAAiB,IAAzD,mBAAO8B,EAAP,KAAqBwE,EAArB,KAGA,EAAwCtG,mBAAiB,IAAzD,mBAAOuG,EAAP,KAAqBC,EAArB,KAEA,EAA4BxG,qBAA5B,mBAAOyG,EAAP,KAAeC,EAAf,KACA,EAAsC1G,mBAAiB,GAAvD,mBAAO2G,EAAP,KAAoBC,EAApB,KAEQC,EAAeC,qBAAWC,KAA1BF,WAER,GAAe/F,YAAQwE,GAAhBjE,GAAP,qBAMAgC,qBAAU,WACR,MAJOhC,GAAK2F,OAINxI,EAAN,EAAMA,KAAMuG,EAAZ,EAAYA,KACZgB,EAAgBvH,GAChByH,EAAalB,KACZ,CAAC1D,GAAK2F,OAAOxI,KAAM6C,GAAK2F,OAAOjC,OAOlC,IAAMkC,GAAgBC,uBAAY,WAC5BzB,GACFC,GAAc,GAGZrE,GAAKE,aACPmF,EAAUZ,GACVc,EAAeZ,GACfpH,IACGmD,KAAKzC,EAAU,CAAEC,KAAM,aAAe,CACrCuG,aAAcA,EACdE,UAAWA,IAEZhE,MAAK,SAACmF,GACLhB,EAAiBgB,EAAS1J,KAAKyI,eAC/BI,EAAgBa,EAAS1J,KAAKqE,cAC9BuE,EAAYc,EAAS1J,KAAK2I,UAC1BI,EAAgBW,EAAS1J,KAAK8I,iBAE/BrD,OAAM,SAACC,GACN0D,EAAW,CACTnF,MAAM,eAAD,OAAiByB,GACtBiE,IAAK,SACL7H,KAAM,QACN8H,QAAQ,UAIf,CAAC5B,EAAYK,EAAcE,IA4B9B3C,qBAAU,WACR,IAAIiE,EAAYtK,EAAmB4C,EAAQH,SAASxC,QACpD,GAAIqK,EACF,IAEE,IACIC,EADqBD,EAAU9I,KACOnB,MAAM,KAC5CmG,EAAgB,IAAIvD,KACtB0B,SAAS4F,EAAU,IACnB5F,SAAS4F,EAAU,IAAM,EACzB5F,SAAS4F,EAAU,KAGjBC,EAAeD,EAAUE,MAC7BF,EAAUG,QAAQF,GAClB,IAAIG,EAAgBJ,EAAUK,KAAK,KAEnCvG,GAAKwG,SAAS,OAAQF,GAGtB,IAAIG,EAAsBR,EAAUS,UAChCC,EAAsBrG,SAASmG,GACnCzG,GAAKwG,SAAS,OAAQG,GAGtB,IAAIC,EAAWnI,EAAQgE,QACnBoE,EAAYrC,EAAS/B,QACrBmE,GAAYC,IACdD,EAASvG,MAAQ8B,EAAQvC,cAAc9D,OAAO,EAAG,IACjD+K,EAAUxG,MAAQoG,EAClBpC,GAAc,GACdE,GAAkB,IAEpB,SAOA,YANAiB,EAAW,CACTnF,MAAO,4DACPnC,KAAM,QACN6H,IAAK,SACLC,QAAQ,OAKb,CAACzH,EAAQH,SAASxC,SAEEiK,uBAAY,WACjC,OAAIvB,GAAkBK,EACbA,EAEA,KAER,CAACL,EAAgBK,IA6DpB,OANA3C,qBAAU,WACJoC,GACFwB,OAED,CAACxB,EAAYwB,KAGd,qBAAKlD,UAAU,gBAAf,SACE,sBAAKA,UAAU,aAAf,UACE,sBAAKA,UAAU,aAAf,UACE,cAAC,IAAD,CAAYC,QAAQ,KAApB,+BACA,sBAAKD,UAAU,qBAAf,UACE,cAAC,IAAD,CACEE,MAAO,SACPC,QAAS,kBA/DA,WACnB,IAAIiE,EAAO,OAAG1B,QAAH,IAAGA,OAAH,EAAGA,EAAQrC,WAClBgE,EAAY,OAAGD,QAAH,IAAGA,OAAH,EAAGA,EAASzJ,QAAQ,KAAM,KACtC2J,EAAc,IAAIpI,KAClBmI,IACFC,EAAc,IAAIpI,KAAKmI,IAEzB,IAEI7D,EAAa,GACjBA,GAAc8D,EAAYnI,qBAAuB,IACjDqE,GAAcoC,EAAc,IAC5BpC,GAAc2B,EAAgB,IAC9B3B,GAAc6B,EAAW,IACzB7B,GAAczC,EAAe,IAC7ByC,GAAcgC,EAEd,IAAIjC,EAAQ,2BAAsB,IAAIrE,MAAOC,mBAAmB,UAEhE1C,EAXE,+FAUyB+G,EACND,GA4CIE,IACfC,YAAa3C,IAEf,wCACA,cAAC,IAAD,CACEmC,MAAO,OACPC,QAAS,kBA5CF,WACjB,IAAIiE,EAAO,OAAG1B,QAAH,IAAGA,OAAH,EAAGA,EAAQrC,WAClBgE,EAAY,OAAGD,QAAH,IAAGA,OAAH,EAAGA,EAASzJ,QAAQ,KAAM,KACtC2J,EAAc,IAAIpI,KAClBmI,IACFC,EAAc,IAAIpI,KAAKmI,IAEzB,IAEI7D,EAAa,GACjBA,GAAc8D,EAAYnI,qBAAuB,KACjDqE,GAAcoC,EAAc,KAC5BpC,GAAc2B,EAAgB,KAC9B3B,GAAc6B,EAAW,KACzB7B,GAAczC,EAAe,KAI7B3D,EAVE,qGAOFoG,GAAcgC,IA6BW7B,IACfD,YAAa3C,UAInB,sBAAKiC,UAAU,uBAAf,UACE,sBAAKA,UAAU,wBAAf,UACE,eAAC,IAAD,CAAa1C,KAAMiE,EAAnB,UACE,sBAAKvB,UAAU,aAAf,UACG,IACD,cAAC,IAAD,CAASY,QAAStD,GAAKG,SAAShD,UAElC,sBAAKuF,UAAU,aAAf,UACG,IACD,cAAC,IAAD,CAASY,QAAStD,GAAKG,SAASuD,aAGpC,8BACE,cAAC,IAAD,CAAiBb,QAAS,kBAAM+C,MAAiBhD,MAAM,gBAG1DnC,EACC,eAAC,IAAD,WACE,eAAC,IAAD,CAAWgD,MAAM,SAAjB,UACE,cAAC,IAAD,8BACA,cAAC,IAAD,gCACA,cAAC,IAAD,6BACA,cAAC,IAAD,+BAEF,eAAC,IAAD,CAAWA,MAAM,SAAjB,UACE,cAAC,IAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,UACE,sBAAM,cAAY,gBAAlB,SAAmCoB,MAErC,cAAC,IAAD,UACE,+BAAOE,MAET,cAAC,IAAD,CAAWrC,UAvLD,SAACuE,GACzB,IACE,IAAIC,EAAqB5G,SAAS2G,GAClC,OAAKC,EAEMA,EAAa,GACf,WAEA,YAJA,GAMT,SACA,MAAO,IA4K2BC,CAAkB1G,GAAxC,SACE,sBAAM,cAAY,eAAlB,SAAkCA,MAEpC,cAAC,IAAD,UAAYyE,aAKlB,YC5SCkC,G,OAAS,SAAC5D,GACrB,IAAQ6D,EAAiB7D,EAAjB6D,aACR,EAA4C1I,mBAAS,IAArD,mBAAO2I,EAAP,KAAuBC,EAAvB,KACA,EAAkC5I,mBAAS,IAA3C,mBAAO6I,EAAP,KAAkBC,EAAlB,KAOA,OALAzF,qBAAU,WACRuF,EAAkB,SAClBE,EAAa,gBACZ,IAGD,sBAAK/E,UAAU,SAAf,UACE,qBAAK,cAAY,UAAjB,SACE,cAAC,IAAD,CACE,cAAY,UACZgF,GAAI,CAAEC,SAAU,kBAChBjF,UAAU,OACVG,QAAS,WACPwE,EAAa,mBALjB,SAQGC,MAGL,qBAAK,cAAY,OAAjB,SAAyBE,SCrBlBI,G,OAAS,SAACpE,GACrB,IAAQ6D,EAA4B7D,EAA5B6D,aAAcQ,EAAcrE,EAAdqE,UACtB,OACE,sBAAK,cAAY,SAASnF,UAAU,SAApC,UACE,qBAAKA,UAAyB,MAAdmF,EAAoB,eAAiB,kBAArD,SACE,cAAC,IAAD,CACE,cAAY,UACZH,GAAI,CAAEC,SAAU,KAChBjF,UAAU,OACVG,QAAS,WACPwE,EAAa,MALjB,+BAyBF,qBACE3E,UAAyB,WAAdmF,EAAyB,eAAiB,kBADvD,SAGE,cAAC,IAAD,CACE,cAAY,QACZH,GAAI,CAAEC,SAAU,SAChBjF,UAAU,OACVG,QAAS,WACPwE,EAAa,WALjB,iCAWF,qBACE3E,UACgB,cAAdmF,EAA4B,eAAiB,kBAFjD,SAKE,cAAC,IAAD,CACE,cAAY,WACZH,GAAI,CAAEC,SAAU,YAChBjF,UAAU,OACVG,QAAS,WACPwE,EAAa,cALjB,oCCjDKS,G,OAAe,SAACtE,GAC3B,IAAQuE,EAAsBvE,EAAtBuE,QAASC,EAAaxE,EAAbwE,SACjB,OACE,qBAAKtF,UAAU,qBAAf,SACE,sBAAKA,UAAU,gBAAf,UACE,cAAC,IAAD,CAAYC,QAAQ,KAApB,SAA0BoF,IAC1B,qBAAKrF,UAAU,aAAf,SACGsF,EAASC,KAAI,SAAC/L,GACb,GAAa,MAATA,EAAE,GAAY,CAChB,IAAIgM,EAAWhM,EAAEF,MAAM,OAAO,GAC9B,OACE,cAAC,IAAD,CAAY2G,QAAQ,KAAKwF,MAAO,CAAEC,UAAW,OAA7C,SACGF,IAIL,IAAIG,EAAanM,EAAEF,MAAM,KACrBsM,EAAcD,EAAW,GAAGrM,MAAM,KAEtC,OACE,gCACE,+BAAOsM,EAAY,KACnB,+BAAO,MAAQD,EAAW,oB,OCnB/BE,EAAsC,SAACnM,GAClD,OAAOmB,IAASmD,KAAKzC,EAAU,CAAEC,KAAM,oBAAsB9B,ICXlDoM,EAAiB,SAACC,GAC7B,OAAQC,KAAKC,MAAY,IAANF,GAAa,KAAKG,QAAQ,IAWlCC,EAAe,SAACC,EAAmBC,GAC9C,IAAIC,EAAK1I,SAASwI,EAAG,IAKjBG,EAAqB,IAJhB3I,SAASyI,EAAG,IAIFC,GAHV1I,SAASwI,EAAG,IACZxI,SAASyI,EAAG,IAGrB,OAAOE,GAAU,EAAI,EAAIA,GAUdC,EAAa,SACxB/C,EACAgD,EACA9G,GAEA,IAAI+G,EAA2B,kBAATjD,EAAoBA,EAAO7F,SAAS6F,GACtDkD,EAA6B,kBAAVF,EAAqBA,EAAQ7I,SAAS6I,GACzDG,EAAyB,kBAARjH,EAAmBA,EAAM/B,SAAS+B,GAEvD,OAAO,IAAIzD,KAAKA,KAAK2K,IAAIH,EAAUC,EAAY,EAAGC,EAAS,EAAG,EAAG,EAAG,KC0BhEE,EAAiB,uCAAG,WAAOC,EAAWjE,GAAlB,qBAAAnK,EAAA,6DACpBqO,EAAyB,IAAI9K,KAAK6K,EAAKC,wBACvCC,EAAsB,IAAI/K,KAAK6K,EAAKE,qBACpCC,GACDF,EAAuBG,UAAYF,EAAoBE,WZjC7B,MY6BL,UF7DOzN,EEoEKqN,EFnE7BlM,IAASmD,KAAKzC,EAAU,CAAEC,KAAM,kBAAoB9B,IEmEjByF,OAAM,SAACC,GAC/C0D,EAAW,CACTnF,MAAM,eAAD,OAAiByB,GACtBiE,IAAK,IACL7H,KAAM,QACN8H,QAAQ,OAZY,cAOpB8D,EAPoB,oDAiBnBL,GAjBmB,IAkBtBM,cAAeD,EAAO1N,KAAK2N,cAC3BxJ,KAAMqJ,KAnBgB,iCF7DM,IAACxN,IE6DP,OAAH,wDAuBV4N,EAA+B,WAC1C,OAAO,IAAIpL,KACTqL,KAAKC,eAAe,QAAS,CAC3BC,SAAU,wBACTC,QAAO,IAAIxL,MAAOyL,SAAS,EAAG,EAAG,EAAG,KAEtCzK,cACA9D,OAAO,EAAG,KAGFwO,EAAmC,SAACnN,GAC/C,IAAIoN,EAAYpN,EAAKnB,MAAM,KAC3B,MAAM,GAAN,OAAUuO,EAAU,GAApB,YAA0BA,EAAU,GAApC,YAA0CA,EAAU,KAOzCC,EAAwB,SAACC,GASpC,GAAKA,EAAOC,UAEL,CAEL,IAAIC,EAAiBF,EAAOG,cACxBH,EAAOG,cAAc5O,MAAM,KAC3ByO,EAAOd,oBAAoB3N,MAAM,KAEjC6O,EAAuBJ,EAAOf,uBAAuB1N,MAAM,KAE/D,OAAK6O,EAAqB,IAAMF,EAAe,GACtC9B,EAAa8B,EAAgBE,GAAwB,EAErDhC,EAAa8B,EAAgBE,GAZtC,OAAO,GAuBLC,EAA0B,uCAAG,WACjCrB,EACAtM,EACAqI,GAHiC,2BAAAnK,EAAA,6DAK7B0P,EAL6B,eAKbtB,GAChBuB,EAAgB,CAClBC,kBAAmBxB,EAAKwB,kBACxBC,mBAAoBV,EAAsBf,IAExC0B,EAAgB,CAClBC,mBAAoB,CAClB,CACEH,kBAAmBxB,EAAKwB,kBACxBvB,uBAlDCM,IAmDDY,cAAezN,IAGnBkO,WAAY5B,EAAK4B,YAlBc,UFpICjP,EEyJc4O,EFxJzCzN,IAASmD,KAAKzC,EAAU,CAAEC,KAAM,qBAAuB9B,IEwJCyF,OAC7D,SAACC,GACC0D,EAAW,CACTnF,MAAM,eAAD,OAAiByB,GACtBiE,IAAK,IACL7H,KAAM,QACN8H,QAAQ,OA3BmB,YAqB7BsF,EArB6B,yCAiCH/C,EAC1B4C,GACAtJ,OAAM,SAACC,GACP0D,EAAW,CACTnF,MAAM,eAAD,OAAiByB,GACtBiE,IAAK,IACL7H,KAAM,QACN8H,QAAQ,OAxCmB,QAiC3BuF,EAjC2B,UA6CzBC,EAAQF,EAAgBlP,KAAKqP,oBAC7BC,EAAQH,EAAgBnP,KAAKuP,qCAEjCZ,EAAQ,uCACHA,GACAI,EAAcC,mBAAmB,IAF9B,IAGNK,oBAAqBD,EACrBG,qCAAsCD,EACtCE,sBAAuBF,EAAQF,KArDJ,iCAyD1BT,GAzD0B,kCFpIA,IAAC3O,IEoID,OAAH,0DAqEnByP,EAAW,uCAAG,WACzBC,EACAC,EACAvG,EACAwG,GAJyB,iBAAA3Q,EAAA,6DAMrB4Q,EAAaH,EAAQI,QACpBF,IACHA,EAAKG,eARkB,SAUF3C,EAAkBuC,EAAYvG,GAV5B,cAUnBuF,EAVmB,SAYvBkB,EAAWG,KAAX,2BAAqBrB,GAArB,IAA+BiB,GAAIA,KAZZ,kBAclBC,GAdkB,2CAAH,4DAuBXI,EAAY,uCAAG,WAC1BC,EACAP,GAF0B,mBAAA1Q,EAAA,6DAItBkR,GAAe,GACfN,EAAaK,EAAaR,QAAQI,SAC3BM,MAAK,SAACtQ,EAAQiF,GACvB,OAAIjF,EAAE8P,KAAOD,EAAWC,KACtBO,EAAcpL,GACP,MATe,SAaLqI,EAAkBuC,EAAYO,EAAa9G,YAbtC,cAatBuF,EAbsB,OAc1BkB,EAAWQ,OAAOF,EAAa,EAAGxB,GAdR,kBAgBnBkB,GAhBmB,2CAAH,wDA0BZS,EAAW,uCAAG,WACzBJ,EACAP,EACA5O,GAHyB,qBAAA9B,EAAA,6DAMrBsR,EAAaL,EAAaM,QAAQV,QAElCW,EAAW1P,GAAc4O,EAAWnB,cARf,SAUJE,EACnBiB,EACAc,EACAP,EAAa9G,YAbU,cAUrBuF,EAVqB,OAerBiB,EAAKD,EAAWC,GAAKD,EAAWC,GAAKG,cACzCQ,EAAWP,KAAX,2BAAqBrB,GAArB,IAA+BiB,GAAIA,KAhBV,kBAkBlBW,GAlBkB,2CAAH,0DA4BXG,GAAa,uCAAG,WAC3BR,EACAP,EACAgB,GAH2B,iBAAA1R,EAAA,sDAKvBsR,EAAaL,EAAaM,QAAQV,QAE7B/K,EAAI,EAPc,YAOXA,EAAI4L,EAAMhR,QAPC,gCAQN2Q,EAAY,2BACxBJ,GADuB,IACTM,QAASD,IAC5BZ,EACAgB,EAAM5L,IAXiB,OAQzBwL,EARyB,cAOOxL,IAPP,+CAcpBwL,GAdoB,4CAAH,0DAwBbK,GAAY,uCAAG,WAC1BV,EACAW,EACAC,GAH0B,iBAAA7R,EAAA,6DAKtBsR,EAAaL,EAAaM,QAAQV,QALZ,SAOLpB,EACnBmC,EACAA,EAAUrC,cACV0B,EAAa9G,YAVW,cAOtBuF,EAPsB,OAY1B4B,EAAWF,OAAOS,EAAO,EAAzB,2BAAiCnC,GAAakC,IAZpB,kBAanBN,GAbmB,2CAAH,0DAyBZQ,GAAe,uCAAG,WAC7Bb,EACAc,GAF6B,uBAAA/R,EAAA,sDAIrByQ,EAAYQ,EAAZR,QACJuB,EAAaf,EAAaM,QAAQV,QAClCoB,EAAwC,GANf,IAAAjS,EAAA,iBAQpB8F,GARoB,eAAA9F,EAAA,6DASvB0R,EAAQQ,GAAczB,EAAQ3K,GAAImL,EAAa3H,WATxB,SAUPmI,GAAc,2BAC3BR,GAD0B,IACZM,QAASU,IAC5BxB,EAAQ3K,GACR4L,GAbyB,OAU3BO,EAV2B,OAetBF,IACHC,EAAaA,EAAWG,QAAO,SAACC,GAC9B,OAAI3B,EAAQ3K,GAAG6K,KAAOyB,EAASzB,OAjBR,0CAQpB7K,EAAI,EARgB,YAQbA,EAAI2K,EAAQ/P,QARC,0CAQpBoF,GARoB,eAQOA,IARP,gDA0BtBkM,EAAWK,OAAO,GAAIJ,IA1BA,4CAAH,wDAoCfK,GAAc,uCAAG,WAAOrB,EAAmBW,GAA1B,2BAAA5R,EAAA,sDACxB2Q,EAAKiB,EAAUjB,GACfW,EAAaL,EAAaM,QAAQV,QAElC0B,EAAWL,GAAcN,EAAWX,EAAa3H,WAEjDkJ,EAA8B,GAE9BR,EAAaV,EAAWa,QAAO,SAACtR,EAAQgR,GAC1C,OAAIhR,EAAE8P,KAAOA,IACX6B,EAAgBzB,KAAK,CAAExB,cAAe1O,EAAE0O,cAAesC,MAAOA,KACvD,MAMPnC,EAAW,GACN5J,EAAI,EAlBe,YAkBZA,EAAIyM,EAAS7R,QAlBD,6BAmB1BgP,EAnB0B,UAoBlBD,EACJmC,EACAW,EAASzM,GACTmL,EAAa9G,YAvBS,yBAmBjB4G,KAnBiB,wBAkBSjL,IAlBT,2BA4BxBkM,EAAWtR,OA5Ba,0CA6BnBsR,EAAWK,OAAO3C,IA7BC,iCA+BnBA,GA/BmB,4CAAH,wDAqEdwC,GAAgB,SAC3BxD,EACApF,GAEA,IAAMgF,EAAgDI,EAAhDJ,oBAAqBD,EAA2BK,EAA3BL,uBAEvBoE,EAAgBnE,EAAoB3N,MAAM,KAC1C+R,EAAW7E,EACb4E,EAAc,GACdA,EAAc,GACdA,EAAc,IAGZE,EAAiBtE,EAAuB1N,MAAM,KAC9CiS,EAAqB,IAAIrP,KAAKoL,KAK9BkE,EAAgBrF,EAAaiF,EAAeE,GAAkB,EAW9DG,EARqB,WACvB,IAAIhF,EAAQ7I,SAASwN,EAAc,IAKnC,OAJIxN,SAASwN,EAAc,KAAOnJ,IAChCuJ,GAAiB,EACjB/E,GAAS,GAEJD,EAAW4E,EAAc,GAAI3E,EAAOxE,GAExByJ,GACjBD,GAAkBJ,IACpBI,EAAeE,YAAYF,EAAeG,cAAgB,GAC1DJ,GAAiB,GAInB,IAQIK,EARoB,WACtB,IAAIpF,EAAQ7I,SAAS0N,EAAe,IAKpC,OAJI1N,SAAS0N,EAAe,IAAMrJ,IAChCuJ,GAAiB,EACjB/E,GAAS,GAEJD,EAAW8E,EAAe,GAAI7E,EAAOxE,GAE1B6J,GAOpB,GANID,EAAgBN,IAClBM,EAAcF,YAAYE,EAAcD,cAAgB,GACxDJ,GAAiB,GAIfC,EAAiBI,EACnB,MAAO,GAET,GAAIJ,EAAetE,YAAc0E,EAAc1E,UAC7C,MAAO,CAACsE,EAAevO,cAAc5D,MAAM,KAAK,IAMlD,IADA,IAAIyS,EAAY,GACPtN,EAAI,EAAGA,EAAI+M,EAAe/M,IAAK,CACtC,IAAIuN,EAAgB,IAAI9P,KAAKuP,GACzBQ,EAAe,IAAI/P,KACrB8P,EAAcL,YAAYF,EAAeG,cAAgBnN,IAE3DsN,EAAUrC,KACRlD,EACEyF,EAAaC,cACbD,EAAaL,cAAgB,EAC7B3J,GAEC/E,cACA5D,MAAM,KAAK,IAIlB,OAAOyS,GChgBII,GAAiB,SAACrL,GAC7B,IAAQsL,EAA0BtL,EAA1BsL,QAASxC,EAAiB9I,EAAjB8I,aAETR,EAAoDQ,EAApDR,QAASc,EAA2CN,EAA3CM,QAASmC,EAAkCzC,EAAlCyC,SAAUC,EAAwB1C,EAAxB0C,SAAUrK,EAAc2H,EAAd3H,UAEnBsK,EACzBD,EADME,kBAAkDC,EACxDH,EAD8CI,SAIpCC,EAGRN,EAHFK,SACeE,EAEbP,EAFFQ,cACiBC,EACfT,EADFU,gBAGMjK,EAAeC,qBAAWC,KAA1BF,WAKFkK,EAAmB,SAACC,GACxB,IAAIC,GAAa,IAAIhR,MAAOgB,cAAc5D,MAAM,KAC5CiH,EAAQ,6BAAyB2M,EAAW,IAE5CC,EAASF,EAAa,IAAM,KAE5BG,EAAS,4BAAwBD,EAAxB,mCAAyDA,EAAzD,yBAAgFA,EAAhF,2BAAyGA,EAAzG,gBAAuHA,EAAvH,UACb/D,EAAQ7P,SAAQ,SAACC,GACf,IAAI6T,EAAI,GACRA,GAAQ7T,EAAEmP,WACV0E,GAAI,UAAOF,GACXE,GAAQ7T,EAAEyN,oBACVoG,GAAI,UAAOF,GACXE,GAAQC,WAAWxH,EAAetM,EAAE+O,oBACpC8E,GAAI,UAAOF,GACXE,GAAQ7T,EAAEwN,uBACVqG,GAAI,UAAOF,GACXE,GAAQvH,EAAetM,EAAE6N,eACzBgG,GAAI,UAAOF,GACXE,GAAQ7T,EAAEqE,KAEVuP,GADAC,GAAI,QAIN,IAAIE,EAAW,gBAAYJ,GAC3BI,GAAW,WAAQJ,GACnBI,GAAezH,EAAeyG,GAAf,UAAyCY,GACxDI,GAAW,WAAQJ,GACnBI,GAAezH,EAAe2G,GAAf,UAAgCU,GAC/CI,GAAW,WAAQJ,GAEnBC,GADAG,GAAW,KAGX,IAAIC,EAAe,KACnB,GAAItD,EAAQ7Q,OAAQ,CAClBmU,GAAY,4BAAyBL,EAAzB,qBAA4CA,EAA5C,yBAAmEA,EAAnE,uBAAwFA,EAAxF,gCAAsHA,EAAtH,iCAAqJA,EAArJ,qBAAwKA,EAAxK,sBACZ,IAAIE,EAAO,GACXnD,EAAQ3Q,SAAQ,SAACC,GACf6T,GAAQ7T,EAAEmP,WACV0E,GAAI,UAAOF,GACXE,GAAQpL,EACRoL,GAAI,UAAOF,GACXE,GAAQ7T,EAAE0O,cACVmF,GAAI,UAAOF,GACXE,GAAQ7T,EAAE+O,kBACV8E,GAAI,UAAOF,GACXE,GAAQvH,EAAetM,EAAEuP,qBACzBsE,GAAI,UAAOF,GACXE,GAAQvH,EAAetM,EAAEyP,sCACzBoE,GAAI,UAAOF,GACXE,GAAQ7T,EAAEwN,uBACVqG,GAAI,UAAOF,GACX,IAAIM,EACFjU,EAAEuP,oBAAsBvP,EAAEyP,qCAC5BoE,GAAQvH,EAAe2H,GACvBJ,GAAI,QAENG,GAAgBH,EAChBG,GAAY,gBAAaL,GAAb,OAAsBA,GAAtB,OAA+BA,GAA/B,OAAwCA,GAAxC,OAAiDrH,EAC3D6G,IADU,OAERQ,GAFQ,OAECrH,EACX8G,IAHU,OAIRO,GAJQ,OAICA,GAJD,OAIUrH,EAAegH,GAJzB,MAOd,IAAIY,EAAmB,KACvBA,GAAmB,8CAA2CP,GAC9DO,GAAuB5H,EAAe2G,GACtCiB,GAAmB,KACnBA,GAAmB,2CAAwCP,GAC3DO,GAAuB5H,EAAe6G,GACtCe,GAAmB,KACnBA,GAAmB,2CAAwCP,GAC3DO,GAAuB5H,EAAe8G,GACtCc,GAAmB,KACnBA,GAAmB,+BAA4BP,GAC/CO,GACEJ,WAAWxH,EAAe2G,IAC1Ba,WAAWxH,EAAegH,IAC5B,IAAIa,EAAa,GACjBA,GAAiBP,EACjBO,GAAiBH,EACjBG,GAAiBD,EACbT,EACFxT,EAAUkU,EAAepN,IAEzBnG,EAAUuT,GACV7K,EAAW,CACTnF,MAAO,sBACPnC,KAAM,UACN6H,IAAK,IACLC,QAAQ,MAKd,OACE,sBAAKtD,UAAU,aAAf,UACE,cAAC,IAAD,CACEE,MAAM,YACN1E,KAAK,YACL2E,QAAS,kBAAMiM,OAEjB,cAAC,IAAD,CACElM,MAAM,aACNC,QAAS,kBAAM6M,GAAiB,IAChCtM,YAAY0I,EAAQ/P,SAAU6Q,EAAQ7Q,SAExC,cAAC,IAAD,CACE6G,MAAM,SACNC,QAAS,kBAAM6M,GAAiB,IAChCtM,YAAY0I,EAAQ/P,SAAU6Q,EAAQ7Q,aCrIxCuU,GAAkB3Q,YACtB,kBACA,GACA,uBACA,SACA,CACEE,WAAY,CACVC,IAAYC,SACZD,IAAY6D,SAAS,GACrB7D,IAAY8D,SAAS,KACrB9D,IAAY+D,QACV,IAAIC,OAAO,6CACX,eAGJC,cAAe,CACbhE,SAAU,yBACVwQ,WAAY,yDACZ5M,SAAU,kBACVC,SAAU,uBAKV4M,GAAkB7Q,YACtB,kBACA,GACA,mBACA,OACA,CACEE,WAAY,CAACC,IAAYC,UACzBgE,cAAe,CACbhE,SAAU,0BAEZqD,YAAY,IAGVqN,GAAgB9Q,YACpB,gBACA,GACA,qBACA,SACA,CACEE,WAAY,CACVC,IAAYC,SACZD,IAAY6D,SAAS,GACrB7D,IAAY+D,QACV,IAAIC,OAAO,qCACX,aAGJC,cAAe,CACbhE,SAAU,yBACV4D,SAAU,kBACV+M,SAAU,kDAKV9F,GAAgBjL,YAAQ,gBAAiB,GAAI,iBAAkB,OAAQ,CAC3EE,WAAY,CAACC,IAAYC,UACzBgE,cAAe,CACbhE,SAAU,4BAYC4Q,GARA,IAAIjR,IAAK,SAAU,CAChC4Q,GACAG,GACAD,GAEA5F,KCpEWgG,GAAW,SAACpN,GACvB,IAAQqN,EAA8BrN,EAA9BqN,YAAaC,EAAiBtN,EAAjBsN,aACrB,EAAerR,YAAQkR,IAAhB3Q,EAAP,oBAEAgC,qBAAU,WACRhC,EAAK+Q,UACJ,CAACD,IAKJ9O,qBAAU,WACR,IAAIgP,EAAUhR,EAAKiR,SAAS,iBAExBD,IACFhR,EAAKG,SAASqQ,gBAAgBQ,QAAUA,EACxChR,EAAKwG,SAAS,kBAAmBwD,KACjChK,EAAKkR,cAAc,mBAAmB,MAEvC,CAAClR,EAAK2F,OAAOiF,gBAsBhB,OACE,eAAC,IAAD,CAAa5K,KAAMA,EAAnB,UACE,sBAAK0C,UAAU,oBAAf,UACE,cAAC,IAAD,CAASY,QAAStD,EAAKG,SAASyK,gBAChC,cAAC,IAAD,CAAStH,QAAStD,EAAKG,SAASmQ,kBAChC,cAAC,IAAD,CAAShN,QAAStD,EAAKG,SAASsQ,mBAGlC,cAAC,IAAD,CAAiB7N,MAAM,MAAMC,QAAS,kBAxBxB,WAChB,GAAI7C,EAAKE,WAAY,CACnB,IAAI9D,EAAO,CACT6O,kBAAmBjL,EAAKiR,SAAS,iBACjCvH,uBAAwB1J,EAAKiR,SAAS,mBACtCrG,cAAe5K,EAAKiR,SAAS,iBAC7B5F,WAAYrL,EAAKiR,SAAS,oBAG5BJ,EAAYzU,GAEZ4D,EAAKmR,aAAanR,EAAKG,SAASsQ,eAChCzQ,EAAKmR,aAAanR,EAAKG,SAASqQ,kBAYYY,UCtDnC,OAA0B,6CCA1B,OAA0B,4CC4B5BC,I,OAA2B,SAAC7N,GACvC,IAAQtH,EAA+BsH,EAA/BtH,EAAGgR,EAA4B1J,EAA5B0J,MAAOoE,EAAqB9N,EAArB8N,SAAUC,EAAW/N,EAAX+N,OAC5B,EAAgC5S,oBAAS,GAAzC,mBAAO6S,EAAP,KAAiBC,EAAjB,KACA,EAAkC9S,oBAAS,GAA3C,mBAAkB+S,GAAlB,WAIMpB,EAAkB3Q,YACtB,kBACAzD,EAAEmP,WACF,uBACA,SACA,CACExL,WAAY,CACVC,IAAYC,SACZD,IAAY6D,SAAS,GACrB7D,IAAY8D,SAAS,KACrB9D,IAAY+D,QACV,IAAIC,OAAO,6CACX,eAGJC,cAAe,CACbhE,SAAU,yBACVwQ,WAAY,yDACZ5M,SAAU,kBACVC,SAAU,uBASVgH,EAAgBjL,YACpB,gBACAzD,EAAE0O,cACF,iBACA,OACA,CACE/K,WAAY,CAACC,IAAYC,UACzBgE,cAAe,CACbhE,SAAU,4BAQVyQ,EAAkB7Q,YACtB,kBACAzD,EAAEwN,uBACF,mBACA,OACA,CACEsH,QAAS9U,EAAE0O,cACX/K,WAAY,CAACC,IAAYC,UACzBgE,cAAe,CACbhE,SAAU,yBACV4D,SAAU,mDAQV8M,EAAgB9Q,YACpB,gBACAzD,EAAE+O,kBACF,eACA,SACA,CACEpL,WAAY,CACVC,IAAYC,SACZD,IAAY6D,SAAS,GACrB7D,IAAY+D,QACV,IAAIC,OAAO,qCACX,aAGJC,cAAe,CACbhE,SAAU,yBACV4D,SAAU,kBACV+M,SAAU,kDAQhB,EAAejR,YACb,IAAIC,IACF,+BAAiCwN,EACjC,CAACoD,EAAiB1F,EAAe4F,EAAiBC,GAClD,KAJGzQ,EAAP,oBAWAgC,qBAAU,WACR,IAAIgP,EAAUhR,EAAKiR,SAAS,iBACxBU,EAAS,IAAI/S,KAAKoB,EAAKiR,SAAS,oBAEhCD,IACFhR,EAAKG,SAASqQ,gBAAgBQ,QAAUA,EACxChR,EAAKG,SAASqQ,gBAAgBoB,QAAU5H,IACxChK,EAAKkR,cAAc,mBAAmB,IAGtCQ,EADEV,EAAUW,KAKb,CAAC3R,EAAK2F,OAAOiF,cAAe5K,EAAK2F,OAAO6K,kBAgL3C,OACE,eAAC,IAAD,CAAU9N,WARLwK,EAAQ,GAAK,IAAM,EACf,UAEA,GAKT,UACE,cAAC,IAAD,UAhGGsE,EAID,cAAC,WAAD,UACE,cAAC,IAAD,CAAaxR,KAAMA,EAAnB,SACE,cAAC,IAAD,CACEsD,QAAStD,EAAKG,SAASmQ,gBACvB,cAAY,0CAPb,+BAAOpU,EAAEmP,eAgGhB,cAAC,IAAD,UA5EGmG,EAQD,cAAC,WAAD,UACE,cAAC,IAAD,CAAaxR,KAAMA,EAAnB,SACE,cAAC,IAAD,CACEsD,QAAStD,EAAKG,SAASyK,cACvB,cAAY,iCAVlB,+BACG,IAAIhM,KAAK1B,EAAchB,EAAE0O,gBAAgB/L,yBA0E9C,cAAC,IAAD,UArDG2S,EAID,cAAC,WAAD,UACE,cAAC,IAAD,CAAaxR,KAAMA,EAAnB,SACE,cAAC,IAAD,CACEsD,QAAStD,EAAKG,SAASsQ,cACvB,cAAY,8BAPb,qCAAQjI,EAAetM,EAAE+O,wBAqDhC,eAAC,IAAD,eAAazC,EAAetM,EAAEuP,wBAC9B,eAAC,IAAD,eACIjD,EAAetM,EAAEyP,yCAErB,cAAC,IAAD,UApCA,+BACIzP,EAAE8P,GAIA1B,EAAiCN,KAHjC,IAAIpL,KACF1B,EAAchB,EAAEwN,yBAChB7K,yBAiCR,eAAC,IAAD,eAvBK2J,EACLtM,EAAEuP,oBAAsBvP,EAAEyP,yCAuB1B,cAAC,IAAD,UA3IE6F,EAEA,gCACE,sBACE3O,QAAS,kBAxCE,WACnB,GAAI7C,EAAKE,WAIP,GAHc,IAAItB,KAAKoB,EAAKiR,SAAS,kBACxB,IAAIrS,KAAKoB,EAAKiR,SAAS,oBAGlCS,GAAa,OACR,CACLA,GAAa,GAEb,IAAIG,EAAU,CACZxG,WAAYrL,EAAKG,SAASmQ,gBAAgBjQ,MAC1CuK,cAAe5K,EAAKG,SAASyK,cAAcvK,MAC3C4K,kBAAmBjL,EAAKG,SAASsQ,cAAcpQ,MAC/CqJ,uBAAwB1J,EAAKG,SAASqQ,gBAAgBnQ,MACtD2L,GAAI9P,EAAE8P,IAERuF,EAAOM,EAAS3E,GAChBuE,GAAY,IAsBOK,IACf,cAAY,qBACZpP,UAAU,YAHZ,SAKE,qBAAKqP,IAAKC,GAAWC,IAAI,mBAE3B,wCACA,sBAAMpP,QAAS,kBArBrB7C,EAAK+Q,QACLW,GAAa,QACbD,GAAY,IAmB6B/O,UAAU,YAA7C,SACE,qBAAKqP,IAAKG,GAAMD,IAAI,qBAMxB,sBACEpP,QAAS,WA7Df4O,GAAY,IA8DN,cAAY,2BACZ/O,UAAU,YAHZ,oBA0HF,cAAC,IAAD,UACE,qBAAKA,UAAU,kBAAf,SACE,sBACEG,QAAS,WACPyO,EAASpE,IAFb,6BClUGiF,GAAwB,SAAC3O,GACpC,IAAQ4O,EAAwC5O,EAAxC4O,kBAAmBb,EAAqB/N,EAArB+N,OAAQD,EAAa9N,EAAb8N,SACnC,EAA4B3S,mBAAS,CACnCyQ,SAAU,EACVG,cAAe,EACfE,gBAAiB,IAHnB,mBAAO4C,EAAP,KAAeC,EAAf,KA8BA,OArBAtQ,qBAAU,WACR,IAAIuQ,EAAYH,EAAkBI,QAChC,SAACC,EAAUC,GAOT,OANIA,EAAEhJ,wBAA0BgJ,EAAE9H,gBAChC6H,EAAIrD,UAAYsD,EAAEjH,oBAClBgH,EAAIlD,eAAiBmD,EAAE/G,qCACvB8G,EAAIhD,iBACFiD,EAAEjH,oBAAsBiH,EAAE/G,sCAEvB8G,IAET,CACErD,SAAU,EACVG,cAAe,EACfE,gBAAiB,IAIrB6C,EAAUC,KACT,CAACH,IAEAA,EAAkBrW,OAElB,eAAC,IAAD,WACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,mCACA,cAAC,IAAD,6BACA,cAAC,IAAD,2BACA,cAAC,IAAD,oCACA,cAAC,IAAD,qCACA,cAAC,IAAD,yBACA,cAAC,IAAD,+BACA,cAAC,IAAD,mBACA,cAAC,IAAD,wBAGJ,eAAC,IAAD,CAAW0H,MAAM,SAAjB,UACG2O,EAAkBnK,KACjB,SAAC/L,EAAQiF,GAIP,OACE,cAAC,GAAD,CACEjF,EAAGA,EACHqV,OAAQA,EACRD,SAAUA,EACVpE,MAAO/L,GAJT,mCAKmCjF,EAAE0O,eALrC,OAKqD1O,EAAEwN,wBALvD,OAKgFxN,EAAEuU,mBAMxF,eAAC,IAAD,WACE,cAAC,IAAD,UACE,yCAEF,cAAC,IAAD,mBACA,cAAC,IAAD,mBACA,cAAC,IAAD,UACE,kCAAKjI,EAAe6J,EAAOjD,eAE7B,cAAC,IAAD,UACE,kCAAK5G,EAAe6J,EAAO9C,oBAE7B,cAAC,IAAD,mBACA,cAAC,IAAD,UACE,kCAAK/G,EAAe6J,EAAO5C,sBAE7B,cAAC,IAAD,mBACA,cAAC,IAAD,4BAKI,yBCrGVa,GAAkB3Q,YACtB,kBACA,GACA,uBACA,SACA,CACEE,WAAY,CACVC,IAAYC,SACZD,IAAY6D,SAAS,GACrB7D,IAAY8D,SAAS,KACrB9D,IAAY+D,QACV,IAAIC,OAAO,6CACX,eAGJC,cAAe,CACbhE,SAAU,yBACVwQ,WAAY,yDACZ5M,SAAU,kBACVC,SAAU,uBAmBV+O,IAdYhT,YAAQ,YAAa,GAAI,aAAc,SAAU,CACjEE,WAAY,CACVC,IAAYC,SACZD,IAAY6D,SAAS,GACrB7D,IAAY8D,SAAS,IACrB9D,IAAY+D,QAAQ,IAAIC,OAAO,cAAe,gBAEhDC,cAAe,CACbhE,SAAU,yBACV4D,SAAU,kBACVC,SAAU,mBACVI,YAAa,wCAGarE,YAC5B,wBACA,GACA,2BACA,OACA,CACEE,WAAY,CAACC,IAAYC,UACzBgE,cAAe,CACbhE,SAAU,6BAIV0Q,GAAgB9Q,YACpB,gBACA,GACA,qBACA,SACA,CACEE,WAAY,CACVC,IAAYC,SACZD,IAAY6D,SAAS,GACrB7D,IAAY+D,QACV,IAAIC,OAAO,qCACX,aAGJC,cAAe,CACbhE,SAAU,yBACV4D,SAAU,kBACV+M,SAAU,kDAIVF,GAAkB7Q,YACtB,kBACA,GACA,mBACA,OACA,CACEyD,YAAY,EACZvD,WAAY,CAACC,IAAYC,UACzBgE,cAAe,CACbhE,SAAU,4BAWD6S,GANO,IAAIlT,IACxB,SACA,CAAC4Q,GAAiBqC,GAAuBlC,GAAeD,IACxD,IC/EWqC,GAAW,SAACrP,GACvB,IAAQsP,EAA8BtP,EAA9BsP,YAAahC,EAAiBtN,EAAjBsN,aACrB,EAAerR,YAAQmT,IAAhB5S,EAAP,oBACA,EAAkCrB,oBAAS,GAA3C,mBAAOoU,EAAP,KAAkBrB,EAAlB,KAGA1P,qBAAU,WACRhC,EAAK+Q,QACL/Q,EAAKkR,cAAc,mBAAmB,KACrC,CAACJ,IAKJ9O,qBAAU,WACR,IAAIgP,EAAUhR,EAAKiR,SAAS,yBACxBU,EAAS,IAAI/S,KAAKoB,EAAKiR,SAAS,oBAChCD,IACFhR,EAAKG,SAASqQ,gBAAgBQ,QAAUA,EACxChR,EAAKG,SAASqQ,gBAAgBoB,QAAU5H,IACxChK,EAAKkR,cAAc,mBAAmB,IAItCQ,EADEV,EAAUW,KAKb,CAAC3R,EAAK2F,OAAOgN,sBAAuB3S,EAAK2F,OAAO6K,kBAiCnD,OACE,eAAC,WAAD,WACE,cAAC,IAAD,CAAaxQ,KAAMA,EAAnB,SACE,sBAAK0C,UAAU,oBAAf,UACE,cAAC,IAAD,CAASY,QAAStD,EAAKG,SAASmQ,kBAChC,cAAC,IAAD,CAAShN,QAAStD,EAAKG,SAASwS,wBAChC,cAAC,IAAD,CAASrP,QAAStD,EAAKG,SAASsQ,gBAChC,cAAC,IAAD,CAASnN,QAAStD,EAAKG,SAASqQ,uBAGnCuC,EACC,qBAAK5K,MAAO,CAAE6K,aAAc,QAA5B,SACE,sBAAM7K,MAAO,CAAE8K,MAAO,OAAtB,+EAKF,GAGF,cAAC,IAAD,CAAiBrQ,MAAM,MAAMC,QAAS,kBA/CxB,WAChB,GAAI7C,EAAKE,WAIP,GAHc,IAAItB,KAAKoB,EAAKiR,SAAS,0BACxB,IAAIrS,KAAKoB,EAAKiR,SAAS,oBAGlCS,GAAa,OACR,CACLA,GAAa,GAEb,IAAItV,EAAO,CACT6O,kBAAmBjL,EAAKiR,SAAS,iBACjCvH,uBAAwB1J,EAAKiR,SAAS,mBACtCtH,oBAAqB3J,EAAKiR,SAAS,yBACnC5F,WAAYrL,EAAKiR,SAAS,oBAG5B6B,EAAY1W,GAEZ4D,EAAKmR,aAAanR,EAAKG,SAASwS,uBAChC3S,EAAKmR,aAAanR,EAAKG,SAASsQ,eAChCzQ,EAAKmR,aAAanR,EAAKG,SAASqQ,iBAChCxQ,EAAKkR,cAAc,mBAAmB,IAyBIE,UCvErC8B,I,aAAwB,SAAC1P,GACpC,IAAQtH,EAA+BsH,EAA/BtH,EAAGqV,EAA4B/N,EAA5B+N,OAAQD,EAAoB9N,EAApB8N,SAAUpE,EAAU1J,EAAV0J,MAC7B,EAAgCvO,oBAAS,GAAzC,mBAAO6S,EAAP,KAAiBC,EAAjB,KAIMnB,EAAkB3Q,YACtB,kBACAzD,EAAEmP,WACF,uBACA,SACA,CACExL,WAAY,CACVC,IAAYC,SACZD,IAAY6D,SAAS,GACrB7D,IAAY8D,SAAS,KACrB9D,IAAY+D,QACV,IAAIC,OAAO,6CACX,eAGJC,cAAe,CACbhE,SAAU,yBACVwQ,WAAY,yDACZ5M,SAAU,kBACVC,SAAU,uBAQVe,EAAYhF,YAChB,WACAzD,EAAEyN,oBACF,2BACA,OACA,CACE9J,WAAY,CAACC,IAAYC,UACzBgE,cAAe,CACbhE,SAAU,4BAOVyQ,EAAkB7Q,YACtB,kBACAzD,EAAEwN,uBACF,mBACA,OACA,CACE7J,WAAY,CAACC,IAAYC,UACzBgE,cAAe,CACbhE,SAAU,4BAQVoT,EAAcxT,YAClB,gBACAzD,EAAE+O,kBACF,qBACA,SACA,CACEpL,WAAY,CACVC,IAAYC,SACZD,IAAY6D,SAAS,GACrB7D,IAAY+D,QACV,IAAIC,OAAO,qCACX,aAGJC,cAAe,CACbhE,SAAU,yBACV4D,SAAU,kBACV+M,SAAU,kDAQhB,EAAejR,YACb,IAAIC,IACF,+BAAiCwN,EACjC,CAACoD,EAAiB3L,EAAWwO,EAAa3C,GAC1C,KAJGxQ,EAAP,oBAYM9C,EAAgB,SAACC,GAErB,OAAOA,EAAKE,QADE,KACa,MA2I7B2E,qBAAU,WACR,IAAIgP,EAAUhR,EAAKiR,SAAS,YAExBD,IACFhR,EAAKG,SAASqQ,gBAAgBQ,QAAUA,EAExChR,EAAKkR,cAAc,mBAAmB,MAEvC,CAAClR,EAAK2F,OAAOoI,WAUhB,OACE,eAAC,IAAD,CAAUrL,WARLwK,EAAQ,GAAK,IAAM,EACf,UAEA,GAKT,UACE,cAAC,IAAD,WA3Fe,IAAbsE,EACK,sBAAM,cAAY,gBAAlB,SAAmCtV,EAAEmP,aAG1C,cAAC,WAAD,UACE,cAAC,IAAD,CAAarL,KAAMA,EAAnB,SACE,cAAC,IAAD,CAASsD,QAAStD,EAAKG,SAASmQ,wBAsFtC,cAAC,IAAD,WA5Ee,IAAbkB,EAEA,+BACG,IAAI5S,KAAK1B,EAAchB,EAAEyN,sBAAsB9K,uBAKlD,cAAC,WAAD,UACE,cAAC,IAAD,CAAamB,KAAMA,EAAnB,SACE,cAAC,IAAD,CAASsD,QAAStD,EAAKG,SAAS4N,iBAmEtC,cAAC,IAAD,WAzDe,IAAbyD,EACK,qCAAQhJ,EAAetM,EAAE+O,sBAG9B,cAAC,WAAD,UACE,cAAC,IAAD,CAAajL,KAAMA,EAAnB,SACE,cAAC,IAAD,CAASsD,QAAStD,EAAKG,SAASsQ,sBAoDtC,cAAC,IAAD,WA1Ce,IAAbe,EAEA,+BACG,IAAI5S,KACH1B,EAAchB,EAAEwN,yBAChB7K,uBAKJ,cAAC,WAAD,UACE,cAAC,IAAD,CAAamB,KAAMA,EAAnB,SACE,cAAC,IAAD,CAASsD,QAAStD,EAAKG,SAASqQ,wBA+BtC,eAAC,IAAD,eAAahI,EAAetM,EAAE6N,kBAC9B,cAAC,IAAD,UAAY7N,EAAEqE,OACd,cAAC,IAAD,mBACA,cAAC,IAAD,UACE,qBAAKmC,UAAU,6BAAf,UAnIa,IAAb8O,EAEA,gCACE,sBACE3O,QAAS,kBA7BE,WACnB,IAAIgP,EAAU,CACZxG,WAAYrL,EAAKG,SAASmQ,gBAAgBjQ,MAC1CsJ,oBAAqB3J,EAAKG,SAAS4N,SAAS1N,MAC5CsE,UAAWzI,EAAEyI,UACbsG,kBAAmBjL,EAAKG,SAASsQ,cAAcpQ,MAC/CqJ,uBAAwB1J,EAAKG,SAASqQ,gBAAgBnQ,MACtD2L,GAAI9P,EAAE8P,IAERuF,EAAOM,EAAS3E,GAChBuE,GAAY,GACZzR,EAAK+Q,QAkBkBe,IACf,cAAY,iBACZpP,UAAU,YAHZ,SAKE,qBAAKqP,IAAKC,GAAWC,IAAI,mBAE3B,wCACA,sBAAMpP,QAAS,kBAnBrB7C,EAAK+Q,aACLU,GAAY,IAkB6B/O,UAAU,YAA7C,SACE,qBAAKqP,IAAKG,GAAMD,IAAI,qBAMxB,sBACEpP,QAAS,WAjDf4O,GAAY,IAkDN,cAAY,yBACZ/O,UAAU,YAHZ,sBAmHF,cAAC,IAAD,UACE,sBACEG,QAAS,kBAAMyO,EAASpV,IACxBwG,UAAU,+BAFZ,2BClRK0Q,GAAqB,SAAC5P,GACjC,IAAQ6P,EAAqC7P,EAArC6P,eAAgB9B,EAAqB/N,EAArB+N,OAAQD,EAAa9N,EAAb8N,SAChC,EAA4B3S,mBAAS,CAAEuQ,kBAAmB,EAAGE,SAAU,IAAvE,mBAAOiD,EAAP,KAAeC,EAAf,KAqBA,OAhBAtQ,qBAAU,WACR,IAAIuQ,EAAYc,EAAeb,QAC7B,SAACC,EAAKC,GAGJ,OAFAD,EAAIvD,mBAAqBwD,EAAEzH,kBAC3BwH,EAAIrD,UAAYsD,EAAE3I,cACX0I,IAET,CACEvD,kBAAmB,EACnBE,SAAU,IAIdkD,EAAUC,KACT,CAACc,IAGF,qBAAK3Q,UAAU,sBAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,mCACA,cAAC,IAAD,uCACA,cAAC,IAAD,6BACA,cAAC,IAAD,+BACA,cAAC,IAAD,oBACA,cAAC,IAAD,mBACA,cAAC,IAAD,mBACA,cAAC,IAAD,mBACA,cAAC,IAAD,wBAGJ,eAAC,IAAD,CAAWe,MAAM,SAAjB,UACG4P,EAAepL,KAAI,SAAC/L,EAAGiF,GACtB,OACE,cAAC,GAAD,CACEjF,EAAGA,EACHqV,OAAQA,EACRD,SAAUA,EACVpE,MAAO/L,GAJT,gCAKgCjF,EAAEyN,qBALlC,OAKwDzN,EAAEwN,wBAL1D,OAKmFxN,EAAE+O,uBAIzF,eAAC,IAAD,WACE,cAAC,IAAD,UACE,yCAEF,cAAC,IAAD,mBACA,cAAC,IAAD,UACE,kCAAKzC,EAAe6J,EAAOnD,wBAE7B,cAAC,IAAD,mBACA,cAAC,IAAD,UACE,kCAAK1G,EAAe6J,EAAOjD,eAE7B,cAAC,IAAD,mBACA,cAAC,IAAD,mBACA,cAAC,IAAD,mBACA,cAAC,IAAD,+BChBGkE,I,OAjEgB,SAAC9P,GAI9B,IAAQ8I,EAAiB9I,EAAjB8I,aACR,EAAgC3N,mBAAS,GAAzC,mBAAO4U,EAAP,KAAiBC,EAAjB,KAUA,OARAxR,qBAAU,WACR,IAAImO,EACF7D,EAAa0C,SAASI,SACtB9C,EAAayC,SAASQ,cACtBjD,EAAayC,SAASK,SACxBoE,EAAYrD,KACX,CAAC7D,IAGF,qBAAK5J,UAAU,uBAAf,SACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,eAAC,IAAD,WACE,cAAC,IAAD,UACE,wEAEF,cAAC,IAAD,UACE,sBAAK,cAAY,UAAjB,cACI8F,EAAe8D,EAAa0C,SAASI,kBAI7C,eAAC,IAAD,WACE,cAAC,IAAD,UACE,qEAEF,cAAC,IAAD,UACE,sBAAK,cAAY,YAAjB,cACI5G,EAAe8D,EAAayC,SAASK,kBAI7C,eAAC,IAAD,WACE,cAAC,IAAD,UACE,qEAEF,cAAC,IAAD,UACE,sBAAK,cAAY,aAAjB,cACI5G,EAAe8D,EAAayC,SAASQ,uBAI7C,eAAC,IAAD,WACE,cAAC,IAAD,UACE,yDAEF,cAAC,IAAD,UACE,iCACE,sBAAK,cAAY,QAAjB,cAA2B/G,EAAe+K,GAA1C,uBClBHE,GAAoB,SAACjQ,GAAgB,IAAD,IAK3CkQ,EAA0B,CAC5B5H,QAAS,GACTc,QAAS,GACToC,SAAU,CAAEI,SAAU,EAAGF,kBAAmB,GAC5CH,SAAU,CAAEK,SAAU,EAAGG,cAAe,EAAGE,gBAAiB,GAC5D9K,WAAW,EACXa,WATqBC,qBAAWC,KAA1BF,YAaR,EAAwDmO,qBACtDC,GACAF,GAFF,mBAAOG,EAAP,KAAqBC,EAArB,KAMA,EAAwCnV,oBAAS,GAAjD,mBAAOmS,EAAP,KAAqBiD,EAArB,KAEMC,EAActV,iBAAyB,MAGvCuV,EAAmBtU,YACvB,iBACA,GACA,aACA,SACA,CACEE,WAAY,CAACC,IAAY6D,SAAS,GAAI7D,IAAY8D,SAAS,KAC3DG,cAAe,CACbJ,SAAU,kBACVC,SAAU,sBAMhB,EAAgBnE,YACd,IAAIC,IAAK,qBAAsB,CAACuU,GAAmB,KAD9CC,EAAP,oBASMC,EAAQ,uCAAG,WAAOC,GAAP,iBAAA/Y,EAAA,yDACXiR,EAAe+H,KAAKC,MAAMD,KAAKE,UAAUV,MACzC,UAAAG,EAAYvR,eAAZ,eAAqB+R,WAAWlI,EAAa3H,UAFlC,gCAGQ8P,GAAWnI,EAAc8H,GAHjC,OAGb9H,EAHa,8CAKQoI,GAAUpI,EAAc8H,GALhC,OAKb9H,EALa,eAOfwH,EAAS,CAAE5V,KAAM,SAAUyW,QAASrI,IAPrB,4CAAH,sDAeRsI,EAAS,uCAAG,WAAOC,GAAP,iBAAAxZ,EAAA,yDACZiR,EAAe+H,KAAKC,MAAMD,KAAKE,UAAUV,MACzC,UAAAG,EAAYvR,eAAZ,eAAqB+R,WAAWlI,EAAa3H,UAFjC,gCAGOmQ,GAAYxI,EAAcuI,GAHjC,OAGdvI,EAHc,8CAKOyI,GAAWzI,EAAcuI,GALhC,OAKdvI,EALc,eAOhBwH,EAAS,CAAE5V,KAAM,SAAUyW,QAASrI,IAPpB,4CAAH,sDA6BT0I,EAAQ,uCAAG,WAAOZ,GAAP,eAAA/Y,EAAA,6DACXiR,EAAe+H,KAAKC,MAAMD,KAAKE,UAAUV,IAC7CO,EAAY1J,WAAY,EAFT,SAGMuK,GAAM3I,EAAc8H,GAH1B,OAGf9H,EAHe,OAIfwH,EAAS,CAAE5V,KAAM,SAAUyW,QAASrI,IAJrB,2CAAH,sDAeR4I,EAAS,uCAAG,WAAOL,EAAmB3H,GAA1B,eAAA7R,EAAA,6DACZiR,EAAe+H,KAAKC,MAAMD,KAAKE,UAAUV,IAC7CgB,EAAanK,WAAY,EAFT,SAGKyK,GAAO7I,EAAcuI,EAAc3H,GAHxC,OAGhBZ,EAHgB,OAIhBwH,EAAS,CAAE5V,KAAM,SAAUyW,QAASrI,IAJpB,2CAAH,wDAyBT8I,EAAe,uCAAG,gCAAA/Z,EAAA,0DAClB6Y,EAAMhU,WADY,mBAEhByE,EAAYuP,EAAMjD,SAAS,kBAC3B3E,EAAe+H,KAAKC,MAAMD,KAAKE,UAAUV,MAHzB,UAIhBG,EAAYvR,eAJI,aAIhB,EAAqB+R,SAJL,gCAKGa,GAAiB/I,EAAc3H,GALlC,OAKlB2H,EALkB,cAOpBA,EAAa3H,UAAYA,EACzBmP,EAAS,CAAE5V,KAAM,SAAUyW,QAASrI,IARhB,2CAAH,qDAgBfgJ,EAAY,uCAAG,8BAAAja,EAAA,yDACfka,EAAWlB,KAAKC,MAAMD,KAAKE,UAAUV,IADtB,UAEdG,EAAYvR,eAFE,aAEd,EAAqB+R,QAFP,gBAGjBe,EAAS3I,QAAU,GAHF,sCAKA4I,GAAUD,GALV,OAKjBA,EALiB,cAOnBzB,EAAS,CAAE5V,KAAM,SAAUyW,QAASY,IAPjB,2CAAH,qDA6BlB,OACE,sBAAK7S,UAAU,wBAAf,UACE,uBACA,sBAAKA,UAAU,qBAAf,UACE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,WAAf,UACE,cAAC,IAAD,CAAYC,QAAQ,KAApB,uCAEA,sBAAKD,UAAU,cAAf,UACE,sBAAKA,UAAU,uBAAf,UACE,uBACExE,KAAK,WACL2E,QAAS,SAAC3G,GAAD,OAAOoZ,KAChBG,UAAW5B,EAAalP,UACxB,cAAY,aACZ+Q,IAAK1B,IAEP,wDAEF,sBAAKtR,UAAU,mBAAf,UACE,qBAAKA,UAAU,sBAAf,SACE,cAAC,WAAD,UACE,cAAC,IAAD,CAAa1C,KAAMkU,EAAnB,SACE,cAAC,IAAD,CAAS5Q,QAAS4Q,EAAM/T,SAASwV,uBAIvC,wCACA,cAAC,IAAD,CACE/S,MAAO,iBACPF,UAAU,qBACVG,QAAS,kBAAMuS,UAGnB,8CAGJ,cAAC,GAAD,CACEtG,QAAS,kBApDbkF,EAAYvR,UACduR,EAAYvR,QAAQ+R,SAAU,GAEhCN,EAAMnD,QACNgD,GAAiBjD,QACjBgD,EAAS,CAAE5V,KAAM,SAAUyW,QAASjB,KAgD5BpH,aAAcuH,OAGlB,sBAAKnR,UAAU,mBAAf,UACE,cAAC,GAAD,CAAUoQ,YAAaqB,EAAUrD,aAAcA,IAE7C+C,EAAa/H,QAAQ/P,OAGrB,qBAAK2G,UAAU,WAAf,SACE,cAAC,GAAD,CACE6O,OAAQqD,EACRtD,SArJM,SAACsE,GAAyB,IAAD,EACvCtJ,EAAe+H,KAAKC,MAAMD,KAAKE,UAAUV,IACzCgC,KAAY,UAAA7B,EAAYvR,eAAZ,eAAqB+R,SACrClI,EAAewJ,GAASxJ,EAAcsJ,EAAgBC,GACtD/B,EAAS,CAAE5V,KAAM,SAAUyW,QAASrI,KAkJxB+G,eAAgBQ,EAAa/H,YANjC,MAWH+H,EAAajH,QAAQ7Q,SAArB,UAA+BiY,EAAYvR,eAA3C,aAA+B,EAAqB+R,SACnD,sBAAK9R,UAAU,mBAAf,UACE,cAAC,GAAD,CAAUmO,YAAamE,EAAUlE,aAAcA,IAC9C+C,EAAajH,QAAQ7Q,SAArB,UAA+BiY,EAAYvR,eAA3C,aAA+B,EAAqB+R,SACnD,qBAAK9R,UAAU,WAAf,SACE,cAAC,GAAD,CACE6O,OAAQ2D,EACR5D,SAzHI,SAACpE,GACnB,IAAIZ,EAAe+H,KAAKC,MAAMD,KAAKE,UAAUV,IACzC0B,EAAWQ,GAAezJ,EAAcY,GAC5C4G,EAAS,CAAE5V,KAAM,SAAUyW,QAASY,KAuHtBnD,kBAAmByB,EAAajH,YAIpC,MAIJ,MAGHiH,EAAa/H,QAAQ/P,QAAU8X,EAAajH,QAAQ7Q,OACnD,cAAC,GAAD,CAAiBuQ,aAAcuH,IAE/B,OAkBFD,GAAc,SAACoC,EAAYC,GAI/B,Ob9S0B,SAAC3J,GAC3B,IAAI4J,EAAgB5J,EAAaM,QAAQ4F,QACvC,SAACC,EAAUC,GAOT,OANAD,EAAIrD,UAAYsD,EAAEjH,oBAElBgH,EAAIlD,eAAiBmD,EAAE/G,qCAEvB8G,EAAIhD,iBACFiD,EAAEjH,oBAAsBiH,EAAE/G,qCACrB8G,IAGT,CACErD,SAAU,EACVG,cAAe,EACfE,gBAAiB,IAIjB0G,EAAgB7J,EAAaR,QAAQ0G,QACvC,SAACC,EAAUC,GACT,MAAO,CACLxD,kBAAmBuD,EAAIvD,kBAAoBwD,EAAEzH,kBAC7CmE,SAAUqD,EAAIrD,SAAWsD,EAAE3I,iBAI/B,CACEmF,kBAAmB,EACnBE,SAAU,IAMd,OAFA9C,EAAa0C,SAAWmH,EACxB7J,EAAayC,SAAWmH,EACjB5J,EayQQ8J,CADA/B,KAAKC,MAAMD,KAAKE,UAAU0B,EAAOtB,YAa5CD,GAAS,uCAAG,WAAOpI,EAA8B7C,GAArC,eAAApO,EAAA,sEACOwQ,EACrBS,EAAaR,QACbrC,EACA6C,EAAa9G,YAJC,cACZyG,EADY,OAQhBK,EAAaR,QAAUG,EARP,kBASTK,GATS,2CAAH,wDAqBTmI,GAAU,uCAAG,WAAOnI,EAA8B7C,GAArC,qBAAApO,EAAA,6DACb2Q,EAAKG,cADQ,SAEMN,EACrBS,EAAaR,QACbrC,EACA6C,EAAa9G,WACbwG,GANe,cAEbC,EAFa,OAQbc,EAAQQ,GAAc9D,EAAM6C,EAAa3H,WAR5B,SASMmI,GACrBR,EADkC,YAAC,eAE9B7C,GAF6B,IAEvBuC,GAAIA,IACfe,GAZe,cASbJ,EATa,OAgBjBL,EAAaR,QAAUG,EACvBK,EAAaM,QAAUD,EAjBN,kBAkBVL,GAlBU,4CAAH,wDA4BVyI,GAAU,uCAAG,WAAOzI,EAA8B+J,GAArC,eAAAhb,EAAA,sEACMgR,EAAaC,EAAc+J,GADjC,cACbpK,EADa,OAIjBK,EAAaR,QAAUG,EAJN,kBAKVK,GALU,2CAAH,wDAeVwI,GAAW,uCAAG,WAAOxI,EAA8B+J,GAArC,iBAAAhb,EAAA,sEACKgR,EAAaC,EAAc+J,GADhC,cACdpK,EADc,gBAEK0B,GAAerB,EAAc+J,GAFlC,cAEd1J,EAFc,OAKlBL,EAAaR,QAAUG,EACvBK,EAAaM,QAAUD,EANL,kBAOXL,GAPW,2CAAH,wDAkBXwJ,GAAW,SACfxJ,EACAsJ,EACAU,GAEA,IAAI/J,GAAe,EACfN,EAAaK,EAAaR,QAAQI,QAetC,OAdAD,EAAWO,MAAK,SAACtQ,EAAGiF,GAClB,OAAIjF,EAAE8P,KAAO4J,EAAe5J,KAC1BO,EAAcpL,GACP,MAKPmV,IACFhK,EbnB4B,SAC9BA,EACAsJ,GAEA,IAAIjJ,EAAaL,EAAaM,QAAQV,QAStC,OARAS,EAAaA,EAAWa,QAAO,SAAC/C,GAC9B,OAAIA,EAAOuB,KAAO4J,EAAe5J,MAMnCM,EAAaM,QAAUD,EAChBL,EaMUiK,CAAiBjK,EAAcsJ,IAGhD3J,EAAWQ,OAAOF,EAAa,GAC/BD,EAAaR,QAAUG,EAChBK,GAUH2I,GAAK,uCAAG,WAAO3I,EAA8BP,GAArC,eAAA1Q,EAAA,sEACWqR,EAAYJ,EAAcP,GADrC,cACRY,EADQ,OAIZL,EAAaM,QAAUD,EAJX,kBAKLL,GALK,2CAAH,wDAeL6I,GAAM,uCAAG,WACb7I,EACAuI,EACA3H,GAHa,eAAA7R,EAAA,6DAKIiR,EAAaR,QAAQU,MAAK,SAACtQ,GAC1C,OAAOA,EAAE8P,KAAO6I,EAAa7I,QAG7B6I,EAAa7I,GAAKG,eATP,SAWUa,GAAaV,EAAcuI,EAAc3H,GAXnD,cAWTP,EAXS,OAcbL,EAAaM,QAAUD,EAdV,kBAeNL,GAfM,2CAAH,0DAwBNyJ,GAAiB,SAACzJ,EAA8BY,GACpD,IAAIP,EAAaL,EAAaM,QAAQV,QAGtC,OAFAS,EAAWF,OAAOS,EAAO,GACzBZ,EAAaM,QAAUD,EAChBL,GAUH+I,GAAgB,uCAAG,WACvB/I,EACA3H,GAFuB,eAAAtJ,EAAA,6DAIvBiR,EAAa3H,UAAYA,EAJF,SAKAwI,GAAgBb,GAAc,GAL9B,cAKnBe,EALmB,OAQvBf,EAAaM,QAAUS,EARA,kBAShBf,GATgB,2CAAH,wDAkBhBkJ,GAAS,uCAAG,WAAOlJ,GAAP,eAAAjR,EAAA,sEACO8R,GAAgBb,GAAc,GADrC,cACZe,EADY,OAGhBf,EAAaM,QAAUS,EAHP,kBAITf,GAJS,2CAAH,sDCxfR,SAASkK,KACd,MAAkC7X,mBAASrB,OAAOc,SAASuJ,UAA3D,mBAAOE,EAAP,KAAkBR,EAAlB,KACA,EAA0C1I,mBAASrB,OAAOc,SAASuJ,UAAnE,mBAEM8O,GAFN,UCbO,CACL,CACE1O,QACE,uEACFC,SAAU,CAAC,+JAAD,qtBAQZ,CACED,QACE,uEACFC,SAAU,CAAC,6HAAD,2fAQZ,CACED,QACE,uEACFC,SAAU,CAAC,gIAAD,+yBAUZ,CACED,QAAS,uDACTC,SAAU,CACR,SAEA,sIAEA,uIAEA,iHAEA,gHAEA,wJAEA,sJAEA,mIAEA,qHAEA,iIAEA,WAEA,8HAEA,oJAEA,uGAEA,oGAEA,+GAEA,wHAEA,gHAEA,iHAEA,6IAEA,8JAEA,6HAEA,0IAEA,yHAEA,0HDhDN,OAtBAhG,qBAAU,WACR,OAAQ6F,GACN,IAAK,IACHtL,SAASma,MAAQ,kBACjB,MAIF,IAAK,SACHna,SAASma,MAAQ,oBACjB,MACF,IAAK,YACHna,SAASma,MAAQ,kBACjB,MACF,IAAK,iBACHna,SAASma,MAAQ,gBACjB,MACF,QACEna,SAASma,MAAQ,kBAEpB,CAAC7O,IAGF,eAAC,IAAD,WACE,cAAC,EAAD,CAAQR,aAAcA,EAAcQ,UAAWA,IAE/C,eAAC,IAAD,WACE,eAAC,IAAD,CAAO8O,OAAK,EAACC,KAAK,YAAlB,UACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAQvP,aAAcA,OAExB,eAAC,IAAD,CAAOsP,OAAK,EAACC,KAAK,SAAlB,UACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAQvP,aAAcA,OAExB,cAAC,IAAD,CAAOsP,OAAK,EAACC,KAAK,UAAlB,SACE,cAAC,EAAD,MAEF,eAAC,IAAD,CAAOD,OAAK,EAACC,KAAM,CAAC,IAAK,SAAzB,UACE,cAAC,GAAD,IACA,cAAC,EAAD,CAAQvP,aAAcA,OAMxB,eAAC,IAAD,CAAOsP,OAAK,EAACC,KAAK,iBAAlB,UACE,qBAAKzO,MAAO,CAAE0O,UAAW,SAAzB,SACGJ,EAAMxO,KAAI,SAAC/L,GACV,OAAO,cAAC,EAAD,CAAc6L,QAAS7L,EAAE6L,QAASC,SAAU9L,EAAE8L,gBAGzD,cAAC,EAAD,CAAQX,aAAcA,a,OAOjBmP,IEvEFM,GAAgB,SAACtT,GAC5B,MAAmEA,EAA3DuT,gBAAR,MAAmB,cAAnB,IAAmEvT,EAAjCwT,mBAAlC,MAAgD,IAAhD,EAAsDhP,EAAaxE,EAAbwE,SAChDiP,EAASC,cAEf,OACE,eAAC,IAAaC,SAAd,CAAuB9W,MAAO4W,EAA9B,UACE,cAAC,IAAD,CAAcF,SAAUA,EAAUC,YAAaA,IAC9ChP,MCXMoP,GAAkB,SAAC5T,GAC9B,IAAQwE,EAAaxE,EAAbwE,SACR,OAAO,cAAC,GAAD,UAAgBA,KCwCVqP,OApCf,WACE,MAAoD1Y,oBAAS,GAA7D,mBAAO2Y,EAAP,KAA4BC,EAA5B,KAuBA,OAtBeL,cACflV,qBAAU,WAgBR7G,EAAwB,SAASwF,MAAK,WACpC4W,GAAqB,SAIpBD,EAIH,qBAAK5U,UAAU,MAAf,SACE,cAAC,GAAD,UACE,cAAC8T,GAAD,QALG,MCnBIgB,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB/W,MAAK,YAAkD,IAA/CgX,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,GAAD,QAGJ3b,SAAS4b,eAAe,SAM1BX,KACAY,QAAQC,IAAI,0B","file":"static/js/main.94f59df1.chunk.js","sourcesContent":["import { TranslateService, INITIAL_TRANSLATIONS } from 'c1b-framework';\r\n\r\n//! HOW TO USE THIS TO GET TRANSLATIONS\r\n//! ADD TRANSLATIONS TO THE EN_US_TRANSLATION OBJECT\r\n//! IN A COMPONENT: \r\n//! import { getSingleTranslation as t} from 'c1b-framework'\r\n//! import { TRANSLATIONS } from '../translations' <- this file\r\n//! IN A COMPONENT, USE - t(TRANSLATIONS.<YOUR KEY HERE>) ex. t(TRANSLATIONS.LOOK_HERE)\r\n//! YOU CAN ALSO USE IT IN A LESS VERBOSE/MORE ERROR PRONE WAY ex. t('LOOK_HERE')\r\n//! USING THE TRANSLATION OBJECT MAKES IT SO YOU KNOW IF A KEY EXISTS OR NOT.\r\n//! IF YOU USE A KEY THAT DOESN'T EXIST IT / HAS NO TRANSLATIONS IT WILL LOG IT TO localStorage.translationsNeeded INSIDE OF THE CURRENTLY SELECTION LANGUAGE. IT WILL ALSO GIVE YOU AN ERROR LOG IN THE CONSOLE.\r\n/**\r\n * The key/value translation pairs for English\r\n */\r\nconst EN_US_TRANSLATIONS = {\r\n    //* These are the translations that are used in the framework.\r\n    //* Look into the INITIAL_TRANSLATIONS variable to see which ones are already in use.\r\n    //! Don't remove the line below or the framework breaks.\r\n    ...INITIAL_TRANSLATIONS,\r\n\r\n    //* Add more translations here for English.\r\n    //* LOOK_HERE: 'Look here'\r\n    //* C1B: 'Credit One Bank'\r\n    //* etc...\r\n};\r\n\r\n//inits the TRANSLATIONS object so we can look at it at in App.js\r\nexport let TRANSLATIONS = {} as typeof EN_US_TRANSLATIONS;\r\n\r\n/**\r\n * Gets the translations based on the `language` passed in.\r\n * \r\n * Makes the exported `TRANSLATIONS` equal to the key/key pair of all of the `EN_US_TRANSLATIONS`\r\n * @example \r\n * getLanguageTranslations('fr')\r\n * ^ makes\r\n * TRANSLATIONS = {\r\n *     FORGOT_PASSWORD: 'FORGOT_PASSWORD',\r\n *     YES: 'YES'\r\n * }\r\n * @description - This makes it easier and less error proof to add translations.\r\n * @param language - The language the translations should be in.\r\n * @default The ranked language from TranslateService.getRankedLanguage()\r\n */\r\nexport const getLanguageTranslations = async (language?: string) => {\r\n    let newLang = language;\r\n\r\n    if (!newLang) {\r\n        newLang = TranslateService.getRankedLanguage();\r\n    }\r\n\r\n    TRANSLATIONS = await TranslateService.getLanguageTranslations(EN_US_TRANSLATIONS, newLang) as typeof EN_US_TRANSLATIONS;\r\n\r\n    return Promise.resolve(true);\r\n}\r\n","import { c1bAxios } from 'c1b-framework';\r\nimport { KSS } from './globalInterfaces';\r\n\r\n/**\r\n * Parses the `useHistory's` `location.search` into an object\r\n * @param {string} search - The `useHistory's` `location.search` string\r\n * @example\r\n * ```js\r\n * const history = useHistory();\r\n * const queryParams = parseHistorySearch(history.location.search);\r\n * 'data=1&new=3'\r\n * ```\r\n */\r\nexport const parseHistorySearch = (search: string): KSS | null => {\r\n  //* If the search is blank, we have no query params so return null\r\n  //* Else parse the search string into an object.\r\n  if (!search) {\r\n    return null;\r\n  } else {\r\n    let searchObject: KSS = {};\r\n    search\r\n      .substr(1, search.length - 1)\r\n      .split('&')\r\n      .forEach(e => {\r\n        let split = e.split('=');\r\n        searchObject[split[0]] = split[1];\r\n      });\r\n\r\n    return searchObject;\r\n  }\r\n};\r\n\r\n/**\r\n * A day in milliseconds.\r\n */\r\nexport const MILLISECOND_DAY = 24 * 60 * 60 * 1000;\r\n\r\nexport const exportCsv = (data: string, docTitle: string) => {\r\n  if (!docTitle) {\r\n    docTitle = 'untitled';\r\n  }\r\n  var hidden = document.createElement('a');\r\n  hidden.href = 'data:text/csv;charset=utf-8,' + encodeURI(data);\r\n  hidden.target = '_blank';\r\n\r\n  hidden.download = docTitle + '.csv';\r\n\r\n  hidden.click();\r\n};\r\n/**\r\n * copies data using navigator\r\n * @param data Data to be copied\r\n */\r\nexport const copyTable = (data: string) => {\r\n  navigator.clipboard.writeText(data);\r\n};\r\n\r\n/**\r\n * fixes a date string to use / instead of -, removing the time\r\n * @param date the date string to be fixed\r\n */\r\nexport const fixDateString = (date: string) => {\r\n  const regex = /-/g;\r\n  if (date && regex) {\r\n    return date.replace(regex, '/');\r\n  } else {\r\n    return '';\r\n  }\r\n};\r\n\r\nlet w = window as any;\r\nw.c1bAxios = c1bAxios;\r\n","export const HOLIDAYS = [\r\n  '1/1/2021',\r\n  '5/31/2021',\r\n  '7/5/2021',\r\n  '9/6/2021',\r\n  '11/25/2021',\r\n  '12/24/2021',\r\n  '12/31/2021',\r\n  '5/30/2022',\r\n  '7/4/2022',\r\n  '9/5/2022',\r\n  '11/24/2022',\r\n  '12/26/2022',\r\n  '1/2/2023',\r\n  '5/29/2023',\r\n  '7/4/2023',\r\n  '9/4/2023',\r\n  '11/23/2023',\r\n  '12/25/2023',\r\n  '1/1/2024',\r\n  '5/27/2024',\r\n  '7/4/2024',\r\n  '9/2/2024',\r\n  '11/28/2024',\r\n  '12/25/2024',\r\n  '1/1/2025',\r\n  '5/26/2025',\r\n  '7/4/2025',\r\n  '9/1/2025',\r\n  '11/27/2025',\r\n  '12/25/2025',\r\n  '1/1/2026',\r\n  '5/25/2026',\r\n  '7/3/2026',\r\n  '9/7/2026',\r\n  '11/26/2026',\r\n  '12/25/2026',\r\n  '1/1/2027',\r\n  '5/31/2027',\r\n  '7/5/2027',\r\n  '9/6/2027',\r\n  '11/25/2027',\r\n  '12/24/2027',\r\n  '12/31/2027',\r\n  '5/29/2028',\r\n  '7/4/2028',\r\n  '9/4/2028',\r\n  '11/23/2028',\r\n  '12/25/2028',\r\n  '1/1/2029',\r\n  '5/28/2029',\r\n  '7/4/2029',\r\n  '9/3/2029',\r\n  '11/22/2029',\r\n  '12/25/2029',\r\n  '1/1/2030',\r\n  '5/27/2030',\r\n  '7/4/2030',\r\n  '9/2/2030',\r\n  '11/28/2030',\r\n  '12/25/2030',\r\n  '1/1/2031',\r\n  '5/26/2031',\r\n  '7/4/2031',\r\n  '9/1/2031',\r\n  '11/27/2031',\r\n  '12/25/2031',\r\n  '1/1/2032',\r\n  '5/31/2032',\r\n  '7/5/2032',\r\n  '9/6/2032',\r\n  '11/25/2032',\r\n  '12/24/2032',\r\n  '12/31/2032',\r\n  '5/30/2033',\r\n  '7/4/2033',\r\n  '9/5/2033',\r\n  '11/24/2033',\r\n  '12/26/2033',\r\n  '1/2/2034',\r\n  '5/29/2034',\r\n  '7/4/2034',\r\n  '9/4/2034',\r\n  '11/23/2034',\r\n  '12/25/2034',\r\n  '1/1/2035',\r\n  '5/28/2035',\r\n  '7/4/2035',\r\n  '9/3/2035',\r\n  '11/22/2035',\r\n  '12/25/2035',\r\n  '1/1/2036',\r\n  '5/26/2036',\r\n  '7/4/2036',\r\n  '9/1/2036',\r\n  '11/27/2036',\r\n  '12/25/2036',\r\n  '1/1/2037',\r\n  '5/25/2037',\r\n  '7/3/2037',\r\n  '9/7/2037',\r\n  '11/26/2037',\r\n  '12/25/2037',\r\n  '1/1/2038',\r\n  '5/31/2038',\r\n  '7/5/2038',\r\n  '9/6/2038',\r\n  '11/25/2038',\r\n  '12/24/2038',\r\n  '12/31/2038',\r\n  '5/30/2039',\r\n  '7/4/2039',\r\n  '9/5/2039',\r\n  '11/24/2039',\r\n  '12/26/2039',\r\n  '1/2/2040',\r\n  '5/28/2040',\r\n  '7/4/2040',\r\n  '9/3/2040',\r\n  '11/22/2040',\r\n  '12/25/2040',\r\n  '1/1/2041',\r\n  '5/27/2041',\r\n  '7/4/2041',\r\n  '9/2/2041',\r\n  '11/28/2041',\r\n  '12/25/2041',\r\n  '1/1/2042',\r\n  '5/26/2042',\r\n  '7/4/2042',\r\n  '9/1/2042',\r\n  '11/27/2042',\r\n  '12/25/2042',\r\n  '1/1/2043',\r\n  '5/25/2043',\r\n  '7/3/2043',\r\n  '9/7/2043',\r\n  '11/26/2043',\r\n  '12/25/2043',\r\n  '1/1/2044',\r\n  '5/30/2044',\r\n  '7/4/2044',\r\n  '9/5/2044',\r\n  '11/24/2044',\r\n  '12/26/2044',\r\n  '1/2/2045',\r\n  '5/29/2045',\r\n  '7/4/2045',\r\n  '9/4/2045',\r\n  '11/23/2045',\r\n  '12/25/2045',\r\n  '1/1/2046',\r\n  '5/28/2046',\r\n  '7/4/2046',\r\n  '9/3/2046',\r\n  '11/22/2046',\r\n  '12/25/2046',\r\n  '1/1/2047',\r\n  '5/27/2047',\r\n  '7/4/2047',\r\n  '9/2/2047',\r\n  '11/28/2047',\r\n  '12/25/2047',\r\n  '1/1/2048',\r\n  '5/25/2048',\r\n  '7/3/2048',\r\n  '9/7/2048',\r\n  '11/26/2048',\r\n  '12/25/2048',\r\n  '1/1/2049',\r\n  '5/31/2049',\r\n  '7/5/2049',\r\n  '9/6/2049',\r\n  '11/25/2049',\r\n  '12/24/2049',\r\n  '12/31/2049',\r\n  '5/30/2050',\r\n  '7/4/2050',\r\n  '9/5/2050',\r\n  '11/24/2050',\r\n  '12/26/2050',\r\n  '1/2/2051',\r\n  '5/29/2051',\r\n  '7/4/2051',\r\n  '9/4/2051',\r\n  '11/23/2051',\r\n  '12/25/2051',\r\n  '1/1/2052',\r\n  '5/27/2052',\r\n  '7/4/2052',\r\n  '9/2/2052',\r\n  '11/28/2052',\r\n  '12/25/2052',\r\n  '1/1/2053',\r\n  '5/26/2053',\r\n  '7/4/2053',\r\n  '9/1/2053',\r\n  '11/27/2053',\r\n  '12/25/2053',\r\n  '1/1/2054',\r\n  '5/25/2054',\r\n  '7/3/2054',\r\n  '9/7/2054',\r\n  '11/26/2054',\r\n  '12/25/2054',\r\n  '1/1/2055',\r\n  '5/31/2055',\r\n  '7/5/2055',\r\n  '9/6/2055',\r\n  '11/25/2055',\r\n  '12/24/2055',\r\n  '12/31/2055',\r\n  '5/29/2056',\r\n  '7/4/2056',\r\n  '9/4/2056',\r\n  '11/23/2056',\r\n  '12/25/2056',\r\n  '1/1/2057',\r\n  '5/28/2057',\r\n  '7/4/2057',\r\n  '9/3/2057',\r\n  '11/22/2057',\r\n  '12/25/2057',\r\n  '1/1/2058',\r\n  '5/27/2058',\r\n  '7/4/2058',\r\n  '9/2/2058',\r\n  '11/28/2058',\r\n  '12/25/2058',\r\n  '1/1/2059',\r\n  '5/26/2059',\r\n  '7/4/2059',\r\n  '9/1/2059',\r\n  '11/27/2059',\r\n  '12/25/2059',\r\n  '1/1/2060',\r\n  '5/31/2060',\r\n  '7/5/2060',\r\n  '9/6/2060',\r\n  '11/25/2060',\r\n  '12/24/2060',\r\n  '12/31/2060',\r\n  '5/30/2061',\r\n  '7/4/2061',\r\n  '9/5/2061',\r\n  '11/24/2061',\r\n  '12/26/2061',\r\n  '1/2/2062',\r\n  '5/29/2062',\r\n  '7/4/2062',\r\n  '9/4/2062',\r\n  '11/23/2062',\r\n  '12/25/2062',\r\n  '1/1/2063',\r\n  '5/28/2063',\r\n  '7/4/2063',\r\n  '9/3/2063',\r\n  '11/22/2063',\r\n  '12/25/2063',\r\n  '1/1/2064',\r\n  '5/26/2064',\r\n  '7/4/2064',\r\n  '9/1/2064',\r\n  '11/27/2064',\r\n  '12/25/2064',\r\n  '1/1/2065',\r\n  '5/25/2065',\r\n  '7/3/2065',\r\n  '9/7/2065',\r\n  '11/26/2065',\r\n  '12/25/2065',\r\n  '1/1/2066',\r\n  '5/31/2066',\r\n  '7/5/2066',\r\n  '9/6/2066',\r\n  '11/25/2066',\r\n  '12/24/2066',\r\n  '12/31/2066',\r\n  '5/30/2067',\r\n  '7/4/2067',\r\n  '9/5/2067',\r\n  '11/24/2067',\r\n  '12/26/2067',\r\n  '1/2/2068',\r\n  '5/28/2068',\r\n  '7/4/2068',\r\n  '9/3/2068',\r\n  '11/22/2068',\r\n  '12/25/2068',\r\n  '1/1/2069',\r\n  '5/27/2069',\r\n  '7/4/2069',\r\n  '9/2/2069',\r\n  '11/28/2069',\r\n  '12/25/2069',\r\n  '1/1/2070',\r\n  '5/26/2070',\r\n  '7/4/2070',\r\n  '9/1/2070',\r\n  '11/27/2070',\r\n  '12/25/2070',\r\n  '1/1/2071',\r\n  '5/25/2071',\r\n  '7/3/2071',\r\n  '9/7/2071',\r\n  '11/26/2071',\r\n  '12/25/2071',\r\n  '1/1/2072',\r\n  '5/30/2072',\r\n  '7/4/2072',\r\n  '9/5/2072',\r\n  '11/24/2072',\r\n  '12/26/2072',\r\n  '1/2/2073',\r\n  '5/29/2073',\r\n  '7/4/2073',\r\n  '9/4/2073',\r\n  '11/23/2073',\r\n  '12/25/2073',\r\n  '1/1/2074',\r\n  '5/28/2074',\r\n  '7/4/2074',\r\n  '9/3/2074',\r\n  '11/22/2074',\r\n  '12/25/2074',\r\n  '1/1/2075',\r\n  '5/27/2075',\r\n  '7/4/2075',\r\n  '9/2/2075',\r\n  '11/28/2075',\r\n  '12/25/2075',\r\n  '1/1/2076',\r\n  '5/25/2076',\r\n  '7/3/2076',\r\n  '9/7/2076',\r\n  '11/26/2076',\r\n  '12/25/2076',\r\n  '1/1/2077',\r\n  '5/31/2077',\r\n  '7/5/2077',\r\n  '9/6/2077',\r\n  '11/25/2077',\r\n  '12/24/2077',\r\n  '12/31/2077',\r\n  '5/30/2078',\r\n  '7/4/2078',\r\n  '9/5/2078',\r\n  '11/24/2078',\r\n  '12/26/2078',\r\n  '1/2/2079',\r\n  '5/29/2079',\r\n  '7/4/2079',\r\n  '9/4/2079',\r\n  '11/23/2079',\r\n  '12/25/2079',\r\n  '1/1/2080',\r\n  '5/27/2080',\r\n  '7/4/2080',\r\n  '9/2/2080',\r\n  '11/28/2080',\r\n  '12/25/2080',\r\n  '1/1/2081',\r\n  '5/26/2081',\r\n  '7/4/2081',\r\n  '9/1/2081',\r\n  '11/27/2081',\r\n  '12/25/2081',\r\n  '1/1/2082',\r\n  '5/25/2082',\r\n  '7/3/2082',\r\n  '9/7/2082',\r\n  '11/26/2082',\r\n  '12/25/2082',\r\n  '1/1/2083',\r\n  '5/31/2083',\r\n  '7/5/2083',\r\n  '9/6/2083',\r\n  '11/25/2083',\r\n  '12/24/2083',\r\n  '12/31/2083',\r\n  '5/29/2084',\r\n  '7/4/2084',\r\n  '9/4/2084',\r\n  '11/23/2084',\r\n  '12/25/2084',\r\n  '1/1/2085',\r\n  '5/28/2085',\r\n  '7/4/2085',\r\n  '9/3/2085',\r\n  '11/22/2085',\r\n  '12/25/2085',\r\n  '1/1/2086',\r\n  '5/27/2086',\r\n  '7/4/2086',\r\n  '9/2/2086',\r\n  '11/28/2086',\r\n  '12/25/2086',\r\n  '1/1/2087',\r\n  '5/26/2087',\r\n  '7/4/2087',\r\n  '9/1/2087',\r\n  '11/27/2087',\r\n  '12/25/2087',\r\n  '1/1/2088',\r\n  '5/31/2088',\r\n  '7/5/2088',\r\n  '9/6/2088',\r\n  '11/25/2088',\r\n  '12/24/2088',\r\n  '12/31/2088',\r\n  '5/30/2089',\r\n  '7/4/2089',\r\n  '9/5/2089',\r\n  '11/24/2089',\r\n  '12/26/2089',\r\n  '1/2/2090',\r\n  '5/29/2090',\r\n  '7/4/2090',\r\n  '9/4/2090',\r\n  '11/23/2090',\r\n  '12/25/2090',\r\n  '1/1/2091',\r\n  '5/28/2091',\r\n  '7/4/2091',\r\n  '9/3/2091',\r\n  '11/22/2091',\r\n  '12/25/2091',\r\n  '1/1/2092',\r\n  '5/26/2092',\r\n  '7/4/2092',\r\n  '9/1/2092',\r\n  '11/27/2092',\r\n  '12/25/2092',\r\n  '1/1/2093',\r\n  '5/25/2093',\r\n  '7/3/2093',\r\n  '9/7/2093',\r\n  '11/26/2093',\r\n  '12/25/2093',\r\n  '1/1/2094',\r\n  '5/31/2094',\r\n  '7/5/2094',\r\n  '9/6/2094',\r\n  '11/25/2094',\r\n  '12/24/2094',\r\n  '12/31/2094',\r\n  '5/30/2095',\r\n  '7/4/2095',\r\n  '9/5/2095',\r\n  '11/24/2095',\r\n  '12/26/2095',\r\n  '1/2/2096',\r\n  '5/28/2096',\r\n  '7/4/2096',\r\n  '9/3/2096',\r\n  '11/22/2096',\r\n  '12/25/2096',\r\n  '1/1/2097',\r\n  '5/27/2097',\r\n  '7/4/2097',\r\n  '9/2/2097',\r\n  '11/28/2097',\r\n  '12/25/2097',\r\n  '1/1/2098',\r\n  '5/26/2098',\r\n  '7/4/2098',\r\n  '9/1/2098',\r\n  '11/27/2098',\r\n  '12/25/2098',\r\n  '1/1/2099',\r\n  '5/25/2099',\r\n  '7/3/2099',\r\n  '9/7/2099',\r\n  '11/26/2099',\r\n  '12/25/2099',\r\n  '1/1/2100'\r\n];\r\n","const testURL = 'https://lvappt04ms01';\r\nconst prodURL = 'https://lvappprdms';\r\nconst portFinanceURL = '8621';\r\nconst portDateURL = '8626';\r\n\r\n// FINANCE CHARGES URL\r\nconst baseFinanceURL = `${portFinanceURL}/api/v1`;\r\nconst financeChargeURL = `${baseFinanceURL}/FinanceChargeCalculator/TotalFinanceCharge`;\r\nconst actualFinanceChargeURL = `${baseFinanceURL}/FinanceChargeCalculator/ActualFinanceCharge`;\r\nconst creditProtectURL = `${baseFinanceURL}/FinanceChargeCalculator/CreditProtectionFee`;\r\nconst fChargeOnCPFeesURL = `${baseFinanceURL}/FinanceChargeCalculator/FinanceChargesOnCreditProtectionFees`;\r\n\r\n// DATE CALCULATOR URLS\r\nconst baseDateURL = `${portDateURL}/api/v1`;\r\nconst regZDateURL = `${baseDateURL}/DateCalculator/RegulationZDate`;\r\nconst fromCustomDateURL = `${baseDateURL}/DateCalculator/FromCustomDate`;\r\n\r\nexport const getAPIURL = (type: IApiTypes) => {\r\n  let baseURL =\r\n    window.location.hostname ===\r\n    'https://z-calc-node-git-c1b-forms.apps.lv-tst01.ocp.c1b/'\r\n      ? prodURL\r\n      : testURL;\r\n\r\n  switch (type.type) {\r\n    case 'FINANCECHARGE':\r\n      return `${baseURL}:${financeChargeURL}`;\r\n    case 'ACTUALFINANCECHARGE':\r\n      return `${baseURL}:${actualFinanceChargeURL}`;\r\n    case 'CREDITPROTECTION':\r\n      return `${baseURL}:${creditProtectURL}`;\r\n    case 'FCHARGEONCPFEES':\r\n      return `${baseURL}:${fChargeOnCPFeesURL}`;\r\n    case 'REGZDATE':\r\n      return `${baseURL}:${regZDateURL}`;\r\n    case 'FROMCUSTOMDATE':\r\n      return `${baseURL}:${fromCustomDateURL}`;\r\n  }\r\n};\r\n\r\ninterface IApiTypes {\r\n  type:\r\n    | 'FINANCECHARGE'\r\n    | 'ACTUALFINANCECHARGE'\r\n    | 'CREDITPROTECTION'\r\n    | 'FCHARGEONCPFEES'\r\n    | 'REGZDATE'\r\n    | 'FROMCUSTOMDATE';\r\n}\r\n","import { useEffect, useState, useRef } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport {\r\n  ButtonComponent,\r\n  c1bAxios,\r\n  Control,\r\n  Form,\r\n  FormDisplay,\r\n  RXInput,\r\n  Typography,\r\n  useForm,\r\n  VALIDATIONS\r\n} from 'c1b-framework';\r\nimport { copyTable, exportCsv, parseHistorySearch } from '../../utils';\r\nimport { HOLIDAYS } from './DateArray';\r\nimport { fromCustomDateURL } from '../../apiURLS';\r\nimport './DateCalc.scss';\r\nimport { getAPIURL } from '../../APIs/apiURLS';\r\n\r\nexport const DateCalc = () => {\r\n  /**\r\n   * The object that will hold inputs if the user uses a query string in the\r\n   * link to the webpage\r\n   */\r\n  const history = useHistory();\r\n\r\n  /**\r\n   * The date to which days will be added\r\n   */\r\n  const dateRef = useRef<HTMLInputElement | null>(null);\r\n\r\n  /**\r\n   * The resulting date after adding days to the start date\r\n   */\r\n  const [calculatedDate, setCalculatedDate] = useState(\r\n    new Date().toLocaleDateString()\r\n  );\r\n\r\n  /**\r\n   * The resulting date after adding days to the start date\r\n   */\r\n  const [calculatedDateB, setCalculatedDateB] = useState(\r\n    new Date().toLocaleDateString()\r\n  );\r\n\r\n  /**\r\n   * The number of days to add to start date\r\n   */\r\n  const [daysToAdd, setDaysToAdd] = useState(0);\r\n\r\n  const [exStartDate, setExStartDate] = useState<string>(\r\n    new Date().toLocaleDateString()\r\n  ); //Start date entered when calculate is pressed. If calculate has not been pressed, will default to current date\r\n  const [exDays, SetExDays] = useState<number>(0); //Number entered in the entered days upon pressing the calculate button. If calculate has not been pressed yet the value will default to 0\r\n  const [calculationInitialized, setCalculationInitialized] =\r\n    useState<boolean>(false); //A boolean denoting whether the calculate button has been pressed\r\n\r\n  /**\r\n   * Form to contain all of the inputs\r\n   */\r\n\r\n  const [form] = useForm(\r\n    new Form('dateCalc', [\r\n      Control(\r\n        'startDate',\r\n        new Date().toISOString().substr(0, 10),\r\n        'Start Date',\r\n        'date',\r\n        {\r\n          validators: [VALIDATIONS.required]\r\n        }\r\n      ),\r\n      Control('days', '', 'Enter Days', 'number', {\r\n        validators: [VALIDATIONS.required]\r\n      })\r\n    ])\r\n  );\r\n\r\n  /**\r\n   * Handles adding the amount of days entered to the selected start date\r\n   * @param {number} days - The number of days to add to `dateObj`\r\n   * @param {Date} dateObj - The date that is to be added to\r\n   * @returns {Date} - New Date obj that has been advanced by `days` days\r\n   */\r\n  const addDays = (days: number, dateObj: Date) => {\r\n    if (typeof dateObj.getMonth !== 'function') {\r\n      return;\r\n    }\r\n    let retDate = new Date(dateObj);\r\n\r\n    let i = 0;\r\n    let j = 0;\r\n\r\n    if (days >= 0) {\r\n      while (i <= days) {\r\n        let tempDate = new Date(retDate);\r\n\r\n        tempDate.setDate(tempDate.getDate() + j + 1);\r\n        if (\r\n          tempDate.getDay() === 6 ||\r\n          tempDate.getDay() === 0 ||\r\n          HOLIDAYS.includes(tempDate.toLocaleDateString())\r\n        ) {\r\n          j += 1;\r\n        } else {\r\n          retDate.setDate(retDate.getDate() + j + 1);\r\n          i += 1;\r\n          j = 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (days <= 0) {\r\n      while (i > days + 1) {\r\n        let tempDate = new Date(retDate);\r\n\r\n        tempDate.setDate(tempDate.getDate() - j - 1);\r\n        if (\r\n          tempDate.getDay() === 6 ||\r\n          tempDate.getDay() === 0 ||\r\n          HOLIDAYS.includes(tempDate.toLocaleDateString())\r\n        ) {\r\n          j++;\r\n        } else {\r\n          retDate.setDate(retDate.getDate() - j - 1);\r\n          i--;\r\n          j = 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    return retDate;\r\n  };\r\n\r\n  /**\r\n   * Calculates the new date by adding the `daysToAdd` to\r\n   * `startDate`\r\n   */\r\n  const calculate = () => {\r\n    if (form.onSubmit()) {\r\n      if (form.controls.startDate.value !== null) {\r\n        setCalculationInitialized(true);\r\n        setExStartDate(form.controls.startDate.value);\r\n        SetExDays(parseInt(form.controls.days.value));\r\n        let startDate = new Date(form.controls.startDate.value);\r\n        let postObj = {\r\n          date: startDate,\r\n          numberOfDays: parseInt(form.controls.days.value)\r\n        };\r\n        c1bAxios\r\n          .post(getAPIURL({ type: 'FROMCUSTOMDATE' }), postObj)\r\n          .then((res) => {\r\n            let calcD = res.data.resultDate;\r\n            let businessDate = addDays(\r\n              parseInt(form.controls.days.value),\r\n              startDate\r\n            );\r\n            setCalculatedDate(calcD);\r\n            let bDate = businessDate?.toLocaleDateString();\r\n            if (bDate !== undefined) {\r\n              setCalculatedDateB(bDate);\r\n            }\r\n          })\r\n          .catch((error) => alert('API call error!'));\r\n      }\r\n    }\r\n  };\r\n  /**\r\n   * Handles exporting by creating a csv string using the information entered in the 2 input fields and retrieved from the API. Then calls the export csv function to trigger the download\r\n   */\r\n  const handleExport = () => {\r\n    let newStartDate = exStartDate.toString().replace(/-/g, '/');\r\n    let startDateFixed = new Date(newStartDate);\r\n\r\n    let csvTitle = `Calculated_Date${new Date().toLocaleDateString('en-US')}`;\r\n\r\n    let titleRow =\r\n      'Start Date,Days,Calculated Date,Calculated Date (Business Days Only)\\n';\r\n    let contentRow = '';\r\n    contentRow += startDateFixed.toLocaleDateString() + ',';\r\n    contentRow += exDays + ',';\r\n    contentRow += calculatedDate + ',';\r\n    contentRow += calculatedDateB;\r\n\r\n    let csvString = titleRow + contentRow;\r\n    exportCsv(csvString, csvTitle);\r\n  };\r\n  /**\r\n   * Creates a copy string for use in an excel table and copies it to the user's clipboard\r\n   */\r\n  const handleCopy = () => {\r\n    let newStartDate = exStartDate.toString().replace(/-/g, '/');\r\n    let startDateFixed = new Date(newStartDate);\r\n\r\n    let titleRow =\r\n      'Start Date\\tDays\\tCalculated Date\\tCalculated Date (Business Days Only)\\n';\r\n    let contentRow = '';\r\n    contentRow += startDateFixed.toLocaleDateString() + '\\t';\r\n    contentRow += exDays + '\\t';\r\n    contentRow += calculatedDate + '\\t';\r\n    contentRow += calculatedDateB;\r\n\r\n    let copyString = titleRow + contentRow;\r\n    copyTable(copyString);\r\n  };\r\n\r\n  /**\r\n   * This useEffect is setting the calculated Date once it is updated and then updates\r\n   * the HTML being displayed to show the newly calculated date\r\n   */\r\n  useEffect(() => {\r\n    let historyObj = parseHistorySearch(history.location.search);\r\n    if (historyObj) {\r\n      let dateString = historyObj.date;\r\n      let dateArr = dateString.split('/');\r\n      let newDate = new Date(\r\n        parseInt(dateArr[2]),\r\n        parseInt(dateArr[0]) - 1,\r\n        parseInt(dateArr[1])\r\n      );\r\n      let dayString = historyObj.day;\r\n      if (!isNaN(parseInt(dayString))) {\r\n        let newDaysToAdd = parseInt(dayString);\r\n        setDaysToAdd(newDaysToAdd);\r\n      }\r\n\r\n      let node = dateRef.current;\r\n      if (node) {\r\n        node.value = newDate.toISOString().substr(0, 10);\r\n      }\r\n    }\r\n  }, [dateRef, history.location.search]);\r\n\r\n  return (\r\n    <div className=\"datecalc-wrapper\">\r\n      <div className=\"datecalc-main\">\r\n        <FormDisplay form={form}>\r\n          <div className=\"container\">\r\n            <div className=\"header-div\">\r\n              <div className=\"DateCalcTitle\">\r\n                <Typography variant=\"h1\">Date Calculator</Typography>\r\n                <div className=\"dateCalcCopyExport\">\r\n                  <ButtonComponent\r\n                    label={'Export'}\r\n                    onClick={() => handleExport()}\r\n                    isDisabled={!calculationInitialized}\r\n                  />\r\n                  <span>&nbsp;</span>\r\n                  <ButtonComponent\r\n                    label={'Copy'}\r\n                    onClick={() => handleCopy()}\r\n                    isDisabled={!calculationInitialized}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"DateCalc card\">\r\n              {/* <h3>Start Date</h3> */}\r\n              <RXInput control={form.controls.startDate} />\r\n\r\n              {/* <h3>Enter Days</h3> */}\r\n\r\n              <RXInput control={form.controls.days} />\r\n\r\n              <div>\r\n                <br />\r\n                <ButtonComponent\r\n                  label=\"Calculate\"\r\n                  onClick={() => {\r\n                    calculate();\r\n                  }}\r\n                />\r\n                <br />\r\n              </div>\r\n\r\n              <div>\r\n                <h3>Calculated Date</h3>\r\n                <br />\r\n                {calculatedDate}\r\n              </div>\r\n              <div>\r\n                <h3>Calculated Date (Business Days Only)</h3>\r\n                <br />\r\n                {calculatedDateB}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </FormDisplay>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DateCalc;\r\n","import './Design.scss';\r\nimport {\r\n  ButtonComponent,\r\n  Table,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  TableBody,\r\n} from 'c1b-framework';\r\nexport const Design = (props) => {\r\n  return (\r\n    <div className=\"Design\">\r\n      <div className=\"card\">\r\n        <div className=\"charges-container\">\r\n          <div>\r\n            <label>\r\n              <h3>Statement Date</h3>\r\n              <input className=\"input\" type=\"date\" />\r\n            </label>\r\n          </div>\r\n          <div>\r\n            <label>\r\n              <h3>Post Date Of Transaction</h3>\r\n              <input className=\"input\" type=\"date\" />\r\n            </label>\r\n          </div>\r\n          <div>\r\n            <label>\r\n              <h3>Total Purchase</h3>\r\n              <input className=\"input\" type=\"number\" />\r\n            </label>\r\n          </div>\r\n          <div>\r\n            <label>\r\n              <h3>Fraud Adjustment</h3>\r\n              <input className=\"input\" type=\"date\" />\r\n            </label>\r\n          </div>\r\n          <ButtonComponent label=\"Add\" onClick={() => {}} />\r\n        </div>\r\n\r\n        <div className=\"table-container\">\r\n          <Table className=\"chargesTable\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Statement Date</TableCell>\r\n                <TableCell>Post Date Of Transaction</TableCell>\r\n                <TableCell>Total Purchase</TableCell>\r\n                <TableCell>Fraud Adjustment</TableCell>\r\n                <TableCell>Total</TableCell>\r\n                <TableCell>Days</TableCell>\r\n                <TableCell></TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody align=\"center\">\r\n              <TableRow>\r\n                <TableCell>02/02/21</TableCell>\r\n                <TableCell>02/02/21</TableCell>\r\n                <TableCell>$100</TableCell>\r\n                <TableCell>02/02/21</TableCell>\r\n                <TableCell>$106.81</TableCell>\r\n                <TableCell>13</TableCell>\r\n                <TableCell>\r\n                  <ButtonComponent label=\"Remove\" />\r\n                </TableCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <TableCell>02/02/21</TableCell>\r\n                <TableCell>02/02/21</TableCell>\r\n                <TableCell>$100</TableCell>\r\n                <TableCell>02/02/21</TableCell>\r\n                <TableCell>$106.81</TableCell>\r\n                <TableCell>13</TableCell>\r\n                <TableCell>\r\n                  <ButtonComponent label=\"Remove\" />\r\n                </TableCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <TableCell>02/02/21</TableCell>\r\n                <TableCell>02/02/21</TableCell>\r\n                <TableCell>$100</TableCell>\r\n                <TableCell>02/02/21</TableCell>\r\n                <TableCell>$106.81</TableCell>\r\n                <TableCell>13</TableCell>\r\n                <TableCell>\r\n                  <ButtonComponent label=\"Remove\" />\r\n                </TableCell>\r\n              </TableRow>\r\n\r\n              <TableRow>\r\n                <TableCell></TableCell>\r\n                <TableCell align=\"right\">\r\n                  <strong>Total:</strong>\r\n                </TableCell>\r\n\r\n                <TableCell>\r\n                  <strong>300</strong>\r\n                </TableCell>\r\n                <TableCell></TableCell>\r\n                <TableCell>\r\n                  <strong>123000</strong>\r\n                </TableCell>\r\n                <TableCell></TableCell>\r\n                <TableCell></TableCell>\r\n              </TableRow>\r\n            </TableBody>\r\n          </Table>\r\n        </div>\r\n      </div>\r\n\r\n      <h1></h1>\r\n    </div>\r\n  );\r\n};\r\n","import { Control, VALIDATIONS, Form } from 'c1b-framework';\r\n\r\nconst date = Control('date', '', 'Corr. Rcvd. Date', 'date', {\r\n  validators: [VALIDATIONS.required]\r\n});\r\n\r\nconst code = Control('code', '', 'Cycle Code', 'number', {\r\n  validators: [\r\n    VALIDATIONS.required,\r\n    VALIDATIONS.minValue(1),\r\n    VALIDATIONS.maxValue(28),\r\n    VALIDATIONS.pattern(new RegExp(/^\\d{1,2}$/i), 'wholenumber')\r\n  ],\r\n  errorMessages: {\r\n    minValue: 'Cycle code cannot be less than 1.',\r\n    maxValue: 'Cycle code cannot be greater than 28.',\r\n    wholenumber: 'Cycle code must be an integer.'\r\n  }\r\n});\r\n\r\nconst ZdateForm = new Form('ZdateForm', [date, code], {\r\n  groups: [\r\n    {\r\n      controls: ['date', 'code']\r\n    }\r\n  ]\r\n});\r\n\r\nexport default ZdateForm;\r\n","import {\r\n  ButtonComponent,\r\n  c1bAxios,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  ToastContext,\r\n  FormDisplay,\r\n  useForm,\r\n  RXInput,\r\n  Typography\r\n} from 'c1b-framework';\r\nimport { useCallback, useContext, useEffect, useRef, useState } from 'react';\r\nimport { copyTable, exportCsv, parseHistorySearch } from '../../utils';\r\nimport './Zdate.scss';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { regZDateURL } from '../../apiURLS';\r\nimport ZdateForm from './Zdate.form';\r\nimport { getAPIURL } from '../../APIs/apiURLS';\r\n\r\n/**\r\n * Component that is used to calculate and display the `regZDate` date `nextCycleDate` from a `Corrected Recieve Date` and `Cycle Code`.\r\n * Also will disiplay how long 88 days is from the `nextCycleDate`.\r\n *\r\n */\r\nexport const Zdate = () => {\r\n  // These two variables are used if a querystring is set to parse and run with default values\r\n  const history = useHistory();\r\n  const [isQuerySet, setIsQuerySet] = useState<boolean>(false);\r\n  const [shouldSetValue, setShouldSetValue] = useState<boolean>(false);\r\n\r\n  const dateRef = useRef<HTMLInputElement | null>(null);\r\n  const cycleRef = useRef<HTMLInputElement | null>(null);\r\n\r\n  // Inputed date from user of the date the Correction was Recieved\r\n  const [corrRcvdDate, setCorrRcvdDate] = useState<Date | null>(null);\r\n\r\n  // Inputed number from the user of the due date of the bill\r\n  const [cycleCode, setCycleCode] = useState<number>(0);\r\n\r\n  // Calculated date of the next day the bill is due\r\n  const [nextCycleDate, setNextCycleDate] = useState<string>('');\r\n\r\n  // 2 Months from the nextCycleDate Date\r\n  const [regZDate, setRegZDate] = useState<string>('');\r\n\r\n  // Number of days from the CorrectedDate to the regZDate date\r\n  const [numberOfDays, setNumberOfDays] = useState<string>('');\r\n\r\n  // 88 days from the corrected recieve days to make sure the regZDate date is in compiance\r\n  const [reminderDate, setReminderDate] = useState<string>('');\r\n\r\n  const [exRcvd, setExRcvd] = useState<Date | undefined | null>(); //The Rcvd date entered the last time submit was pressed\r\n  const [exCycleCode, setExCycleCode] = useState<number>(0); //The cycle code entered the last time submit was pressed\r\n\r\n  const { addMessage } = useContext(ToastContext);\r\n\r\n  const [form] = useForm(ZdateForm);\r\n\r\n  const getValues = () => {\r\n    return form.values;\r\n  };\r\n\r\n  useEffect(() => {\r\n    let { date, code } = getValues();\r\n    setCorrRcvdDate(date);\r\n    setCycleCode(code);\r\n  }, [form.values.date, form.values.code]);\r\n\r\n  /**\r\n   * Handles the Submit Button on the form to calculate:\r\n   * {`regZDate` , `NumberofDays` , `88 Days`}\r\n   * to be outputed to the screen.\r\n   */\r\n  const handleOnClick = useCallback(() => {\r\n    if (isQuerySet) {\r\n      setIsQuerySet(false);\r\n    }\r\n\r\n    if (form.onSubmit()) {\r\n      setExRcvd(corrRcvdDate);\r\n      setExCycleCode(cycleCode);\r\n      c1bAxios\r\n        .post(getAPIURL({ type: 'REGZDATE' }), {\r\n          corrRcvdDate: corrRcvdDate,\r\n          cycleCode: cycleCode\r\n        })\r\n        .then((response) => {\r\n          setNextCycleDate(response.data.nextCycleDate);\r\n          setNumberOfDays(response.data.numberOfDays);\r\n          setRegZDate(response.data.regZDate);\r\n          setReminderDate(response.data.reminderDate);\r\n        })\r\n        .catch((error) => {\r\n          addMessage({\r\n            value: `API Error : ${error}`,\r\n            url: '/zdate',\r\n            type: 'error',\r\n            sticky: false\r\n          });\r\n        });\r\n    }\r\n  }, [isQuerySet, corrRcvdDate, cycleCode]);\r\n\r\n  /**\r\n   * Used to set the `className` of the Number of Days table cell...\r\n   * [If] `numOfDays` is not set, Then do not set a class.\r\n   * [ElseIf] `numOfDays` > 88 , Then give a red background.\r\n   * [Else] , give a green background.\r\n   * @param {*} numOfDays Number of Days since Next Cycle Date\r\n   */\r\n  const getColorClassName = (numOfDays: string) => {\r\n    try {\r\n      let realNumber: number = parseInt(numOfDays);\r\n      if (!realNumber) {\r\n        return '';\r\n      } else if (realNumber > 88) {\r\n        return 'bad-days';\r\n      } else {\r\n        return 'good-days';\r\n      }\r\n    } catch {\r\n      return '';\r\n    }\r\n  };\r\n\r\n  /**\r\n   * This useEffect is used onMount to check if a querystring is set in the format `06/24/2021&cyclecode=4`\r\n   * and if so then runs the program with these default values\r\n   */\r\n  useEffect(() => {\r\n    let dateQuery = parseHistorySearch(history.location.search);\r\n    if (dateQuery) {\r\n      try {\r\n        // Try to get 'Date' from QueryString\r\n        let dateString: string = dateQuery.date;\r\n        let dateArray: Array<string> = dateString.split('/');\r\n        let newDate: Date = new Date(\r\n          parseInt(dateArray[2]),\r\n          parseInt(dateArray[0]) - 1,\r\n          parseInt(dateArray[1])\r\n        );\r\n\r\n        let year: string = dateArray.pop()!;\r\n        dateArray.unshift(year);\r\n        let newDateString = dateArray.join('-');\r\n\r\n        form.setValue('date', newDateString);\r\n\r\n        // Try to get 'CycleCode' from QueryString\r\n        let cycleString: string = dateQuery.cyclecode;\r\n        let cycleNumber: number = parseInt(cycleString);\r\n        form.setValue('code', cycleNumber);\r\n\r\n        // If both are parsed successfully , set the HTML input boxes\r\n        let nodeDate = dateRef.current;\r\n        let nodeCycle = cycleRef.current;\r\n        if (nodeDate && nodeCycle) {\r\n          nodeDate.value = newDate.toISOString().substr(0, 10);\r\n          nodeCycle.value = cycleString;\r\n          setIsQuerySet(true);\r\n          setShouldSetValue(true);\r\n        }\r\n      } catch {\r\n        addMessage({\r\n          value: 'Could not read passed message, Please enter info manually',\r\n          type: 'error',\r\n          url: '/zdate',\r\n          sticky: false\r\n        });\r\n        return;\r\n      }\r\n    }\r\n  }, [history.location.search]);\r\n\r\n  const getQueriedCode = useCallback(() => {\r\n    if (shouldSetValue && cycleCode) {\r\n      return cycleCode;\r\n    } else {\r\n      return '';\r\n    }\r\n  }, [shouldSetValue, cycleCode]);\r\n\r\n  /**\r\n   * Handles exporting by creating a csv string using the information entered and retrieve from the api as of the last submit press\r\n   * Then calls the exportCsv function to trigger the download\r\n   */\r\n  const handleExport = () => {\r\n    let newRcvd = exRcvd?.toString();\r\n    let newRcvdFixed = newRcvd?.replace(/-/g, '/');\r\n    let newRcvdDate = new Date();\r\n    if (newRcvdFixed) {\r\n      newRcvdDate = new Date(newRcvdFixed);\r\n    }\r\n    let titleRow =\r\n      'Corr. Rcvd. Date,Cycle Code,Next Cycle Date,Regulation Z Date,Number of Days,Reminder Date\\n';\r\n    let contentRow = '';\r\n    contentRow += newRcvdDate.toLocaleDateString() + ',';\r\n    contentRow += exCycleCode + ',';\r\n    contentRow += nextCycleDate + ',';\r\n    contentRow += regZDate + ',';\r\n    contentRow += numberOfDays + ',';\r\n    contentRow += reminderDate;\r\n\r\n    let csvTitle = `Regulation_ZDate${new Date().toLocaleDateString('en-US')}`;\r\n    let csvString = titleRow + contentRow;\r\n    exportCsv(csvString, csvTitle);\r\n  };\r\n\r\n  /**\r\n   * Creates a copy string for use in an excel table and copies it to the user's clipboard\r\n   */\r\n  const handleCopy = () => {\r\n    let newRcvd = exRcvd?.toString();\r\n    let newRcvdFixed = newRcvd?.replace(/-/g, '/');\r\n    let newRcvdDate = new Date();\r\n    if (newRcvdFixed) {\r\n      newRcvdDate = new Date(newRcvdFixed);\r\n    }\r\n    let titleRow =\r\n      'Corr. Rcvd. Date\\tCycle Code\\tNext Cycle Date\\tRegulation Z Date\\tNumber of Days\\tReminder Date\\n';\r\n    let contentRow = '';\r\n    contentRow += newRcvdDate.toLocaleDateString() + '\\t';\r\n    contentRow += exCycleCode + '\\t';\r\n    contentRow += nextCycleDate + '\\t';\r\n    contentRow += regZDate + '\\t';\r\n    contentRow += numberOfDays + '\\t';\r\n    contentRow += reminderDate;\r\n\r\n    let copyString = titleRow + contentRow;\r\n    copyTable(copyString);\r\n  };\r\n  /**\r\n   * This `useEffect` makes sure the form is submitted if the previous useEffect's\r\n   * querystring is successfully loaded.\r\n   */\r\n  useEffect(() => {\r\n    if (isQuerySet) {\r\n      handleOnClick();\r\n    }\r\n  }, [isQuerySet, handleOnClick]);\r\n\r\n  return (\r\n    <div className=\"zdate-wrapper\">\r\n      <div className=\"zdate-main\">\r\n        <div className=\"header-div\">\r\n          <Typography variant=\"h1\">Regulation Z Date</Typography>\r\n          <div className=\"zDateHandleAndCopy\">\r\n            <ButtonComponent\r\n              label={'Export'}\r\n              onClick={() => handleExport()}\r\n              isDisabled={!numberOfDays}\r\n            />\r\n            <span>&nbsp;</span>\r\n            <ButtonComponent\r\n              label={'Copy'}\r\n              onClick={() => handleCopy()}\r\n              isDisabled={!numberOfDays}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"zdate-container card\">\r\n          <div className=\"zdate-input-container\">\r\n            <FormDisplay form={ZdateForm}>\r\n              <div className=\"date-input\">\r\n                {' '}\r\n                <RXInput control={form.controls.date} />\r\n              </div>\r\n              <div className=\"code-input\">\r\n                {' '}\r\n                <RXInput control={form.controls.code} />\r\n              </div>\r\n            </FormDisplay>\r\n            <div>\r\n              <ButtonComponent onClick={() => handleOnClick()} label=\"Submit\" />\r\n            </div>\r\n          </div>\r\n          {numberOfDays ? (\r\n            <Table>\r\n              <TableHead align=\"center\">\r\n                <TableCell>Next Cycle Date</TableCell>\r\n                <TableCell>Regulation Z Date</TableCell>\r\n                <TableCell>Number of Days</TableCell>\r\n                <TableCell>Reminder Date</TableCell>\r\n              </TableHead>\r\n              <TableBody align=\"center\">\r\n                <TableRow></TableRow>\r\n                <TableRow>\r\n                  <TableCell>\r\n                    <span data-testid=\"nextCycleDate\">{nextCycleDate}</span>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <span>{regZDate}</span>\r\n                  </TableCell>\r\n                  <TableCell className={getColorClassName(numberOfDays)}>\r\n                    <span data-testid=\"numberOfDays\">{numberOfDays}</span>\r\n                  </TableCell>\r\n                  <TableCell>{reminderDate}</TableCell>\r\n                </TableRow>\r\n              </TableBody>\r\n            </Table>\r\n          ) : (\r\n            ''\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import './index.scss';\r\nimport { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const Footer = (props: any) => {\r\n  const { setCurrRoute } = props;\r\n  const [currentVersion, setCurrentVersion] = useState('');\r\n  const [buildDate, setBuildDate] = useState('');\r\n\r\n  useEffect(() => {\r\n    setCurrentVersion('1.6.0');\r\n    setBuildDate('11/23/2021');\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"footer\">\r\n      <div data-testid=\"version\">\r\n        <Link\r\n          data-testid=\"finance\"\r\n          to={{ pathname: '/release-notes' }}\r\n          className=\"link\"\r\n          onClick={() => {\r\n            setCurrRoute('/release-notes');\r\n          }}\r\n        >\r\n          {currentVersion}\r\n        </Link>\r\n      </div>\r\n      <div data-testid=\"date\">{buildDate}</div>\r\n    </div>\r\n  );\r\n};\r\n","import { Link } from 'react-router-dom';\r\nimport './Header.scss';\r\ninterface IHeaderProps {\r\n  setCurrRoute: (value: React.SetStateAction<string>) => void;\r\n  currRoute: string;\r\n}\r\n\r\nexport const Header = (props: IHeaderProps) => {\r\n  const { setCurrRoute, currRoute } = props;\r\n  return (\r\n    <div data-testid=\"navbar\" className=\"navbar\">\r\n      <div className={currRoute === '/' ? 'CurrentRoute' : 'NotCurrentRoute'}>\r\n        <Link\r\n          data-testid=\"finance\"\r\n          to={{ pathname: '/' }}\r\n          className=\"link\"\r\n          onClick={() => {\r\n            setCurrRoute('/');\r\n          }}\r\n        >\r\n          Finance Charges\r\n        </Link>\r\n      </div>\r\n      {/* <div\r\n        className={currRoute === '/scra' ? 'CurrentRoute' : 'NotCurrentRoute'}\r\n      > */}\r\n      {/* <Link\r\n          data-testid=\"scra\"\r\n          to={{ pathname: 'scra' }}\r\n          className=\"link\"\r\n          onClick={() => {\r\n            setCurrRoute('/scra');\r\n          }}\r\n        >\r\n          SCRA Calculator\r\n        </Link> */}\r\n      {/* </div> */}\r\n      <div\r\n        className={currRoute === '/zDate' ? 'CurrentRoute' : 'NotCurrentRoute'}\r\n      >\r\n        <Link\r\n          data-testid=\"zdate\"\r\n          to={{ pathname: 'zDate' }}\r\n          className=\"link\"\r\n          onClick={() => {\r\n            setCurrRoute('/zDate');\r\n          }}\r\n        >\r\n          Regulation Z Date\r\n        </Link>\r\n      </div>\r\n      <div\r\n        className={\r\n          currRoute === '/dateCalc' ? 'CurrentRoute' : 'NotCurrentRoute'\r\n        }\r\n      >\r\n        <Link\r\n          data-testid=\"dateCalc\"\r\n          to={{ pathname: 'dateCalc' }}\r\n          className=\"link\"\r\n          onClick={() => {\r\n            setCurrRoute('/dateCalc');\r\n          }}\r\n        >\r\n          Date Calculator\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { Typography } from 'c1b-framework';\r\n\r\nimport './ReleaseNotes.scss';\r\ninterface IRelaseNotes {\r\n  release: string;\r\n  children: Array<string>;\r\n}\r\nexport const ReleaseNotes = (props: IRelaseNotes) => {\r\n  const { release, children } = props;\r\n  return (\r\n    <div className=\"release-notes-main\">\r\n      <div className=\"release-notes\">\r\n        <Typography variant=\"h4\">{release}</Typography>\r\n        <div className=\"notes card\">\r\n          {children.map((e) => {\r\n            if (e[0] === '#') {\r\n              let category = e.split('###')[1];\r\n              return (\r\n                <Typography variant=\"h5\" style={{ marginTop: '5px' }}>\r\n                  {category}\r\n                </Typography>\r\n              );\r\n            } else {\r\n              let firstSplit = e.split(')');\r\n              let secondSplit = firstSplit[0].split('(');\r\n\r\n              return (\r\n                <div>\r\n                  <span>{secondSplit[0]}</span>\r\n                  <span>{' - ' + firstSplit[1]}</span>\r\n                </div>\r\n              );\r\n            }\r\n          })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { c1bAxios } from 'c1b-framework';\r\nimport { getAPIURL } from './apiURLS';\r\n\r\nexport const financeChargeAPI = (data: any) => {\r\n  return c1bAxios.post(getAPIURL({ type: 'FINANCECHARGE' }), data);\r\n};\r\n\r\nexport const creditProtectionAPI = (data: any) => {\r\n  return c1bAxios.post(getAPIURL({ type: 'CREDITPROTECTION' }), data);\r\n};\r\nexport const financeChargesOnCreditProtectionAPI = (data: any) => {\r\n  return c1bAxios.post(getAPIURL({ type: 'FCHARGEONCPFEES' }), data);\r\n};\r\n\r\nexport const zDateAPI = (data: any) => {\r\n  return c1bAxios.post(getAPIURL({ type: 'REGZDATE' }), {\r\n    corrRcvdDate: data.corrRcvdDate,\r\n    cycleCode: data.cycleCode\r\n  });\r\n};\r\n","export const RoundToDisplay = (num: number) => {\r\n  return (Math.round(num * 100) / 100).toFixed(2);\r\n};\r\n\r\n/**\r\n * Given two dates in an array string format,\r\n * find the number of months between the two\r\n * (i.e. Jan-Feb = 1)\r\n * @param d1 Start Date: Array< ['YYYY'] ['MM'] ['DD']>\r\n * @param d2 End Date: Array< ['YYYY'] ['MM'] ['DD']>\r\n * @returns `Number` of days between d1 to d2\r\n */\r\nexport const monthDiffArr = (d1: Array<string>, d2: Array<string>) => {\r\n  let y1 = parseInt(d1[0]);\r\n  let y2 = parseInt(d2[0]);\r\n  let m1 = parseInt(d1[1]);\r\n  let m2 = parseInt(d2[1]);\r\n\r\n  let months = (y2 - y1) * 12 - m1 + m2;\r\n  return months <= 0 ? 0 : months;\r\n};\r\n\r\n/**\r\n * Returns a date set in UTC standard with consitent time = 0\r\n * @param year Real `YYYY`\r\n * @param month Real `MM`\r\n * @param day Real `DD`\r\n * @returns The UTC date\r\n */\r\nexport const getUTCDate = (\r\n  year: number | string,\r\n  month: number | string,\r\n  day: number | string\r\n) => {\r\n  let realYear = typeof year === 'number' ? year : parseInt(year);\r\n  let realMonth = typeof month === 'number' ? month : parseInt(month);\r\n  let realDay = typeof day === 'number' ? day : parseInt(day);\r\n\r\n  return new Date(Date.UTC(realYear, realMonth - 1, realDay, 0, 0, 0, 0));\r\n};\r\n","import { createID } from 'c1b-framework/lib/utils';\r\n\r\nimport {\r\n  creditProtectionAPI,\r\n  financeChargeAPI,\r\n  financeChargesOnCreditProtectionAPI\r\n} from '../../APIs/apiCall';\r\nimport { MILLISECOND_DAY } from '../../utils';\r\nimport { getUTCDate, monthDiffArr } from '../utils';\r\nimport {\r\n  ICreditProtection,\r\n  IFinanceCharge,\r\n  IFinanceObject\r\n} from './FinanceChargeCalc';\r\n\r\n/**\r\n * Reduces the `fcArray` and `cpArray` to specified totals\r\n * @param currentState The current chargesState\r\n * @returns The updated `currntState`\r\n */\r\nexport const UpdateTotals = (currentState: IFinanceObject): IFinanceObject => {\r\n  let totalCPObject = currentState.cpArray.reduce(\r\n    (acc: any, v: any) => {\r\n      acc.totalFee += v.creditProtectionFee;\r\n\r\n      acc.totalInterest += v.financeChargesOnCreditProtectionFees;\r\n\r\n      acc.totalAdjustment +=\r\n        v.creditProtectionFee + v.financeChargesOnCreditProtectionFees;\r\n      return acc;\r\n    },\r\n    //Initial Value for `reduce`\r\n    {\r\n      totalFee: 0,\r\n      totalInterest: 0,\r\n      totalAdjustment: 0\r\n    }\r\n  );\r\n\r\n  let totalFCObject = currentState.fcArray.reduce(\r\n    (acc: any, v: any) => {\r\n      return {\r\n        totalTransactions: acc.totalTransactions + v.transactionAmount,\r\n        totalFee: acc.totalFee + v.financeCharge\r\n      };\r\n    },\r\n    //Initial Value for `reduce`\r\n    {\r\n      totalTransactions: 0,\r\n      totalFee: 0\r\n    }\r\n  );\r\n\r\n  currentState.fcTotals = totalFCObject;\r\n  currentState.cpTotals = totalCPObject;\r\n  return currentState;\r\n};\r\n\r\n/**\r\n * Calls the api to get a single finance charge and returns it\r\n * @param args The user data entered when adding a finance charge\r\n * @param addMessage The toast addMessage function\r\n * @returns An `IFinanceCharge`\r\n */\r\nconst getAFinanceCharge = async (args: any, addMessage: any) => {\r\n  let securityAdjustmentDate = new Date(args.securityAdjustmentDate);\r\n  let transactionPostDate = new Date(args.transactionPostDate);\r\n  let daysBetween =\r\n    (securityAdjustmentDate.getTime() - transactionPostDate.getTime()) /\r\n    MILLISECOND_DAY;\r\n\r\n  let result = await financeChargeAPI(args).catch((error: Error) => {\r\n    addMessage({\r\n      value: `API Error : ${error}`,\r\n      url: '/',\r\n      type: 'error',\r\n      sticky: false\r\n    });\r\n  });\r\n\r\n  return {\r\n    ...args,\r\n    financeCharge: result.data.financeCharge,\r\n    days: daysBetween\r\n  };\r\n};\r\n\r\nexport const getCurrentDateWithLATimezone = () => {\r\n  return new Date(\r\n    Intl.DateTimeFormat('en-us', {\r\n      timeZone: 'America/Los_Angeles'\r\n    }).format(new Date().setHours(0, 0, 0, 0))\r\n  )\r\n    .toISOString()\r\n    .substr(0, 10);\r\n};\r\n\r\nexport const convertCurrentDateWithLATimezone = (date: string) => {\r\n  let splitDate = date.split('-');\r\n  return `${splitDate[1]}/${splitDate[2]}/${splitDate[0]}`;\r\n};\r\n\r\nexport const getCPFraudDate = (statementDate: string) => {\r\n  return getCurrentDateWithLATimezone();\r\n};\r\n\r\nexport const getNumberOfStatements = (charge: {\r\n  highestAPR: number;\r\n  id: string;\r\n  securityAdjustmentDate: string;\r\n  statementDate?: string;\r\n  transactionAmount: number;\r\n  transactionPostDate: string;\r\n  manualAdd?: true;\r\n}) => {\r\n  if (!charge.manualAdd) {\r\n    return 1;\r\n  } else {\r\n\r\n    let splitStatement = charge.statementDate\r\n      ? charge.statementDate.split('-')\r\n      : charge.transactionPostDate.split('-');\r\n\r\n    let splitFraudAdjustment = charge.securityAdjustmentDate.split('-');\r\n\r\n    if (+splitFraudAdjustment[2] > +splitStatement[2]) {\r\n      return monthDiffArr(splitStatement, splitFraudAdjustment) + 1;\r\n    } else {\r\n      return monthDiffArr(splitStatement, splitFraudAdjustment);\r\n    }\r\n  }\r\n};\r\n/**\r\n * Calls the api's to get a \"credit protection fee\" and \"finance charges on credit protections\"\r\n * @param args The user data entered when adding a credit protection\r\n * @param date The statementDate\r\n * @param addMessage The toast addMessage function\r\n * @returns An `ICreditProtection`\r\n */\r\nconst getACreditProtectionCharge = async (\r\n  args: any,\r\n  date: any,\r\n  addMessage: any\r\n) => {\r\n  let pushData = { ...args };\r\n  let firstCallData = {\r\n    transactionAmount: args.transactionAmount,\r\n    numberOfStatements: getNumberOfStatements(args)\r\n  };\r\n  let finalCallData = {\r\n    transactionDetails: [\r\n      {\r\n        transactionAmount: args.transactionAmount,\r\n        securityAdjustmentDate: getCPFraudDate(date),\r\n        statementDate: date\r\n      }\r\n    ],\r\n    highestAPR: args.highestAPR\r\n  };\r\n\r\n  let firstReturnData = await creditProtectionAPI(firstCallData).catch(\r\n    (error) => {\r\n      addMessage({\r\n        value: `API Error : ${error}`,\r\n        url: '/',\r\n        type: 'error',\r\n        sticky: false\r\n      });\r\n    }\r\n  );\r\n\r\n  if (firstReturnData) {\r\n    let finalReturnData = await financeChargesOnCreditProtectionAPI(\r\n      finalCallData\r\n    ).catch((error) => {\r\n      addMessage({\r\n        value: `API Error : ${error}`,\r\n        url: '/',\r\n        type: 'error',\r\n        sticky: false\r\n      });\r\n    });\r\n\r\n    if (finalReturnData) {\r\n      let cpFee = firstReturnData.data.creditProtectionFee;\r\n      let fcOcp = finalReturnData.data.financeChargesOnCreditProtectionFees;\r\n\r\n      pushData = {\r\n        ...pushData,\r\n        ...finalCallData.transactionDetails[0],\r\n        creditProtectionFee: cpFee,\r\n        financeChargesOnCreditProtectionFees: fcOcp,\r\n        totalAdjustmentCharge: fcOcp + cpFee\r\n      };\r\n    }\r\n  }\r\n  return pushData;\r\n};\r\n\r\n/**\r\n * This function adds a finance charge to the `fcArray`\r\n * and if a id is passed, it is preserved , else it is give a new one\r\n * @param fcArray The array holding the finance charges\r\n * @param chargeArgs The user data entered to create a Finance Charge\r\n * @param addMessage\r\n * @param id ? The `id` of the charge to preserve\r\n * @returns The updated Array of IFinanceCharges\r\n */\r\nexport const simpleFCAdd = async (\r\n  fcArray: any,\r\n  chargeArgs: any,\r\n  addMessage: any,\r\n  id?: any\r\n) => {\r\n  let tmpFCArray = fcArray.slice();\r\n  if (!id) {\r\n    id = createID();\r\n  }\r\n  const pushData = await getAFinanceCharge(chargeArgs, addMessage);\r\n  if (pushData) {\r\n    tmpFCArray.push({ ...pushData, id: id });\r\n  }\r\n  return tmpFCArray;\r\n};\r\n\r\n/**\r\n * This function replaces a finance charge with the a new one based on the updated `chargeArgs` data\r\n * @param currentState The current chargesState of the program\r\n * @param chargeArgs The edited data that needs to be rerun\r\n * @returns The updated Array of IFinanceCharges\r\n */\r\nexport const simpleFCEdit = async (\r\n  currentState: IFinanceObject,\r\n  chargeArgs: any\r\n) => {\r\n  let chargeIndex = -1;\r\n  let tmpFCArray = currentState.fcArray.slice();\r\n  tmpFCArray.find((e: any, i: number) => {\r\n    if (e.id === chargeArgs.id) {\r\n      chargeIndex = i;\r\n      return true;\r\n    }\r\n    return false;\r\n  });\r\n  let pushData = await getAFinanceCharge(chargeArgs, currentState.addMessage);\r\n  tmpFCArray.splice(chargeIndex, 1, pushData);\r\n\r\n  return tmpFCArray;\r\n};\r\n\r\n/**\r\n * This function adds a finance charge to the `cpArray`\r\n * @param currentState The currentState of the program\r\n * @param chargeArgs All the data needed to create a credit protection (including statementDate)\r\n * @param date ? Manually specified statement date (Not from a user)\r\n * @returns The updated Array of ICreditProtections\r\n */\r\nexport const simpleCPAdd = async (\r\n  currentState: any,\r\n  chargeArgs: any,\r\n  date?: any\r\n) => {\r\n\r\n  let tmpCPArray = currentState.cpArray.slice();\r\n\r\n  let realDate = date ? date : chargeArgs.statementDate; // Handle Optional Arguments\r\n\r\n  let pushData = await getACreditProtectionCharge(\r\n    chargeArgs,\r\n    realDate,\r\n    currentState.addMessage\r\n  );\r\n  let id = chargeArgs.id ? chargeArgs.id : createID();\r\n  tmpCPArray.push({ ...pushData, id: id });\r\n\r\n  return tmpCPArray;\r\n};\r\n\r\n/**\r\n * For each `dates` create a credit protection line with the `chargeArgs`\r\n * @param currentState The currentState of the program\r\n * @param chargeArgs The user entered data to create a credit protection\r\n * @param dates An array of Statement Dates to generate multiple credit protecions\r\n * @returns The updated Array of ICreditProtections\r\n */\r\nexport const multipleCPAdd = async (\r\n  currentState: any,\r\n  chargeArgs: any,\r\n  dates: any\r\n) => {\r\n  let tmpCPArray = currentState.cpArray.slice();\r\n\r\n  for (let i = 0; i < dates.length; i++) {\r\n    tmpCPArray = await simpleCPAdd(\r\n      { ...currentState, cpArray: tmpCPArray },\r\n      chargeArgs,\r\n      dates[i]\r\n    );\r\n  }\r\n  return tmpCPArray;\r\n};\r\n\r\n/**\r\n * This function simple gets a new credit protection and replaces the specified charge\r\n * @param currentState The current state of the program\r\n * @param newCharge The updated user data\r\n * @param index The index of the charge to edit\r\n * @returns The updated Array of ICreditProtection\r\n */\r\nexport const simpleCPEdit = async (\r\n  currentState: any,\r\n  newCharge: any,\r\n  index: any\r\n) => {\r\n  let tmpCPArray = currentState.cpArray.slice();\r\n\r\n  let pushData = await getACreditProtectionCharge(\r\n    newCharge,\r\n    newCharge.statementDate,\r\n    currentState.addMessage\r\n  );\r\n  tmpCPArray.splice(index, 1, { ...pushData, ...newCharge });\r\n  return tmpCPArray;\r\n};\r\n\r\n/**\r\n * This function looks at the currentState's `cycleCode` and generates all credit protections that a\r\n * finance charge would create. If not `fromToggle` then also remove current credit protections that\r\n * were tied to a finance charge\r\n * in the currentState's cpArray. If not `fromToggle` also\r\n * @param currentState The currentState object\r\n * @param fromToggle If the call was made by Credit Protection being toggled `On`\r\n * @returns The updated Array of ICreditProtections\r\n */\r\nexport const updateCpCharges = async (\r\n  currentState: any,\r\n  fromToggle: boolean\r\n) => {\r\n  const { fcArray } = currentState;\r\n  let newCPArray = currentState.cpArray.slice();\r\n  let cpPushArray: Array<ICreditProtection> = [];\r\n\r\n  for (let i = 0; i < fcArray.length; i++) {\r\n    let dates = getNewCPDates(fcArray[i], currentState.cycleCode as number);\r\n    cpPushArray = await multipleCPAdd(\r\n      { ...currentState, cpArray: cpPushArray },\r\n      fcArray[i],\r\n      dates\r\n    );\r\n    if (!fromToggle) {\r\n      newCPArray = newCPArray.filter((cpCharge: ICreditProtection) => {\r\n        if (fcArray[i].id === cpCharge.id) {\r\n          return false;\r\n        } else {\r\n          return true;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  return newCPArray.concat([], cpPushArray);\r\n};\r\n\r\n/**\r\n * This function takes in an edited finance charge, finds all related credit protections\r\n * regenerates them, and replaces the old ones.\r\n * @param currentState The current chargesState\r\n * @param newCharge New Finance Charge edited data\r\n * @returns Array of Credit Protections\r\n */\r\nexport const multipleCPEdit = async (currentState: any, newCharge: any) => {\r\n  let id = newCharge.id;\r\n  let tmpCPArray = currentState.cpArray.slice();\r\n\r\n  let newDates = getNewCPDates(newCharge, currentState.cycleCode);\r\n\r\n  let cpChargesToEdit: Array<any> = [];\r\n\r\n  let newCPArray = tmpCPArray.filter((e: any, index: number) => {\r\n    if (e.id === id) {\r\n      cpChargesToEdit.push({ statementDate: e.statementDate, index: index });\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  });\r\n\r\n  let pushData = [];\r\n  for (let i = 0; i < newDates.length; i++) {\r\n    pushData.push(\r\n      await getACreditProtectionCharge(\r\n        newCharge,\r\n        newDates[i],\r\n        currentState.addMessage\r\n      )\r\n    );\r\n  }\r\n\r\n  if (newCPArray.length) {\r\n    return newCPArray.concat(pushData);\r\n  } else {\r\n    return pushData;\r\n  }\r\n};\r\n\r\n/**\r\n * Removed a credit protection and finds all charges with the same id to also remvoe\r\n * @param currentState The current chargesState\r\n * @param chargeToRemove\r\n * @returns Updated currentState\r\n */\r\nexport const RemoveCpMultiple = (\r\n  currentState: IFinanceObject,\r\n  chargeToRemove: any\r\n) => {\r\n  let tmpCPArray = currentState.cpArray.slice();\r\n  tmpCPArray = tmpCPArray.filter((charge: any) => {\r\n    if (charge.id === chargeToRemove.id) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  });\r\n  currentState.cpArray = tmpCPArray;\r\n  return currentState;\r\n};\r\n\r\n/**\r\n * This function generates the dates that should be generated based on a financeCharge and cycleCode\r\n * It looks at the `transactionPostDate` and `securityAdjustmentDate` to find out what the\r\n * `firstStatement` and `lastStatement` should be, respectively.\r\n * If `firstStatement` === `lastStatement` => This is the only statements to generate\r\n * If `firstStatement` > `lastStatement` => There is NO statemenets to generate\r\n * If `firstStatement` < `lastStatement` => There is multiple statements to generate\r\n *\r\n * @param financeCharge A single `IFinanceCharge` object\r\n * @param cycleCode The number `cycleCode` to determine the statement date\r\n * @returns An `Array` of Dates in the `string` format `YYYY-MM-DD`\r\n */\r\nexport const getNewCPDates = (\r\n  financeCharge: IFinanceCharge,\r\n  cycleCode: number\r\n) => {\r\n  let { transactionPostDate, securityAdjustmentDate } = financeCharge;\r\n\r\n  let postDateArray = transactionPostDate.split('-');\r\n  let postDate = getUTCDate(\r\n    postDateArray[0],\r\n    postDateArray[1],\r\n    postDateArray[2]\r\n  );\r\n\r\n  let fraudDateArray = securityAdjustmentDate.split('-');\r\n  let fraudAdjustmenDate = new Date(getCurrentDateWithLATimezone());\r\n\r\n\r\n  // Starts as months between transactionPostDate & securityAdjustmentDate\r\n  // Becomes months between firstStatementDate & lastStatementDate\r\n  let cyclesBetween = monthDiffArr(postDateArray, fraudDateArray) + 1;\r\n\r\n  // Find and adjust the first statement date\r\n  let firstStatementDate = () => {\r\n    let month = parseInt(postDateArray[1]);\r\n    if (parseInt(postDateArray[2]) >= cycleCode) {\r\n      cyclesBetween -= 1;\r\n      month += 1;\r\n    }\r\n    return getUTCDate(postDateArray[0], month, cycleCode);\r\n  };\r\n  let firstStatement = firstStatementDate();\r\n  if (firstStatement <= postDate) {\r\n    firstStatement.setUTCMonth(firstStatement.getUTCMonth() + 1);\r\n    cyclesBetween -= 1;\r\n  }\r\n\r\n  // Find and adjust the last statement date\r\n  let lastStatementDate = () => {\r\n    let month = parseInt(fraudDateArray[1]);\r\n    if (parseInt(fraudDateArray[2]) < cycleCode) {\r\n      cyclesBetween -= 1;\r\n      month -= 1;\r\n    }\r\n    return getUTCDate(fraudDateArray[0], month, cycleCode);\r\n  };\r\n  let lastStatement = lastStatementDate();\r\n  if (lastStatement > fraudAdjustmenDate) {\r\n    lastStatement.setUTCMonth(lastStatement.getUTCMonth() - 1);\r\n    cyclesBetween -= 1;\r\n  }\r\n\r\n  // BREAKOUT CONDITIONS\r\n  if (firstStatement > lastStatement) {\r\n    return [];\r\n  }\r\n  if (firstStatement.getTime() === lastStatement.getTime()) {\r\n    return [firstStatement.toISOString().split('T')[0]];\r\n  }\r\n  // END BREAKOUT\r\n\r\n  // Generate dates for number of months between\r\n  let pushArray = [];\r\n  for (let i = 0; i < cyclesBetween; i++) {\r\n    let tempStatement = new Date(firstStatement);\r\n    let newStatement = new Date(\r\n      tempStatement.setUTCMonth(firstStatement.getUTCMonth() + i)\r\n    );\r\n    pushArray.push(\r\n      getUTCDate(\r\n        newStatement.getFullYear(),\r\n        newStatement.getUTCMonth() + 1,\r\n        cycleCode\r\n      )\r\n        .toISOString()\r\n        .split('T')[0]\r\n    );\r\n  }\r\n\r\n  return pushArray;\r\n};\r\n","import { ButtonComponent, ToastContext } from 'c1b-framework';\r\nimport { useContext } from 'react';\r\nimport { copyTable, exportCsv } from '../../../utils';\r\nimport { RoundToDisplay } from '../../utils';\r\n\r\nexport const ControlButtons = (props: any) => {\r\n  const { onClear, currentState } = props;\r\n\r\n  const { fcArray, cpArray, cpTotals, fcTotals, cycleCode } = currentState;\r\n\r\n  const { totalTransactions: fCTotalTransactions, totalFee: fCTotalFee } =\r\n    fcTotals;\r\n\r\n  const {\r\n    totalFee: cPTotalFee,\r\n    totalInterest: cPTotalInterest,\r\n    totalAdjustment: cPTotalAdjustment\r\n  } = cpTotals;\r\n\r\n  const { addMessage } = useContext(ToastContext);\r\n  /**\r\n   *\r\n   * Creates a string to use with copyTable\r\n   */\r\n  const runPrimaryButton = (isExported: boolean) => {\r\n    let dateString = new Date().toISOString().split('T');\r\n    let csvTitle = `Finance_Calculator_${dateString[0]}`;\r\n\r\n    let spacer = isExported ? ',' : '\\t';\r\n\r\n    let startCopy = `Pricing Strategy %${spacer}Post Date of Transaction${spacer}Total Purchase${spacer}Fraud Adjustment${spacer}Total${spacer}Days\\n`;\r\n    fcArray.forEach((e: any) => {\r\n      let line = ``;\r\n      line += e.highestAPR;\r\n      line += `${spacer}`;\r\n      line += e.transactionPostDate;\r\n      line += `${spacer}`;\r\n      line += parseFloat(RoundToDisplay(e.transactionAmount));\r\n      line += `${spacer}`;\r\n      line += e.securityAdjustmentDate;\r\n      line += `${spacer}`;\r\n      line += RoundToDisplay(e.financeCharge);\r\n      line += `${spacer}`;\r\n      line += e.days;\r\n      line += `\\n`;\r\n      startCopy += line;\r\n    });\r\n\r\n    let totalFCLine = `Total:${spacer}`;\r\n    totalFCLine += ` ${spacer}`;\r\n    totalFCLine += RoundToDisplay(fCTotalTransactions) + `${spacer}`;\r\n    totalFCLine += ` ${spacer}`;\r\n    totalFCLine += RoundToDisplay(fCTotalFee) + `${spacer}`;\r\n    totalFCLine += ` ${spacer}`;\r\n    totalFCLine += `\\n`;\r\n    startCopy += totalFCLine;\r\n\r\n    let cpCopyString = '\\n';\r\n    if (cpArray.length) {\r\n      cpCopyString += `Pricing Strategy %${spacer}Cycle Code${spacer}Statement Date${spacer}Fraud Amount${spacer}Credit Protection Fee${spacer}CP Adjustment Interest${spacer}Adjustment${spacer}Total Adjustment\\n`;\r\n      let line = '';\r\n      cpArray.forEach((e: any) => {\r\n        line += e.highestAPR;\r\n        line += `${spacer}`;\r\n        line += cycleCode;\r\n        line += `${spacer}`;\r\n        line += e.statementDate;\r\n        line += `${spacer}`;\r\n        line += e.transactionAmount;\r\n        line += `${spacer}`;\r\n        line += RoundToDisplay(e.creditProtectionFee);\r\n        line += `${spacer}`;\r\n        line += RoundToDisplay(e.financeChargesOnCreditProtectionFees);\r\n        line += `${spacer}`;\r\n        line += e.securityAdjustmentDate;\r\n        line += `${spacer}`;\r\n        let total =\r\n          e.creditProtectionFee + e.financeChargesOnCreditProtectionFees;\r\n        line += RoundToDisplay(total);\r\n        line += `\\n`;\r\n      });\r\n      cpCopyString += line;\r\n      cpCopyString += `Total:${spacer}${spacer}${spacer}${spacer}${RoundToDisplay(\r\n        cPTotalFee\r\n      )}${spacer}${RoundToDisplay(\r\n        cPTotalInterest\r\n      )}${spacer}${spacer}${RoundToDisplay(cPTotalAdjustment)}\\n`;\r\n    }\r\n\r\n    let totalChargeBackArea = `\\n`;\r\n    totalChargeBackArea += `Amount of Finance Charge Adjustment:${spacer}`;\r\n    totalChargeBackArea += RoundToDisplay(fCTotalFee);\r\n    totalChargeBackArea += `\\n`;\r\n    totalChargeBackArea += `Amount of Credit Protection fees:${spacer}`;\r\n    totalChargeBackArea += RoundToDisplay(cPTotalFee);\r\n    totalChargeBackArea += `\\n`;\r\n    totalChargeBackArea += `Amount of CP Adjustment Interest:${spacer}`;\r\n    totalChargeBackArea += RoundToDisplay(cPTotalInterest);\r\n    totalChargeBackArea += `\\n`;\r\n    totalChargeBackArea += `Amount of Credit Due:${spacer}`;\r\n    totalChargeBackArea +=\r\n      parseFloat(RoundToDisplay(fCTotalFee)) +\r\n      parseFloat(RoundToDisplay(cPTotalAdjustment));\r\n    let copyFinalTemp = ``;\r\n    copyFinalTemp += startCopy;\r\n    copyFinalTemp += cpCopyString;\r\n    copyFinalTemp += totalChargeBackArea;\r\n    if (isExported) {\r\n      exportCsv(copyFinalTemp, csvTitle);\r\n    } else {\r\n      copyTable(copyFinalTemp);\r\n      addMessage({\r\n        value: 'Copied to Clipboard',\r\n        type: 'success',\r\n        url: '/',\r\n        sticky: false\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"fc-buttons\">\r\n      <ButtonComponent\r\n        label=\"Clear All\"\r\n        type=\"secondary\"\r\n        onClick={() => onClear()}\r\n      />\r\n      <ButtonComponent\r\n        label=\"Copy Table\"\r\n        onClick={() => runPrimaryButton(false)}\r\n        isDisabled={fcArray.length || cpArray.length ? false : true}\r\n      />\r\n      <ButtonComponent\r\n        label=\"Export\"\r\n        onClick={() => runPrimaryButton(true)}\r\n        isDisabled={fcArray.length || cpArray.length ? false : true}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import { Control, Form, VALIDATIONS } from 'c1b-framework';\r\n\r\nconst pricingStrategy = Control(\r\n  'pricingStrategy',\r\n  '',\r\n  'Pricing Strategy (%)',\r\n  'number',\r\n  {\r\n    validators: [\r\n      VALIDATIONS.required,\r\n      VALIDATIONS.minValue(0),\r\n      VALIDATIONS.maxValue(100),\r\n      VALIDATIONS.pattern(\r\n        new RegExp(/^\\d{1,2}\\.\\d{1,2}$|^\\.\\d{1,2}$|^\\d{1,3}$/i),\r\n        'percentage'\r\n      )\r\n    ],\r\n    errorMessages: {\r\n      required: 'This field is required',\r\n      percentage: 'The value must be a percentage with at most 2 decimals',\r\n      minValue: 'Minimum value 1',\r\n      maxValue: 'Maximum value 100'\r\n    }\r\n  }\r\n);\r\n\r\nconst fraudAdjustment = Control(\r\n  'fraudAdjustment',\r\n  '',\r\n  'Fraud Adjustment',\r\n  'date',\r\n  {\r\n    validators: [VALIDATIONS.required],\r\n    errorMessages: {\r\n      required: 'This field is required'\r\n    },\r\n    isDisabled: true\r\n  }\r\n);\r\nconst totalPurchase = Control(\r\n  'totalPurchase',\r\n  '',\r\n  'Total Purchase ($)',\r\n  'number',\r\n  {\r\n    validators: [\r\n      VALIDATIONS.required,\r\n      VALIDATIONS.minValue(0),\r\n      VALIDATIONS.pattern(\r\n        new RegExp(/^\\d+$|^\\d+\\.\\d{1,2}$|^\\.\\d{1,2}$/i),\r\n        'currency'\r\n      )\r\n    ],\r\n    errorMessages: {\r\n      required: 'This field is required',\r\n      minValue: 'Minimum value 0',\r\n      currency: 'Value can only have at most 2 decimal digits'\r\n    }\r\n  }\r\n);\r\n\r\nconst statementDate = Control('statementDate', '', 'Statement Date', 'date', {\r\n  validators: [VALIDATIONS.required],\r\n  errorMessages: {\r\n    required: 'This field is required'\r\n  }\r\n});\r\n\r\nconst CPForm = new Form('CPForm', [\r\n  pricingStrategy,\r\n  totalPurchase,\r\n  fraudAdjustment,\r\n\r\n  statementDate\r\n]);\r\n\r\nexport default CPForm;\r\n","import { ButtonComponent, FormDisplay, RXInput, useForm } from 'c1b-framework';\r\nimport { useEffect } from 'react';\r\nimport { getCurrentDateWithLATimezone } from '../FinanceChargeCalc.utils';\r\nimport CPForm from './CPInputs.form';\r\n\r\nexport const CPInputs = (props: any) => {\r\n  const { handleCpAdd, clearClicked } = props;\r\n  const [form] = useForm(CPForm);\r\n\r\n  useEffect(() => {\r\n    form.reset();\r\n  }, [clearClicked]);\r\n\r\n  /**\r\n   * This useEffect is run when the postDateOfTransaction is changed to track the minDate for fraudAdjustmentDate\r\n   */\r\n  useEffect(() => {\r\n    let minDate = form.getValue('statementDate');\r\n\r\n    if (minDate) {\r\n      form.controls.fraudAdjustment.minDate = minDate;\r\n      form.setValue('fraudAdjustment', getCurrentDateWithLATimezone());\r\n      form.setIsDisabled('fraudAdjustment', false);\r\n    }\r\n  }, [form.values.statementDate]);\r\n\r\n  /**\r\n   * When the user clicks Add , if the form isValid , gather all the inputs\r\n   * and call the handlCpAdd to add the credit protection row\r\n   */\r\n  const handleAdd = () => {\r\n    if (form.onSubmit()) {\r\n      let data = {\r\n        transactionAmount: form.getValue('totalPurchase'),\r\n        securityAdjustmentDate: form.getValue('fraudAdjustment'),\r\n        statementDate: form.getValue('statementDate'),\r\n        highestAPR: form.getValue('pricingStrategy')\r\n      };\r\n\r\n      handleCpAdd(data);\r\n\r\n      form.resetControl(form.controls.totalPurchase);\r\n      form.resetControl(form.controls.fraudAdjustment);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FormDisplay form={form}>\r\n      <div className=\"cp-control-inputs\">\r\n        <RXInput control={form.controls.statementDate} />\r\n        <RXInput control={form.controls.pricingStrategy} />\r\n        <RXInput control={form.controls.totalPurchase} />\r\n        {/* <RXInput control={form.controls.fraudAdjustment} /> */}\r\n      </div>\r\n      <ButtonComponent label=\"Add\" onClick={() => handleAdd()} />\r\n    </FormDisplay>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/check-bold-green.0df607c3.svg\";","export default __webpack_public_path__ + \"static/media/close-thick-red.34e37604.svg\";","import {\r\n  Control,\r\n  Form,\r\n  FormDisplay,\r\n  RXInput,\r\n  TableCell,\r\n  TableRow,\r\n  useForm,\r\n  VALIDATIONS\r\n} from 'c1b-framework';\r\nimport { Fragment, useEffect, useState } from 'react';\r\nimport checkMark from '../../../../assets/check-bold-green.svg';\r\nimport redX from '../../../../assets/close-thick-red.svg';\r\nimport { fixDateString } from '../../../../utils';\r\nimport { RoundToDisplay } from '../../../utils';\r\nimport {\r\n  convertCurrentDateWithLATimezone,\r\n  getCurrentDateWithLATimezone\r\n} from '../../FinanceChargeCalc.utils';\r\nimport '../creditProtectionTable.scss';\r\n\r\n/**\r\n * Returns a row representing the data for an item in the credit protections array with edit and remove functionality.\r\n * @param props e: the element of the credit protection ray this row represents\r\n * index: the index of this item in the credit protection array\r\n * onRemove: the function to remove the item from the Array\r\n * onEdit: the function to edit the item in the array\r\n */\r\nexport const CreditProtectionTableRow = (props: ICreditProtectionTableRow) => {\r\n  const { e, index, onRemove, onEdit } = props;\r\n  const [editMode, setEditMode] = useState(false); //whether the row is currently being edited\r\n  const [showError, setShowError] = useState(false);\r\n  /**\r\n   * Form control for price strategy\r\n   */\r\n  const pricingStrategy = Control(\r\n    'pricingStrategy',\r\n    e.highestAPR,\r\n    'Pricing Strategy (%)',\r\n    'number',\r\n    {\r\n      validators: [\r\n        VALIDATIONS.required,\r\n        VALIDATIONS.minValue(1),\r\n        VALIDATIONS.maxValue(100),\r\n        VALIDATIONS.pattern(\r\n          new RegExp(/^\\d{1,2}\\.\\d{1,2}$|^\\.\\d{1,2}$|^\\d{1,3}$/i),\r\n          'percentage'\r\n        )\r\n      ],\r\n      errorMessages: {\r\n        required: 'This field is required',\r\n        percentage: 'The value must be a percentage with at most 2 decimals',\r\n        minValue: 'Minimum value 1',\r\n        maxValue: 'Maximum value 100'\r\n      }\r\n    }\r\n  );\r\n\r\n  // /**\r\n  //  * Form control for Statement Date\r\n  //  */\r\n\r\n  const statementDate = Control(\r\n    'statementDate',\r\n    e.statementDate,\r\n    'Statement Date',\r\n    'date',\r\n    {\r\n      validators: [VALIDATIONS.required],\r\n      errorMessages: {\r\n        required: 'This field is required'\r\n      }\r\n    }\r\n  );\r\n\r\n  /**\r\n   * Form control for fraud adjustment date\r\n   */\r\n  const fraudAdjustment = Control(\r\n    'fraudAdjustment',\r\n    e.securityAdjustmentDate,\r\n    'Fraud Adjustment',\r\n    'date',\r\n    {\r\n      minDate: e.statementDate,\r\n      validators: [VALIDATIONS.required],\r\n      errorMessages: {\r\n        required: 'This field is required',\r\n        minValue: 'Fraud Adjustment Date must be after Post Date'\r\n      }\r\n    }\r\n  );\r\n\r\n  /**\r\n   * Form control for fraud amount\r\n   */\r\n  const totalPurchase = Control(\r\n    'totalPurchase',\r\n    e.transactionAmount,\r\n    'Fraud Amount',\r\n    'number',\r\n    {\r\n      validators: [\r\n        VALIDATIONS.required,\r\n        VALIDATIONS.minValue(0),\r\n        VALIDATIONS.pattern(\r\n          new RegExp(/^\\d+$|^\\d+\\.\\d{1,2}$|^\\.\\d{1,2}$/i),\r\n          'currency'\r\n        )\r\n      ],\r\n      errorMessages: {\r\n        required: 'This field is required',\r\n        minValue: 'Minimum value 0',\r\n        currency: 'Value can only have at most 2 decimal digits'\r\n      }\r\n    }\r\n  );\r\n\r\n  /**\r\n   * Deisgnates a from using the above controls\r\n   */\r\n  const [form] = useForm(\r\n    new Form(\r\n      'CreditProtectionTableRowForm' + index,\r\n      [pricingStrategy, statementDate, fraudAdjustment, totalPurchase],\r\n      {}\r\n    )\r\n  );\r\n\r\n  /**\r\n   * This useEffect is run when the postDateOfTransaction is changed to track the minDate for fraudAdjustmentDate\r\n   */\r\n  useEffect(() => {\r\n    let minDate = form.getValue('statementDate');\r\n    let faDate = new Date(form.getValue('fraudAdjustment'));\r\n\r\n    if (minDate) {\r\n      form.controls.fraudAdjustment.minDate = minDate;\r\n      form.controls.fraudAdjustment.maxDate = getCurrentDateWithLATimezone();\r\n      form.setIsDisabled('fraudAdjustment', false);\r\n    }\r\n    if (minDate > faDate) {\r\n      setShowError(true);\r\n    } else {\r\n      setShowError(false);\r\n    }\r\n  }, [form.values.statementDate, form.values.fraudAdjustment]);\r\n\r\n  /**\r\n   * Triggered on clicking remove. Sets the editMode to true\r\n   */\r\n  const startEdit = () => {\r\n    setEditMode(true);\r\n  };\r\n\r\n  /**\r\n   * on clicking the confirm edit button, creates a new object from the input values and triggers the inherited onEdit function with it. Then sets editMode to false\r\n   */\r\n  const completeEdit = () => {\r\n    if (form.onSubmit()) {\r\n      let minDate = new Date(form.getValue('statementDate'));\r\n      let faDate = new Date(form.getValue('fraudAdjustment'));\r\n\r\n      if (minDate > faDate) {\r\n        setShowError(true);\r\n      } else {\r\n        setShowError(false);\r\n\r\n        let editObj = {\r\n          highestAPR: form.controls.pricingStrategy.value,\r\n          statementDate: form.controls.statementDate.value,\r\n          transactionAmount: form.controls.totalPurchase.value,\r\n          securityAdjustmentDate: form.controls.fraudAdjustment.value,\r\n          id: e.id\r\n        };\r\n        onEdit(editObj, index);\r\n        setEditMode(false);\r\n      }\r\n    }\r\n  };\r\n  /**\r\n   * reverts each input field to its original state and sets edit mode to off\r\n   */\r\n  const cancelEdit = () => {\r\n    form.reset();\r\n    setShowError(false);\r\n    setEditMode(false);\r\n  };\r\n\r\n  /**\r\n   * returns the edit cell based on the rows editMode. If the cell is not in edit mode, returns an Edit button that will set the edit mode to true.\r\n   * If the cell is in edit mode, returns two buttons, the left of which will confirm the edit and the right of which will cancel the edit\r\n   */\r\n  const determineEditCell = () => {\r\n    if (editMode) {\r\n      return (\r\n        <div>\r\n          <span\r\n            onClick={() => completeEdit()}\r\n            data-testid=\"protCheckMarkSpace\"\r\n            className=\"editHover\"\r\n          >\r\n            <img src={checkMark} alt=\"Confirm Edit\" />\r\n          </span>\r\n          <span>&nbsp;</span>\r\n          <span onClick={() => cancelEdit()} className=\"editHover\">\r\n            <img src={redX} alt=\"Cancel Edit\" />\r\n          </span>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <span\r\n          onClick={() => startEdit()}\r\n          data-testid=\"creditProtectionEditCell\"\r\n          className=\"editHover\"\r\n        >\r\n          Edit\r\n        </span>\r\n      );\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Determines the pricing strategy cell. If the editMode is false, will display the pricing strategy.\r\n   * If the edit mode is true, will display an input for pricing strategy.\r\n   */\r\n  const inputOrShowPricingStrategy = () => {\r\n    if (!editMode) {\r\n      return <span>{e.highestAPR}</span>;\r\n    } else {\r\n      return (\r\n        <Fragment>\r\n          <FormDisplay form={form}>\r\n            <RXInput\r\n              control={form.controls.pricingStrategy}\r\n              data-testid=\"credProtTablePricingStrategyInput\"\r\n            />\r\n          </FormDisplay>\r\n        </Fragment>\r\n      );\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Determines the cycle code cell. If the editMode is false, will display the cycle doe.\r\n   * If the edit mode is true, will display an input for cycle code.\r\n   */\r\n  const inputOrShowStatementDate = () => {\r\n    if (!editMode) {\r\n      return (\r\n        <span>\r\n          {new Date(fixDateString(e.statementDate)).toLocaleDateString()}\r\n        </span>\r\n      );\r\n    } else {\r\n      return (\r\n        <Fragment>\r\n          <FormDisplay form={form}>\r\n            <RXInput\r\n              control={form.controls.statementDate}\r\n              data-testid=\"creditProtInputCycleCode\"\r\n            />\r\n          </FormDisplay>\r\n        </Fragment>\r\n      );\r\n    }\r\n  };\r\n  /**\r\n   * Determines the fraud amount cell. If the editMode is false, will display the fraud amount.\r\n   * If the edit mode is true, will display an input for fraud amount.\r\n   */\r\n  const inputOrShowFraudAmount = () => {\r\n    if (!editMode) {\r\n      return <span>${RoundToDisplay(e.transactionAmount)}</span>;\r\n    } else {\r\n      return (\r\n        <Fragment>\r\n          <FormDisplay form={form}>\r\n            <RXInput\r\n              control={form.controls.totalPurchase}\r\n              data-testid=\"creditProtInputAmount\"\r\n            />\r\n          </FormDisplay>\r\n        </Fragment>\r\n      );\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Determines the adjustment date cell. If the editMode is false, will display the adjustment date.\r\n   * If the edit mode is true, will display an input for adjustment date\r\n   */\r\n  const inputOrShowAdjustmentDate = () => {\r\n    return (\r\n      <span>\r\n        {!e.id\r\n          ? new Date(\r\n              fixDateString(e.securityAdjustmentDate)\r\n            ).toLocaleDateString()\r\n          : convertCurrentDateWithLATimezone(getCurrentDateWithLATimezone())}\r\n      </span>\r\n    );\r\n  };\r\n  /**\r\n   * Calculates the total adjustment for the row, adding the Credit Protection Fee and CP Adjustment Interest columns.\r\n   * Displays 2 decismals\r\n   */\r\n  const calcTotalAdjustment = () => {\r\n    return RoundToDisplay(\r\n      e.creditProtectionFee + e.financeChargesOnCreditProtectionFees\r\n    );\r\n  };\r\n\r\n  const getRowClassName = () => {\r\n    if ((index + 1) % 2 === 1) {\r\n      return 'painted';\r\n    } else {\r\n      return '';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <TableRow className={getRowClassName()}>\r\n      <TableCell>{inputOrShowPricingStrategy()}</TableCell>\r\n      <TableCell>{inputOrShowStatementDate()}</TableCell>\r\n      <TableCell>{inputOrShowFraudAmount()}</TableCell>\r\n      <TableCell>${RoundToDisplay(e.creditProtectionFee)}</TableCell>\r\n      <TableCell>\r\n        ${RoundToDisplay(e.financeChargesOnCreditProtectionFees)}\r\n      </TableCell>\r\n      <TableCell>{inputOrShowAdjustmentDate()}</TableCell>\r\n      <TableCell>${calcTotalAdjustment()}</TableCell>\r\n      <TableCell>{determineEditCell()}</TableCell>\r\n      <TableCell>\r\n        <div className=\"cpRemoveCellDiv\">\r\n          <span\r\n            onClick={() => {\r\n              onRemove(index);\r\n            }}\r\n          >\r\n            Remove\r\n          </span>\r\n        </div>\r\n      </TableCell>\r\n    </TableRow>\r\n  );\r\n};\r\n\r\ninterface ICreditProtectionTableRow {\r\n  e: any;\r\n  index: number;\r\n  onRemove: any;\r\n  onEdit: any;\r\n}\r\n","import {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow\r\n} from 'c1b-framework';\r\nimport { useEffect, useState } from 'react';\r\nimport { RoundToDisplay } from '../../utils';\r\nimport { CreditProtectionTableRow } from './CreditProtectionTableRow';\r\n/**\r\n * Returns a table of credit protection items\r\n * @param props creditProtections: an array of credit protection objects, onEdit: the function to execute on edit of an item,\r\n * onRemove: the function to execute on the removal of an item\r\n */\r\nexport const CreditProtectionTable = (props: ICreditProtectionTable) => {\r\n  const { creditProtections, onEdit, onRemove } = props;\r\n  const [totals, setTotals] = useState({\r\n    totalFee: 0,\r\n    totalInterest: 0,\r\n    totalAdjustment: 0\r\n  });\r\n\r\n  /**\r\n   * useEffect to determine the totals used in the total row\r\n   */\r\n  useEffect(() => {\r\n    let newTotals = creditProtections.reduce(\r\n      (acc: any, v: any) => {\r\n        if (v.securityAdjustmentDate >= v.statementDate) {\r\n          acc.totalFee += v.creditProtectionFee;\r\n          acc.totalInterest += v.financeChargesOnCreditProtectionFees;\r\n          acc.totalAdjustment +=\r\n            v.creditProtectionFee + v.financeChargesOnCreditProtectionFees;\r\n        }\r\n        return acc;\r\n      },\r\n      {\r\n        totalFee: 0,\r\n        totalInterest: 0,\r\n        totalAdjustment: 0\r\n      }\r\n    );\r\n\r\n    setTotals(newTotals);\r\n  }, [creditProtections]);\r\n\r\n  if (creditProtections.length) {\r\n    return (\r\n      <Table>\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Pricing Strategy (%)</TableCell>\r\n            <TableCell>Statement Date</TableCell>\r\n            <TableCell>Fraud Amount</TableCell>\r\n            <TableCell>Credit Protection Fee</TableCell>\r\n            <TableCell>CP Adjustment Interest</TableCell>\r\n            <TableCell>Adjustment</TableCell>\r\n            <TableCell>Total Adjustment</TableCell>\r\n            <TableCell>&nbsp;</TableCell>\r\n            <TableCell>&nbsp;</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody align=\"center\">\r\n          {creditProtections.map(\r\n            (e: any, i: number) => {\r\n              // if (\r\n              //   new Date(e.securityAdjustmentDate) >= new Date(e.statementDate)\r\n              // ) {\r\n              return (\r\n                <CreditProtectionTableRow\r\n                  e={e}\r\n                  onEdit={onEdit}\r\n                  onRemove={onRemove}\r\n                  index={i}\r\n                  key={`CreditProtectionTableRow ${e.statementDate}${e.securityAdjustmentDate}${e.totalPurchase}`}\r\n                />\r\n              );\r\n            }\r\n            // }\r\n          )}\r\n          <TableRow>\r\n            <TableCell>\r\n              <b>Total:</b>\r\n            </TableCell>\r\n            <TableCell>&nbsp;</TableCell>\r\n            <TableCell>&nbsp;</TableCell>\r\n            <TableCell>\r\n              <b>${RoundToDisplay(totals.totalFee)}</b>\r\n            </TableCell>\r\n            <TableCell>\r\n              <b>${RoundToDisplay(totals.totalInterest)}</b>\r\n            </TableCell>\r\n            <TableCell>&nbsp;</TableCell>\r\n            <TableCell>\r\n              <b>${RoundToDisplay(totals.totalAdjustment)}</b>\r\n            </TableCell>\r\n            <TableCell>&nbsp;</TableCell>\r\n            <TableCell>&nbsp;</TableCell>\r\n          </TableRow>\r\n        </TableBody>\r\n      </Table>\r\n    );\r\n  } else return <div></div>;\r\n};\r\n\r\ninterface ICreditProtectionTable {\r\n  creditProtections: Array<any>;\r\n  onEdit: any;\r\n  onRemove: any;\r\n}\r\n","import { Control, Form, VALIDATIONS } from 'c1b-framework';\r\n\r\nconst pricingStrategy = Control(\r\n  'pricingStrategy',\r\n  '',\r\n  'Pricing Strategy (%)',\r\n  'number',\r\n  {\r\n    validators: [\r\n      VALIDATIONS.required,\r\n      VALIDATIONS.minValue(1),\r\n      VALIDATIONS.maxValue(100),\r\n      VALIDATIONS.pattern(\r\n        new RegExp(/^\\d{1,2}\\.\\d{1,2}$|^\\.\\d{1,2}$|^\\d{1,3}$/i),\r\n        'percentage'\r\n      )\r\n    ],\r\n    errorMessages: {\r\n      required: 'This field is required',\r\n      percentage: 'The value must be a percentage with at most 2 decimals',\r\n      minValue: 'Minimum value 1',\r\n      maxValue: 'Maximum value 100'\r\n    }\r\n  }\r\n);\r\n\r\nconst cycleCode = Control('cycleCode', '', 'Cycle Code', 'number', {\r\n  validators: [\r\n    VALIDATIONS.required,\r\n    VALIDATIONS.minValue(1),\r\n    VALIDATIONS.maxValue(28),\r\n    VALIDATIONS.pattern(new RegExp(/^\\d{1,2}$/i), 'wholenumber')\r\n  ],\r\n  errorMessages: {\r\n    required: 'This field is required',\r\n    minValue: 'Minimum value 1',\r\n    maxValue: 'Maximum value 28',\r\n    wholenumber: 'Value must be a whole number, 1-28'\r\n  }\r\n});\r\nconst postDateOfTransaction = Control(\r\n  'postDateOfTransaction',\r\n  '',\r\n  'Post Date of Transaction',\r\n  'date',\r\n  {\r\n    validators: [VALIDATIONS.required],\r\n    errorMessages: {\r\n      required: 'This field is required'\r\n    }\r\n  }\r\n);\r\nconst totalPurchase = Control(\r\n  'totalPurchase',\r\n  '',\r\n  'Total Purchase ($)',\r\n  'number',\r\n  {\r\n    validators: [\r\n      VALIDATIONS.required,\r\n      VALIDATIONS.minValue(0),\r\n      VALIDATIONS.pattern(\r\n        new RegExp(/^\\d+$|^\\d+\\.\\d{1,2}$|^\\.\\d{1,2}$/i),\r\n        'currency'\r\n      )\r\n    ],\r\n    errorMessages: {\r\n      required: 'This field is required',\r\n      minValue: 'Minimum value 0',\r\n      currency: 'Value can only have at most 2 decimal digits'\r\n    }\r\n  }\r\n);\r\nconst fraudAdjustment = Control(\r\n  'fraudAdjustment',\r\n  '',\r\n  'Fraud Adjustment',\r\n  'date',\r\n  {\r\n    isDisabled: true,\r\n    validators: [VALIDATIONS.required],\r\n    errorMessages: {\r\n      required: 'This field is required'\r\n    }\r\n  }\r\n);\r\n\r\nexport const FCForm = new Form(\r\n  'FCForm',\r\n  [pricingStrategy, postDateOfTransaction, totalPurchase, fraudAdjustment],\r\n  {}\r\n);\r\n\r\nexport default FCForm;\r\n","import {\r\n  ButtonComponent,\r\n  FormDisplay,\r\n  RXInput,\r\n  useForm,\r\n  VALIDATIONS\r\n} from 'c1b-framework';\r\nimport { Fragment, useEffect, useState } from 'react';\r\nimport { getCurrentDateWithLATimezone } from '../FinanceChargeCalc.utils';\r\nimport FCForm from './FCInputs.form';\r\n\r\nexport const FCInputs = (props: any) => {\r\n  const { handleFcAdd, clearClicked } = props;\r\n  const [form] = useForm(FCForm);\r\n  const [showError, setShowError] = useState(false);\r\n  // const [showError, setShowError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    form.reset();\r\n    form.setIsDisabled('fraudAdjustment', true);\r\n  }, [clearClicked]);\r\n\r\n  /**\r\n   * This useEffect is run when the postDateOfTransaction is changed to track the minDate for fraudAdjustmentDate\r\n   */\r\n  useEffect(() => {\r\n    let minDate = form.getValue('postDateOfTransaction');\r\n    let faDate = new Date(form.getValue('fraudAdjustment'));\r\n    if (minDate) {\r\n      form.controls.fraudAdjustment.minDate = minDate;\r\n      form.controls.fraudAdjustment.maxDate = getCurrentDateWithLATimezone();\r\n      form.setIsDisabled('fraudAdjustment', false);\r\n    }\r\n\r\n    if (minDate > faDate) {\r\n      setShowError(true);\r\n    } else {\r\n      setShowError(false);\r\n    }\r\n  }, [form.values.postDateOfTransaction, form.values.fraudAdjustment]);\r\n\r\n  /**\r\n   * When a user clicks add the form is verified including a custom verification on minimum dates\r\n   * If the form is valid, the passed in handle function is run with the inputed data\r\n   */\r\n  const handleAdd = () => {\r\n    if (form.onSubmit()) {\r\n      let minDate = new Date(form.getValue('postDateOfTransaction'));\r\n      let faDate = new Date(form.getValue('fraudAdjustment'));\r\n\r\n      if (minDate > faDate) {\r\n        setShowError(true);\r\n      } else {\r\n        setShowError(false);\r\n\r\n        let data = {\r\n          transactionAmount: form.getValue('totalPurchase'),\r\n          securityAdjustmentDate: form.getValue('fraudAdjustment'),\r\n          transactionPostDate: form.getValue('postDateOfTransaction'),\r\n          highestAPR: form.getValue('pricingStrategy')\r\n        };\r\n\r\n        handleFcAdd(data);\r\n\r\n        form.resetControl(form.controls.postDateOfTransaction);\r\n        form.resetControl(form.controls.totalPurchase);\r\n        form.resetControl(form.controls.fraudAdjustment);\r\n        form.setIsDisabled('fraudAdjustment', true);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <FormDisplay form={form}>\r\n        <div className=\"fc-control-inputs\">\r\n          <RXInput control={form.controls.pricingStrategy} />\r\n          <RXInput control={form.controls.postDateOfTransaction} />\r\n          <RXInput control={form.controls.totalPurchase} />\r\n          <RXInput control={form.controls.fraudAdjustment} />\r\n        </div>\r\n      </FormDisplay>\r\n      {showError ? (\r\n        <div style={{ marginBottom: '10px' }}>\r\n          <span style={{ color: 'red' }}>\r\n            Fraud Adjustment date cannot be before Post Date of Transaction\r\n          </span>\r\n        </div>\r\n      ) : (\r\n        ''\r\n      )}\r\n\r\n      <ButtonComponent label=\"Add\" onClick={() => handleAdd()} />\r\n    </Fragment>\r\n  );\r\n};\r\n","import {\r\n  Form,\r\n  Control,\r\n  TableCell,\r\n  TableRow,\r\n  useForm,\r\n  VALIDATIONS,\r\n  FormDisplay,\r\n  RXInput\r\n} from 'c1b-framework';\r\nimport { Fragment, useEffect, useState } from 'react';\r\nimport '../financeChargeTable.scss';\r\nimport checkMark from '../../../../assets/check-bold-green.svg';\r\nimport redX from '../../../../assets/close-thick-red.svg';\r\nimport { RoundToDisplay } from '../../../utils';\r\n\r\n/**\r\n *\r\n * @param props e: the element of the finance charges array that this row represents. index: the index number of the element of the finance charges array that this row represents\r\n * onEdit: the funciton to execute when an edit for the row is confirmed, onRemove: the function to execute\r\n */\r\nexport const FinanceChargeTableRow = (props: any) => {\r\n  const { e, onEdit, onRemove, index } = props;\r\n  const [editMode, setEditMode] = useState(false); //whether the row is currently being edited\r\n  /**\r\n   * Form control for price strategy\r\n   */\r\n  const pricingStrategy = Control(\r\n    'pricingStrategy',\r\n    e.highestAPR,\r\n    'Pricing Strategy (%)',\r\n    'number',\r\n    {\r\n      validators: [\r\n        VALIDATIONS.required,\r\n        VALIDATIONS.minValue(1),\r\n        VALIDATIONS.maxValue(100),\r\n        VALIDATIONS.pattern(\r\n          new RegExp(/^\\d{1,2}\\.\\d{1,2}$|^\\.\\d{1,2}$|^\\d{1,3}$/i),\r\n          'percentage'\r\n        )\r\n      ],\r\n      errorMessages: {\r\n        required: 'This field is required',\r\n        percentage: 'The value must be a percentage with at most 2 decimals',\r\n        minValue: 'Minimum value 1',\r\n        maxValue: 'Maximum value 100'\r\n      }\r\n    }\r\n  );\r\n\r\n  /**\r\n   * Form control for cycle code\r\n   */\r\n  const cycleCode = Control(\r\n    'postDate',\r\n    e.transactionPostDate,\r\n    'Post Date of Transaction',\r\n    'date',\r\n    {\r\n      validators: [VALIDATIONS.required],\r\n      errorMessages: {\r\n        required: 'This field is required'\r\n      }\r\n    }\r\n  );\r\n  /**\r\n   * Form control for fraud adjustment date\r\n   */\r\n  const fraudAdjustment = Control(\r\n    'fraudAdjustment',\r\n    e.securityAdjustmentDate,\r\n    'Fraud Adjustment',\r\n    'date',\r\n    {\r\n      validators: [VALIDATIONS.required],\r\n      errorMessages: {\r\n        required: 'This field is required'\r\n      }\r\n    }\r\n  );\r\n\r\n  /**\r\n   * Form control for fraud amount\r\n   */\r\n  const fraudAmount = Control(\r\n    'totalPurchase',\r\n    e.transactionAmount,\r\n    'Total Purchase ($)',\r\n    'number',\r\n    {\r\n      validators: [\r\n        VALIDATIONS.required,\r\n        VALIDATIONS.minValue(0),\r\n        VALIDATIONS.pattern(\r\n          new RegExp(/^\\d+$|^\\d+\\.\\d{1,2}$|^\\.\\d{1,2}$/i),\r\n          'currency'\r\n        )\r\n      ],\r\n      errorMessages: {\r\n        required: 'This field is required',\r\n        minValue: 'Minimum value 0',\r\n        currency: 'Value can only have at most 2 decimal digits'\r\n      }\r\n    }\r\n  );\r\n\r\n  /**\r\n   * Deisgnates a from using the above controls\r\n   */\r\n  const [form] = useForm(\r\n    new Form(\r\n      'CreditProtectionTableRowForm' + index,\r\n      [pricingStrategy, cycleCode, fraudAmount, fraudAdjustment],\r\n      {}\r\n    )\r\n  );\r\n\r\n  /**\r\n   * fixes a date string to use / instead of -, removing the time\r\n   * @param date the date string to be fixed\r\n   */\r\n  const fixDateString = (date: string) => {\r\n    const regex = /-/g;\r\n    return date.replace(regex, '/');\r\n  };\r\n  /**\r\n   * starts editing when the edit cell is clicked\r\n   */\r\n  const startEdit = () => {\r\n    setEditMode(true);\r\n  };\r\n  /**\r\n   * Finalizes an edit using the input fields\r\n   */\r\n  const completeEdit = () => {\r\n    let editObj = {\r\n      highestAPR: form.controls.pricingStrategy.value,\r\n      transactionPostDate: form.controls.postDate.value,\r\n      cycleCode: e.cycleCode,\r\n      transactionAmount: form.controls.totalPurchase.value,\r\n      securityAdjustmentDate: form.controls.fraudAdjustment.value,\r\n      id: e.id\r\n    };\r\n    onEdit(editObj, index);\r\n    setEditMode(false);\r\n    form.reset();\r\n  };\r\n  /**\r\n   * Cancels an edit and resets the inputs\r\n   */\r\n  const cancelEdit = () => {\r\n    form.reset();\r\n    setEditMode(false);\r\n  };\r\n\r\n  /**\r\n   * Returns the value of the edit cell. Edit if the cell is not being edited, the checkmark and X images if it is.\r\n   */\r\n  const determineEditCell = () => {\r\n    if (editMode === true) {\r\n      return (\r\n        <div>\r\n          <span\r\n            onClick={() => completeEdit()}\r\n            data-testid=\"checkMarkSpace\"\r\n            className=\"editHover\"\r\n          >\r\n            <img src={checkMark} alt=\"Confirm Edit\" />\r\n          </span>\r\n          <span>&nbsp;</span>\r\n          <span onClick={() => cancelEdit()} className=\"editHover\">\r\n            <img src={redX} alt=\"Cancel Edit\" />\r\n          </span>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <span\r\n          onClick={() => startEdit()}\r\n          data-testid=\"financeChargesEditCell\"\r\n          className=\"editHover\"\r\n        >\r\n          Edit\r\n        </span>\r\n      );\r\n    }\r\n  };\r\n  /**\r\n   * Returns an input when the row is being edited, displays the pricing strategy when not\r\n   */\r\n  const inputOrShowPricingStrategy = () => {\r\n    if (editMode === false) {\r\n      return <span data-testid=\"fcPricingCell\">{e.highestAPR}</span>;\r\n    } else {\r\n      return (\r\n        <Fragment>\r\n          <FormDisplay form={form}>\r\n            <RXInput control={form.controls.pricingStrategy} />\r\n          </FormDisplay>\r\n        </Fragment>\r\n      );\r\n    }\r\n  };\r\n  /**\r\n   * Returns an input when the row is being edited, displays the post date when not\r\n   */\r\n  const inputOrShowPostDate = () => {\r\n    if (editMode === false) {\r\n      return (\r\n        <span>\r\n          {new Date(fixDateString(e.transactionPostDate)).toLocaleDateString()}\r\n        </span>\r\n      );\r\n    } else {\r\n      return (\r\n        <Fragment>\r\n          <FormDisplay form={form}>\r\n            <RXInput control={form.controls.postDate} />\r\n          </FormDisplay>\r\n        </Fragment>\r\n      );\r\n    }\r\n  };\r\n  /**\r\n   * Returns an input when the row is being edited, displays the transaction amount when not\r\n   */\r\n  const inputOrShowTransactionAmount = () => {\r\n    if (editMode === false) {\r\n      return <span>${RoundToDisplay(e.transactionAmount)}</span>;\r\n    } else {\r\n      return (\r\n        <Fragment>\r\n          <FormDisplay form={form}>\r\n            <RXInput control={form.controls.totalPurchase} />\r\n          </FormDisplay>\r\n        </Fragment>\r\n      );\r\n    }\r\n  };\r\n  /**\r\n   * Returns an input when the row is being edited, displays the fraud adjustment date when not\r\n   */\r\n  const inputOrShowFraudAdjustment = () => {\r\n    if (editMode === false) {\r\n      return (\r\n        <span>\r\n          {new Date(\r\n            fixDateString(e.securityAdjustmentDate)\r\n          ).toLocaleDateString()}\r\n        </span>\r\n      );\r\n    } else {\r\n      return (\r\n        <Fragment>\r\n          <FormDisplay form={form}>\r\n            <RXInput control={form.controls.fraudAdjustment} />\r\n          </FormDisplay>\r\n        </Fragment>\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    let minDate = form.getValue('postDate');\r\n\r\n    if (minDate) {\r\n      form.controls.fraudAdjustment.minDate = minDate;\r\n\r\n      form.setIsDisabled('fraudAdjustment', false);\r\n    }\r\n  }, [form.values.postDate]);\r\n\r\n  const getRowClassName = () => {\r\n    if ((index + 1) % 2 === 1) {\r\n      return 'painted';\r\n    } else {\r\n      return '';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <TableRow className={getRowClassName()}>\r\n      <TableCell>{inputOrShowPricingStrategy()}</TableCell>\r\n      <TableCell>{inputOrShowPostDate()}</TableCell>\r\n      <TableCell>{inputOrShowTransactionAmount()}</TableCell>\r\n      <TableCell>{inputOrShowFraudAdjustment()}</TableCell>\r\n      <TableCell>${RoundToDisplay(e.financeCharge)}</TableCell>\r\n      <TableCell>{e.days}</TableCell>\r\n      <TableCell>&nbsp;</TableCell>\r\n      <TableCell>\r\n        <div className=\"financeChargeTableEditCell\">{determineEditCell()}</div>\r\n      </TableCell>\r\n      <TableCell>\r\n        <span\r\n          onClick={() => onRemove(e)}\r\n          className=\"financeChargeTableRemoveCell\"\r\n        >\r\n          Remove\r\n        </span>\r\n      </TableCell>\r\n    </TableRow>\r\n  );\r\n};\r\n\r\ninterface IFinanceChargeTableRow {\r\n  e: any; //todo CHANGE TO ICHARGE WHEN ID IS ADDED\r\n  onEdit: any;\r\n  onRemove: any;\r\n  rowName: string;\r\n  index: number;\r\n}\r\n","import {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow\r\n} from 'c1b-framework';\r\nimport { useEffect, useState } from 'react';\r\n\r\nimport { FinanceChargeTableRow } from './FinanceChargeTableRow';\r\nimport './financeChargeTable.scss';\r\n\r\nimport { RoundToDisplay } from '../../utils';\r\nimport { IFinanceCharge } from '../FinanceChargeCalc';\r\n\r\n/**\r\n * Returns a table of finance charge items with edit and remove capabilities\r\n * @param props financeCharges: an array of finance charge items\r\n *  onEdit: the function to execute upon editing an item, onRemove: the function to execute on the removal of an item\r\n */\r\nexport const FinanceChargeTable = (props: IFinanceChargeTable) => {\r\n  const { financeCharges, onEdit, onRemove } = props;\r\n  const [totals, setTotals] = useState({ totalTransactions: 0, totalFee: 0 });\r\n\r\n  /**\r\n   * Calculates the totalTransactions and totalFees\r\n   */\r\n  useEffect(() => {\r\n    let newTotals = financeCharges.reduce(\r\n      (acc, v) => {\r\n        acc.totalTransactions += v.transactionAmount;\r\n        acc.totalFee += v.financeCharge;\r\n        return acc;\r\n      },\r\n      {\r\n        totalTransactions: 0,\r\n        totalFee: 0\r\n      }\r\n    );\r\n\r\n    setTotals(newTotals);\r\n  }, [financeCharges]);\r\n\r\n  return (\r\n    <div className=\"FincanceChargeTable\">\r\n      <Table>\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Pricing Strategy (%)</TableCell>\r\n            <TableCell>Post Date Of Transaction</TableCell>\r\n            <TableCell>Total Purchase</TableCell>\r\n            <TableCell>Fraud Adjustment</TableCell>\r\n            <TableCell>Total</TableCell>\r\n            <TableCell>Days</TableCell>\r\n            <TableCell>&nbsp;</TableCell>\r\n            <TableCell>&nbsp;</TableCell>\r\n            <TableCell>&nbsp;</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody align=\"center\">\r\n          {financeCharges.map((e, i) => {\r\n            return (\r\n              <FinanceChargeTableRow\r\n                e={e}\r\n                onEdit={onEdit}\r\n                onRemove={onRemove}\r\n                index={i}\r\n                key={`FinanceChargeTableRow ${e.transactionPostDate}${e.securityAdjustmentDate}${e.transactionAmount}`}\r\n              />\r\n            );\r\n          })}\r\n          <TableRow>\r\n            <TableCell>\r\n              <b>Total:</b>\r\n            </TableCell>\r\n            <TableCell>&nbsp;</TableCell>\r\n            <TableCell>\r\n              <b>${RoundToDisplay(totals.totalTransactions)}</b>\r\n            </TableCell>\r\n            <TableCell>&nbsp;</TableCell>\r\n            <TableCell>\r\n              <b>${RoundToDisplay(totals.totalFee)}</b>\r\n            </TableCell>\r\n            <TableCell>&nbsp;</TableCell>\r\n            <TableCell>&nbsp;</TableCell>\r\n            <TableCell>&nbsp;</TableCell>\r\n            <TableCell>&nbsp;</TableCell>\r\n          </TableRow>\r\n        </TableBody>\r\n      </Table>\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface IFinanceChargeTable {\r\n  financeCharges: Array<IFinanceCharge>;\r\n  onEdit: any;\r\n  onRemove: any;\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport './index.scss';\r\nimport { Table, TableCell, TableRow, TableBody } from 'c1b-framework';\r\nimport { RoundToDisplay } from '../../utils';\r\n\r\nexport const TotalChargeBack = (props: ITotalChargeBackProps) => {\r\n  /**\r\n   * passed values from parent components and total variable\r\n   */\r\n  const { currentState } = props;\r\n  const [totalAmt, setTotalAmt] = useState(0);\r\n\r\n  useEffect(() => {\r\n    let total =\r\n      currentState.fcTotals.totalFee +\r\n      currentState.cpTotals.totalInterest +\r\n      currentState.cpTotals.totalFee;\r\n    setTotalAmt(total);\r\n  }, [currentState]);\r\n\r\n  return (\r\n    <div className=\"TotalChargeBack card\">\r\n      <Table>\r\n        <TableBody>\r\n          <TableRow>\r\n            <TableCell>\r\n              <h6>Amount of Finance Charge adjustment:</h6>\r\n            </TableCell>\r\n            <TableCell>\r\n              <div data-testid=\"charges\">\r\n                ${RoundToDisplay(currentState.fcTotals.totalFee)}\r\n              </div>\r\n            </TableCell>\r\n          </TableRow>\r\n          <TableRow>\r\n            <TableCell>\r\n              <h6>Amount of Credit Protection fees:</h6>\r\n            </TableCell>\r\n            <TableCell>\r\n              <div data-testid=\"creditFee\">\r\n                ${RoundToDisplay(currentState.cpTotals.totalFee)}\r\n              </div>\r\n            </TableCell>\r\n          </TableRow>\r\n          <TableRow>\r\n            <TableCell>\r\n              <h6>Amount of CP Adjustment Interest:</h6>\r\n            </TableCell>\r\n            <TableCell>\r\n              <div data-testid=\"serviceFee\">\r\n                ${RoundToDisplay(currentState.cpTotals.totalInterest)}\r\n              </div>\r\n            </TableCell>\r\n          </TableRow>\r\n          <TableRow>\r\n            <TableCell>\r\n              <h6>Amount of credit due:</h6>\r\n            </TableCell>\r\n            <TableCell>\r\n              <strong>\r\n                <div data-testid=\"total\">${RoundToDisplay(totalAmt)} </div>\r\n              </strong>\r\n            </TableCell>\r\n          </TableRow>\r\n        </TableBody>\r\n      </Table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TotalChargeBack;\r\n\r\nexport interface ITotalChargeBackProps {\r\n  currentState: any;\r\n}\r\n","import {\r\n  ButtonComponent,\r\n  Control,\r\n  Form,\r\n  FormDisplay,\r\n  RXInput,\r\n  ToastContext,\r\n  Typography,\r\n  useForm,\r\n  VALIDATIONS\r\n} from 'c1b-framework';\r\nimport { createID } from 'c1b-framework/lib/utils';\r\nimport { updateCpCharges } from './FinanceChargeCalc.utils';\r\n\r\nimport { Fragment, useContext, useReducer, useRef, useState } from 'react';\r\n\r\nimport { ControlButtons } from './ControlButtons';\r\nimport { CPInputs } from './CPInputs';\r\nimport { CreditProtectionTable } from './CreditProtectionTable';\r\nimport { FCInputs } from './FCInputs';\r\nimport './FinanceChargeCalc.scss';\r\nimport {\r\n  UpdateTotals,\r\n  simpleFCAdd,\r\n  multipleCPAdd,\r\n  simpleFCEdit,\r\n  multipleCPEdit,\r\n  RemoveCpMultiple,\r\n  simpleCPAdd,\r\n  simpleCPEdit,\r\n  getNewCPDates\r\n} from './FinanceChargeCalc.utils';\r\nimport { FinanceChargeTable } from './FinanceChargeTable';\r\nimport TotalChargeBack from './TotalChargeBack';\r\nimport { IFCAdd, IFCC_Actions, IFinanceObject } from './FinanceChargeCalc';\r\n\r\n/**\r\n * This is the main\r\n * @param props\r\n * @returns\r\n */\r\n//* MAIN JSX Component *//\r\nexport const FinanceChargeCalc = (props: any) => {\r\n  // Used to add error messages\r\n  const { addMessage } = useContext(ToastContext);\r\n\r\n  // The inital state of the program when mounted\r\n  let initial: IFinanceObject = {\r\n    fcArray: [],\r\n    cpArray: [],\r\n    fcTotals: { totalFee: 0, totalTransactions: 0 },\r\n    cpTotals: { totalFee: 0, totalInterest: 0, totalAdjustment: 0 },\r\n    cycleCode: false,\r\n    addMessage: addMessage\r\n  };\r\n  // This reducer keeps the IFinanceObject to be mainpulated\r\n  // Totals are updated inside updateState\r\n  const [chargesState, dispatch]: [IFinanceObject, any] = useReducer(\r\n    updateState,\r\n    initial\r\n  );\r\n\r\n  // Used to let children know when clear is clicked\r\n  const [clearClicked, setClearClicked] = useState(false);\r\n  // HTML ref to track if CrediProtection is enabled or not.\r\n  const checkBoxRef = useRef<HTMLInputElement>(null);\r\n\r\n  // Creates a control for cycle code\r\n  const cycleCodeControl = Control(\r\n    'cycleCodeInput',\r\n    '',\r\n    'Cycle Code',\r\n    'number',\r\n    {\r\n      validators: [VALIDATIONS.minValue(1), VALIDATIONS.maxValue(28)],\r\n      errorMessages: {\r\n        minValue: 'Minimum value 1',\r\n        maxValue: 'Maximum value 28'\r\n      }\r\n    }\r\n  );\r\n\r\n  // Makes a form for the CycleCode\r\n  const [iForm] = useForm(\r\n    new Form('CycleCodeInputForm', [cycleCodeControl], {})\r\n  );\r\n\r\n  /**\r\n   * This function runs when a user clicks `Add` in FinancCharge Inputs\r\n   * - If CreditProtection `isChecked`, then run `AddFcYesCp`, else run `AddFcNoCp`\r\n   * @param chargeToAdd The user data from FinanceCharge Inputs\r\n   */\r\n  const runFCAdd = async (chargeToAdd: IFCAdd) => {\r\n    let currentState = JSON.parse(JSON.stringify(chargesState));\r\n    if (checkBoxRef.current?.checked && currentState.cycleCode) {\r\n      currentState = await AddFcYesCp(currentState, chargeToAdd);\r\n    } else {\r\n      currentState = await AddFcNoCp(currentState, chargeToAdd);\r\n    }\r\n    dispatch({ type: 'UPDATE', payload: currentState });\r\n  };\r\n\r\n  /**\r\n   * This function runs when a user clicks `Edit` on a FinanceCharge\r\n   * - If CreditProtection `isChecked`, then run `EditFcYesCp`, else run `EditFcNoCp`\r\n   * @param chargeToEdit The actual charge inside of `fcArray` to edit\r\n   */\r\n  const runFCEdit = async (chargeToEdit: any) => {\r\n    let currentState = JSON.parse(JSON.stringify(chargesState));\r\n    if (checkBoxRef.current?.checked && currentState.cycleCode) {\r\n      currentState = await EditFcYesCp(currentState, chargeToEdit);\r\n    } else {\r\n      currentState = await EditFcNoCp(currentState, chargeToEdit);\r\n    }\r\n    dispatch({ type: 'UPDATE', payload: currentState });\r\n  };\r\n\r\n  /**\r\n   * This function runs when a user clicks `Remove` on a FinanceCharge Line\r\n   * - If CreditProtection `isChecked` then the ones related to a FinanceCharge\r\n   * will be removed inside `RemoveFC`\r\n   * @param chargeToRemove The actual charge inside of `fcArray` to remove from it\r\n   */\r\n  const runFCRemove = (chargeToRemove: any) => {\r\n    let currentState = JSON.parse(JSON.stringify(chargesState));\r\n    let isChecked = checkBoxRef.current?.checked ? true : false;\r\n    currentState = RemoveFc(currentState, chargeToRemove, isChecked);\r\n    dispatch({ type: 'UPDATE', payload: currentState });\r\n  };\r\n\r\n  /**\r\n   * This function runs when `Add` is clicked for a CreditProtection\r\n   * - Simply calls the AddCp Action to create a new charge in the existing cpArray\r\n   * - Then updates the state\r\n   * @param chargeToAdd The user input data for a credit protection\r\n   */\r\n  const runCPAdd = async (chargeToAdd: any) => {\r\n    let currentState = JSON.parse(JSON.stringify(chargesState));\r\n    chargeToAdd.manualAdd = true;\r\n    currentState = await AddCp(currentState, chargeToAdd);\r\n    dispatch({ type: 'UPDATE', payload: currentState });\r\n  };\r\n\r\n  /**\r\n   * This function runs when a user confirms their changes\r\n   * inside a CreditProtection row\r\n   * - Simply calls the EditCP Action to update a charge in the existing cpArray\r\n   * - Updates the state\r\n   * @param chargeToEdit The new user input data to make a different credit protection\r\n   * @param index The index of the charge to edit\r\n   */\r\n  const runCPEdit = async (chargeToEdit: any, index: number) => {\r\n    let currentState = JSON.parse(JSON.stringify(chargesState));\r\n    chargeToEdit.manualAdd = true;\r\n    currentState = await EditCP(currentState, chargeToEdit, index);\r\n    dispatch({ type: 'UPDATE', payload: currentState });\r\n  };\r\n\r\n  /**\r\n   * This function runs when a user click `Remove` on a CreditProtection Line\r\n   * - Simply remove the specified index from the cpArray\r\n   * - Update the state\r\n   * @param index The index of the item to be removed\r\n   */\r\n  const runCPRemove = (index: number) => {\r\n    let currentState = JSON.parse(JSON.stringify(chargesState));\r\n    let newState = RemoveCpSingle(currentState, index);\r\n    dispatch({ type: 'UPDATE', payload: newState });\r\n  };\r\n\r\n  /**\r\n   * This function triggers when a user clicks `Set Cycle Code`\r\n   * - Checks if CycleCode is valid\r\n   * - If CreditProtection is enabled, then the state will update inside `CycleCodeChanged`\r\n   * - Updates the state\r\n   */\r\n  const updateCycleCode = async () => {\r\n    if (iForm.onSubmit()) {\r\n      let cycleCode = iForm.getValue('cycleCodeInput');\r\n      let currentState = JSON.parse(JSON.stringify(chargesState));\r\n      if (checkBoxRef.current?.checked) {\r\n        currentState = await CycleCodeChanged(currentState, cycleCode);\r\n      }\r\n      currentState.cycleCode = cycleCode;\r\n      dispatch({ type: 'UPDATE', payload: currentState });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * This function is run when a user `checks/unchecks` CrediProtection\r\n   * If CreditProtection `isChecked`, then run `CpToggled`, else just blank out cpArray\r\n   */\r\n  const runCpToggled = async () => {\r\n    let newState = JSON.parse(JSON.stringify(chargesState));\r\n    if (!checkBoxRef.current?.checked) {\r\n      newState.cpArray = [];\r\n    } else {\r\n      newState = await CpToggled(newState);\r\n    }\r\n    dispatch({ type: 'UPDATE', payload: newState });\r\n  };\r\n\r\n  /**\r\n   * This function is triggered when a user clicks clear.\r\n   * The function clears any forms, inputs, and resets the state.\r\n   */\r\n  const runClearButton = () => {\r\n    if (checkBoxRef.current) {\r\n      checkBoxRef.current.checked = false;\r\n    }\r\n    iForm.reset();\r\n    setClearClicked(!clearClicked);\r\n    dispatch({ type: 'UPDATE', payload: initial });\r\n  };\r\n\r\n  //**************************************************************************************/\r\n  //\r\n  // MAIN JSX RETURN STATEMENTS\r\n  //\r\n  //**************************************************************************************/\r\n\r\n  return (\r\n    <div className=\"financeCharge-wrapper\">\r\n      <br />\r\n      <div className=\"financeCharge-main\">\r\n        <div className=\"fc-header\">\r\n          <div className=\"fc-title\">\r\n            <Typography variant=\"h1\">Finance Charge Calculator</Typography>\r\n\r\n            <div className=\"fc-cp-input\">\r\n              <div className=\"fc-cp-checkbox-title\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  onClick={(e) => runCpToggled()}\r\n                  disabled={!chargesState.cycleCode}\r\n                  data-testid=\"cpCheckbox\"\r\n                  ref={checkBoxRef}\r\n                />\r\n                <span>Credit Protection</span>\r\n              </div>\r\n              <div className=\"cycleCodeFormBox\">\r\n                <div className=\"cycleCodeInputSpace\">\r\n                  <Fragment>\r\n                    <FormDisplay form={iForm}>\r\n                      <RXInput control={iForm.controls.cycleCodeInput} />\r\n                    </FormDisplay>\r\n                  </Fragment>\r\n                </div>\r\n                <span>&nbsp;</span>\r\n                <ButtonComponent\r\n                  label={'Set Cycle Code'}\r\n                  className=\"setCycleCodeButton\"\r\n                  onClick={() => updateCycleCode()}\r\n                />\r\n              </div>\r\n              <span>&nbsp;</span>\r\n            </div>\r\n          </div>\r\n          <ControlButtons\r\n            onClear={() => runClearButton()}\r\n            currentState={chargesState}\r\n          />\r\n        </div>\r\n        <div className=\"fc-controls card\">\r\n          <FCInputs handleFcAdd={runFCAdd} clearClicked={clearClicked} />\r\n\r\n          {!chargesState.fcArray.length ? (\r\n            ''\r\n          ) : (\r\n            <div className=\"fc-table\">\r\n              <FinanceChargeTable\r\n                onEdit={runFCEdit}\r\n                onRemove={runFCRemove}\r\n                financeCharges={chargesState.fcArray}\r\n              />\r\n            </div>\r\n          )}\r\n        </div>\r\n        {chargesState.cpArray.length && checkBoxRef.current?.checked ? (\r\n          <div className=\"cp-controls card\">\r\n            <CPInputs handleCpAdd={runCPAdd} clearClicked={clearClicked} />\r\n            {chargesState.cpArray.length && checkBoxRef.current?.checked ? (\r\n              <div className=\"cp-table\">\r\n                <CreditProtectionTable\r\n                  onEdit={runCPEdit}\r\n                  onRemove={runCPRemove}\r\n                  creditProtections={chargesState.cpArray}\r\n                />\r\n              </div>\r\n            ) : (\r\n              ''\r\n            )}\r\n          </div>\r\n        ) : (\r\n          ''\r\n        )}\r\n      </div>\r\n      {chargesState.fcArray.length || chargesState.cpArray.length ? (\r\n        <TotalChargeBack currentState={chargesState} />\r\n      ) : (\r\n        ''\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n//***********************************************************************************/\r\n// MAIN LOGIC\r\n// These functions are used to mutate the currenState at a high level\r\n//***********************************************************************************/\r\n\r\n/**\r\n * This function is run as the reducer in `FinanceChargeCalc` (Runs when `dispatch` is called)\r\n * - Updates the totals before returning the updated state.\r\n * @param state The current state of the `chargesState`\r\n * @param action Contains the new state object in .payload\r\n * @returns\r\n */\r\nconst updateState = (state: any, action: IFCC_Actions): IFinanceObject => {\r\n  let oldState = JSON.parse(JSON.stringify(action.payload));\r\n  let newState = UpdateTotals(oldState);\r\n\r\n  return newState;\r\n};\r\n\r\n/*********************************************\r\n * Adds a new FinanceCharge to the fcArray when CreditProtection is `DISABLED`\r\n *\r\n * @param currentState\r\n * @param args\r\n * @returns\r\n */\r\nconst AddFcNoCp = async (currentState: IFinanceObject, args: IFCAdd) => {\r\n  let tmpFCArray = await simpleFCAdd(\r\n    currentState.fcArray,\r\n    args,\r\n    currentState.addMessage\r\n  );\r\n\r\n  //PACKAGE RETURN\r\n  currentState.fcArray = tmpFCArray;\r\n  return currentState;\r\n}; //-----------------------------------------------------------------------\r\n\r\n/*********************************************\r\n * Adds a new FinanceCharge to the fcArray when CreditProtection is `ENABLED`.\r\n * Finds the range of dates for a CreditProtection\r\n * & Adds EACH CreditProtection to cpArray with id to reference the FinanceCharge\r\n *\r\n * @param currentState\r\n * @param args\r\n * @returns\r\n */\r\nconst AddFcYesCp = async (currentState: IFinanceObject, args: any) => {\r\n  let id = createID();\r\n  let tmpFCArray = await simpleFCAdd(\r\n    currentState.fcArray,\r\n    args,\r\n    currentState.addMessage,\r\n    id\r\n  );\r\n  let dates = getNewCPDates(args, currentState.cycleCode as number);\r\n  let tmpCPArray = await multipleCPAdd(\r\n    currentState,\r\n    { ...args, id: id },\r\n    dates\r\n  );\r\n\r\n  //PACKAGE RETURN\r\n  currentState.fcArray = tmpFCArray;\r\n  currentState.cpArray = tmpCPArray;\r\n  return currentState;\r\n}; //-----------------------------------------------------------------------\r\n\r\n/**************************************************************************\r\n * Edits a FinanceCharge with `newArgs` when CreditProtection is `DISABLED`\r\n *\r\n * @param currentState\r\n * @param newArgs\r\n * @returns\r\n */\r\nconst EditFcNoCp = async (currentState: IFinanceObject, newArgs: any) => {\r\n  let tmpFCArray = await simpleFCEdit(currentState, newArgs);\r\n\r\n  //PACKAGE RETURN\r\n  currentState.fcArray = tmpFCArray;\r\n  return currentState;\r\n}; //-----------------------------------------------------------------------\r\n\r\n/**************************************************************************\r\n * Edits a FinanceCharge with `newArgs` when CreditProtection is `ENABLED`\r\n * Edits all related CreditProtections\r\n * @param currentState\r\n * @param newArgs\r\n * @returns\r\n */\r\nconst EditFcYesCp = async (currentState: IFinanceObject, newArgs: any) => {\r\n  let tmpFCArray = await simpleFCEdit(currentState, newArgs);\r\n  let tmpCPArray = await multipleCPEdit(currentState, newArgs);\r\n\r\n  //PACKAGE RETURN\r\n  currentState.fcArray = tmpFCArray;\r\n  currentState.cpArray = tmpCPArray;\r\n  return currentState;\r\n}; //-----------------------------------------------------------------------/\r\n\r\n/**************************************************************************\r\n * Removes a FinanceCharge from the fcArray\r\n * & Finds if there is any related CreditProtections\r\n * @param currentState\r\n * @param chargeToRemove\r\n * @param cpChecked\r\n * @returns\r\n */\r\nconst RemoveFc = (\r\n  currentState: IFinanceObject,\r\n  chargeToRemove: any,\r\n  cpChecked: boolean\r\n) => {\r\n  let chargeIndex = -1;\r\n  let tmpFCArray = currentState.fcArray.slice();\r\n  tmpFCArray.find((e, i) => {\r\n    if (e.id === chargeToRemove.id) {\r\n      chargeIndex = i;\r\n      return true;\r\n    }\r\n    return false;\r\n  });\r\n\r\n  if (cpChecked) {\r\n    currentState = RemoveCpMultiple(currentState, chargeToRemove);\r\n  }\r\n\r\n  tmpFCArray.splice(chargeIndex, 1);\r\n  currentState.fcArray = tmpFCArray;\r\n  return currentState;\r\n}; //-----------------------------------------------------------------------/\r\n\r\n/**************************************************************************\r\n * Adds a new CreditProtection to cpArray\r\n *\r\n * @param currentState\r\n * @param chargeArgs\r\n * @returns\r\n */\r\nconst AddCp = async (currentState: IFinanceObject, chargeArgs: any) => {\r\n  let tmpCPArray = await simpleCPAdd(currentState, chargeArgs);\r\n\r\n  //PACKAGE RETURN\r\n  currentState.cpArray = tmpCPArray;\r\n  return currentState;\r\n}; //-----------------------------------------------------------------------/\r\n\r\n/**************************************************************************\r\n *\r\n * @param currentState The current chargesState\r\n * @param chargeToEdit The new user input data to make a different credit protection\r\n * @param index The number index of the charge to edit\r\n * @returns\r\n */\r\nconst EditCP = async (\r\n  currentState: IFinanceObject,\r\n  chargeToEdit: any,\r\n  index: number\r\n) => {\r\n  let isFCCharge = currentState.fcArray.find((e: any) => {\r\n    return e.id === chargeToEdit.id;\r\n  });\r\n  if (isFCCharge) {\r\n    chargeToEdit.id = createID();\r\n  }\r\n  let tmpCPArray = await simpleCPEdit(currentState, chargeToEdit, index);\r\n\r\n  //PACKAGE RETURN\r\n  currentState.cpArray = tmpCPArray;\r\n  return currentState;\r\n}; //-----------------------------------------------------------------------/\r\n\r\n/**\r\n *\r\n * @param currentState The current chargesState\r\n * @param index\r\n * @returns\r\n */\r\nconst RemoveCpSingle = (currentState: IFinanceObject, index: number) => {\r\n  let tmpCPArray = currentState.cpArray.slice();\r\n  tmpCPArray.splice(index, 1);\r\n  currentState.cpArray = tmpCPArray;\r\n  return currentState;\r\n};\r\n\r\n/**************************************************************************\r\n * Sets the cycle code then updates\r\n *\r\n * @param currentState\r\n * @param args\r\n * @returns\r\n */\r\nconst CycleCodeChanged = async (\r\n  currentState: IFinanceObject,\r\n  cycleCode: number\r\n) => {\r\n  currentState.cycleCode = cycleCode;\r\n  let newCPArray = await updateCpCharges(currentState, false);\r\n\r\n  //PACKAGE RETURN\r\n  currentState.cpArray = newCPArray;\r\n  return currentState;\r\n}; //-----------------------------------------------------------------------\r\n\r\n/***************************************************************************\r\n * This function should only be ran if CreditProtection is in fact toggled `true`\r\n *\r\n * @param currentState The current chargesState\r\n * @returns\r\n */\r\nconst CpToggled = async (currentState: IFinanceObject) => {\r\n  let newCPArray = await updateCpCharges(currentState, true);\r\n\r\n  currentState.cpArray = newCPArray;\r\n  return currentState;\r\n}; //-----------------------------------------------------------------------/\r\n\r\n//***********************************************************************************/\r\n//*                              END OF LOGIC                                       */\r\n//***********************************************************************************/\r\n","import { useEffect, useState } from 'react';\r\nimport { Route, Switch, BrowserRouter as Router } from 'react-router-dom';\r\nimport { DateCalc } from './components/DateCalc';\r\nimport { Design } from './components/Design/Design';\r\nimport { Scra } from './components/Scra';\r\nimport { Zdate } from './components/Zdate/';\r\nimport { Footer } from './components/Footer';\r\nimport { Header } from './components/Header';\r\nimport { ReleaseNotes } from './components/ReleaseNotes';\r\nimport { NoteBook } from './components/ReleaseNotes/NoteBook';\r\nimport { FinanceChargeCalc } from './components/FinanceChargeCalc';\r\n\r\nexport function Routes(): JSX.Element {\r\n  const [currRoute, setCurrRoute] = useState(window.location.pathname);\r\n  const [previousRoute, setPreviousRoute] = useState(window.location.pathname);\r\n  // Release Notes\r\n  const notes = NoteBook();\r\n\r\n  useEffect(() => {\r\n    switch (currRoute) {\r\n      case '/':\r\n        document.title = 'Finance Charges';\r\n        break;\r\n      // case '/scra':\r\n      //   document.title = 'SCRA calculator';\r\n      //   break;\r\n      case '/zDate':\r\n        document.title = 'Regulation Z Date';\r\n        break;\r\n      case '/dateCalc':\r\n        document.title = 'Date Calculator';\r\n        break;\r\n      case '/release-notes':\r\n        document.title = 'Release Notes';\r\n        break;\r\n      default:\r\n        document.title = 'Invalid Page';\r\n    }\r\n  }, [currRoute]);\r\n\r\n  return (\r\n    <Router>\r\n      <Header setCurrRoute={setCurrRoute} currRoute={currRoute} />\r\n\r\n      <Switch>\r\n        <Route exact path=\"/dateCalc\">\r\n          <DateCalc />\r\n          <Footer setCurrRoute={setCurrRoute} />\r\n        </Route>\r\n        <Route exact path=\"/zDate\">\r\n          <Zdate />\r\n          <Footer setCurrRoute={setCurrRoute} />\r\n        </Route>\r\n        <Route exact path=\"/design\">\r\n          <Design></Design>\r\n        </Route>\r\n        <Route exact path={['/', '/regz']}>\r\n          <FinanceChargeCalc />\r\n          <Footer setCurrRoute={setCurrRoute} />\r\n        </Route>\r\n        {/* <Route exact path=\"/scra\">\r\n          <Scra />\r\n          <Footer setCurrRoute={setCurrRoute} />\r\n        </Route> */}\r\n        <Route exact path=\"/release-notes\">\r\n          <div style={{ minHeight: '100vh' }}>\r\n            {notes.map((e) => {\r\n              return <ReleaseNotes release={e.release} children={e.children} />;\r\n            })}\r\n          </div>\r\n          <Footer setCurrRoute={setCurrRoute} />\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default Routes;\r\n","export const NoteBook = () => {\r\n  return [\r\n    {\r\n      release:\r\n        'Release notes - Release notes - UX Framework - Version Z-Calc v1.6.0',\r\n      children: [\r\n        `[UXFRAME-635]() Updated Fraud Adjustment Date for a Credit Protection to always be the current today. This will always be based off of the Pacific Time Zone`,\r\n        `[UXFRAME-635]() Updated the manual Credit Protection to use the correct number of statements for a calculation.`,\r\n        `[UXFRAME-635]() Removed Fraud Adjustment Date input from Credit Protection manual Add. All Fraud Adjustment Dates for Credit Protection are today's date.`,\r\n        `[UXFRAME-635]() Aligned the \"Total\" row on the Credit Protection table to the correct columns on Export and Copy Table.`,\r\n        `[UXFRAME-635]() When updating a Finance Charge/Cycle Code, the Credit Protection rows that are affected will be completely recalculated for all statements between the Statement Date and today's date. This is to reduce confusion when recalculating Credit Protection rows that change the number of rows that need to be displayed. `\r\n      ]\r\n    },\r\n    {\r\n      release:\r\n        'Release notes - Release notes - UX Framework - Version Z-Calc v1.5.0',\r\n      children: [\r\n        `[UXFRAME-635](https://creditonebank.atlassian.net/browse/UXFRAME-635) Update Finance Calculator API to new Production APIs`,\r\n        `[UXFRAME-629](https://creditonebank.atlassian.net/browse/UXFRAME-629) BUGFIX: Credit Protection showing incorrectly`,\r\n        `[UXFRAME-630](https://creditonebank.atlassian.net/browse/UXFRAME-630) BUGFIX: Edit a Finance Charge completely rerenders the tables`,\r\n        `[UXFRAME-631](https://creditonebank.atlassian.net/browse/UXFRAME-631) BUGFIX: Changing Cycle Code adds to the Credit Protection Lines`,\r\n        `[UXFRAME-632](https://creditonebank.atlassian.net/browse/UXFRAME-632) BUGFIX: Cycle Code should clear on Clear All`\r\n      ]\r\n    },\r\n    {\r\n      release:\r\n        'Release notes - Release notes - UX Framework - Version Z-Calc v1.4.0',\r\n      children: [\r\n        `[UXFRAME-591](https://creditonebank.atlassian.net/browse/UXFRAME-591) Adding a Credit Protection when there shouldn't be one.`,\r\n        `[UXFRAME-574](https://creditonebank.atlassian.net/browse/UXFRAME-574) Move Cycle Code next to the Credit Protection Checkbox`,\r\n        `[UXFRAME-573](https://creditonebank.atlassian.net/browse/UXFRAME-573) Comment out SCRA Calculator from Routes and Link`,\r\n        `[UXFRAME-572](https://creditonebank.atlassian.net/browse/UXFRAME-572) Add Copy to RegZ and Date Calculator`,\r\n        `[UXFRAME-567](https://creditonebank.atlassian.net/browse/UXFRAME-567) Credit Protection shouldn't be calculated when Fraud Amount is resolved before statement date.`,\r\n        `[UXFRAME-566](https://creditonebank.atlassian.net/browse/UXFRAME-566) Credit Protection being calculated wrong on first Credit Protection Row`,\r\n        `[UXFRAME-565](https://creditonebank.atlassian.net/browse/UXFRAME-565) Statement Date On Finanace Calculator on Credit Protection isn't correct`\r\n      ]\r\n    },\r\n    {\r\n      release: 'Release notes - UX Framework - Version Z-Calc v1.3.0',\r\n      children: [\r\n        '###Bug',\r\n\r\n        '[UXFRAME-279](https://creditonebank.atlassian.net/browse/UXFRAME-279) Float Point Error on Pricing Strategy cells in SCRA Calcuator',\r\n\r\n        '[UXFRAME-278](https://creditonebank.atlassian.net/browse/UXFRAME-278) Round by Line logic is wrong in the SCRA Calculator for totals',\r\n\r\n        '[UXFRAME-277](https://creditonebank.atlassian.net/browse/UXFRAME-277) Should ABD to ADB in the SCRA Calculator',\r\n\r\n        '[UXFRAME-275](https://creditonebank.atlassian.net/browse/UXFRAME-275) Tab must work on Pricing Strategy input',\r\n\r\n        '[UXFRAME-268](https://creditonebank.atlassian.net/browse/UXFRAME-268) Export Finance Charges csv missing Total fields and not totaling Total Purchase',\r\n\r\n        '[UXFRAME-267](https://creditonebank.atlassian.net/browse/UXFRAME-267) Credit Protection Statement Date allows adding of date after Fraud Adjustment',\r\n\r\n        '[UXFRAME-266](https://creditonebank.atlassian.net/browse/UXFRAME-266) Credit Protection Fraud Amount decimals are not consistent',\r\n\r\n        '[UXFRAME-265](https://creditonebank.atlassian.net/browse/UXFRAME-265) Credit Protection lines not staying removed.',\r\n\r\n        \"[UXFRAME-263](https://creditonebank.atlassian.net/browse/UXFRAME-263) Unchecking Credit Protection Box doesn't remove CP Total\",\r\n\r\n        '###Story',\r\n\r\n        '[UXFRAME-381](https://creditonebank.atlassian.net/browse/UXFRAME-381) Create Function to get Credit Protection from the API',\r\n\r\n        '[UXFRAME-380](https://creditonebank.atlassian.net/browse/UXFRAME-380) Rename Service Fee to CP Adjustment Interest in Credit Protection - Testing',\r\n\r\n        '[UXFRAME-376](https://creditonebank.atlassian.net/browse/UXFRAME-376) Create Credit Protection Table',\r\n\r\n        '[UXFRAME-375](https://creditonebank.atlassian.net/browse/UXFRAME-375) Create Finance Charge Table',\r\n\r\n        '[UXFRAME-373](https://creditonebank.atlassian.net/browse/UXFRAME-373) Create Finance Charge Parent Component',\r\n\r\n        '[UXFRAME-281](https://creditonebank.atlassian.net/browse/UXFRAME-281) Be able to add negative days to Date Calculator',\r\n\r\n        '[UXFRAME-280](https://creditonebank.atlassian.net/browse/UXFRAME-280) Change Header link and Title for Z-Date',\r\n\r\n        '[UXFRAME-276](https://creditonebank.atlassian.net/browse/UXFRAME-276) Remove Round by Total in SCRA Calculator',\r\n\r\n        '[UXFRAME-274](https://creditonebank.atlassian.net/browse/UXFRAME-274) Create a Clear All button that resets all of the inputs on each page',\r\n\r\n        '[UXFRAME-273](https://creditonebank.atlassian.net/browse/UXFRAME-273) Seperate out Credit Protection Fees and CP Adjustment Interest on the Total Component',\r\n\r\n        '[UXFRAME-272](https://creditonebank.atlassian.net/browse/UXFRAME-272) Capitalize Credit Protection in the Totals component',\r\n\r\n        '[UXFRAME-271](https://creditonebank.atlassian.net/browse/UXFRAME-271) Rename Service Fee to CP Adjustment Interest in Credit Protection',\r\n\r\n        '[UXFRAME-269](https://creditonebank.atlassian.net/browse/UXFRAME-269) Add a button to copy a the Finance Charge table.',\r\n\r\n        '[UXFRAME-170](https://creditonebank.atlassian.net/browse/UXFRAME-170) Create month by month rows on finance charges'\r\n      ]\r\n    }\r\n  ];\r\n};\r\n","import { ToastContext, useToast, ToastDisplay } from 'c1b-framework';\r\n\r\n/**\r\n * Sets the `useToast` and `ToastDisplay` and returns The `ToastContext.Provider` Component\r\n * @param props\r\n */\r\nexport const ToastProvider = (props: IToastProviderProps) => {\r\n  const { position = 'bottomRight', autoTimeout = 6000, children } = props;\r\n  const toasty = useToast();\r\n\r\n  return (\r\n    <ToastContext.Provider value={toasty}>\r\n      <ToastDisplay position={position} autoTimeout={autoTimeout} />\r\n      {children}\r\n    </ToastContext.Provider>\r\n  );\r\n};\r\n\r\nexport interface IToastProviderProps {\r\n  /**\r\n   * Which position on the page you want to the toasts to appear.\r\n   * @default 'bottomLeft'\r\n   */\r\n  position?: 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight';\r\n  /**\r\n   * The amount of time (in milliseconds) for the toast to display\r\n   * @default 6000\r\n   */\r\n  autoTimeout?: number;\r\n  children: React.ReactNode;\r\n}\r\n","import { ToastProvider } from '../ToastProvider';\r\n\r\nexport const GlobalProviders = (props: { children: React.ReactNode }) => {\r\n  const { children } = props;\r\n  return <ToastProvider>{children}</ToastProvider>;\r\n};\r\n","import { useEffect, useState } from 'react';\r\nimport { TranslateService, useToast } from 'c1b-framework';\r\nimport { getLanguageTranslations } from './translations';\r\nimport { Routes } from './Routes';\r\nimport './App.scss';\r\nimport { Link } from 'react-router-dom';\r\nimport { GlobalProviders } from './components/Providers/GlobalProviders';\r\n\r\nfunction App() {\r\n  const [isTranslationLoaded, setIsTranslationLoad] = useState(false);\r\n  const toasty = useToast();\r\n  useEffect(() => {\r\n    //! See the translation.tsx file for more information.\r\n    //! The app will load once the translations are loaded.\r\n    //* Do whatever you need to do get the correct language\r\n\r\n    //* If there is a user setting for langauge add it to the TranslateService by:\r\n    //* TranslateService.setUserSettingsLangauge(<whatever language>)\r\n\r\n    //* If there is a language picker language add it to the TranslateService by:\r\n    //* TranslateService.setLanguagePickerSettings(<whatever language>)\r\n\r\n    //*If you don't pass in a value it will get the language based on rank.\r\n    //* High to Low\r\n    //* 1. Language Picker\r\n    //* 2. User Setting\r\n    //* 3. Browser.\r\n    getLanguageTranslations('en-us').then(() => {\r\n      setIsTranslationLoad(true);\r\n    });\r\n  });\r\n\r\n  if (!isTranslationLoaded) {\r\n    return null;\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n      <GlobalProviders>\r\n        <Routes />\r\n      </GlobalProviders>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'c1b-framework/index.css';\r\nimport 'c1b-framework/App.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\nconsole.log('11/17/2021 8:24 AM PT');\r\n"],"sourceRoot":""}